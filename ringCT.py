from secp256k1 import * 
import struct
import random
import hashlib
import sha3
import binascii
import ecdsa
from ecdsa import SigningKey, VerifyingKey
from six import b
from ecdsa.ellipticcurve import CurveFp, INFINITY, Point
import time


from ethjsonrpc import EthJsonRpc
from ethjsonrpc.constants import BLOCK_TAGS, BLOCK_TAG_EARLIEST, BLOCK_TAG_LATEST

timeTo = 1300
debug = False
rangSigBool = True
MAX_AMOUNT = 2**64;
MAX_MIXIN = 100; 
crv=ecdsa.SECP256k1
g = SigningKey.generate(curve=crv)
P = 2**256 - 2**32 - 2**9 - 2**8 - 2**7 - 2**6 - 2**4 - 1
G = "0479BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8"
curveOrder = "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141"

connection = EthJsonRpc('localhost', 8545)
cb = connection.eth_coinbase()
# contractAddress = "0xa7b1800d46dd564278053eeb06cbdfdce3798c98" 
ATOMS = 64

def hash_to_point(pubK):
    return g.from_string(hashlib.sha256(pubK).digest(), curve=crv).verifying_key

def hash_to_point_special(pubK):
    p = VerifyingKey.from_string(pubK).pubkey.point
    return hash_to_point(to_32_bytes_number(p.x())+ to_32_bytes_number(p.y()))

def to_32_bytes_number (val, endianness='big'):
    # see https://stackoverflow.com/questions/8730927/convert-python-long-int-to-fixed-size-byte-array/28057222
    fmt = '%%0%dx' % 64
    s = binascii.unhexlify(fmt % val)
    if endianness == 'little':
        # see http://stackoverflow.com/a/931095/309233
        s = s[::-1]
    return s

def to_int_from_bytes(val, endianness= 'big'):
    return int.from_bytes(val, byteorder=endianness)

def add_2_32b(a, b):
    return to_32_bytes_number((to_int_from_bytes(a) + to_int_from_bytes(b)) % crv.order)

def sub_2_32b(a, b):
    return to_32_bytes_number((to_int_from_bytes(a) - to_int_from_bytes(b)) % crv.order)

# def create_contract():
#     compiled = "60606040527f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f817986000557f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b860015560406040519081016040528060005481526020016001548152506002906002610076929190610120565b5060206040519081016040528060026002806020026040519081016040528092919082600280156100bc576020028201915b8154815260200190600101908083116100a8575b505050505081525060046000820151816000019060026100dd929190610160565b5050507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f600655600560075560066008556007600955341561011b57fe5b6101c5565b826002810192821561014f579160200282015b8281111561014e578251825591602001919060010190610133565b5b50905061015c91906101a0565b5090565b826002810192821561018f579160200282015b8281111561018e578251825591602001919060010190610173565b5b50905061019c91906101a0565b5090565b6101c291905b808211156101be5760008160009055506001016101a6565b5090565b90565b610890806101d46000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637422d36414610046578063ecd31f60146102e9575bfe5b341561004e57fe5b610166600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020016000905b82821015610158578484839050604002016002806020026040519081016040528092919082600260200280828437820191505050505081526020019060010190610113565b5050505050919050506104b5565b604051808060200180602001858152602001806020018481038452888181518152602001915080519060200190808383600083146101c3575b8051825260208311156101c35760208201915060208101905060208303925061019f565b505050905090810190601f1680156101ef5780820380516001836020036101000a031916815260200191505b50848103835287818151815260200191508051906020019080838360008314610237575b80518252602083111561023757602082019150602081019050602083039250610213565b505050905090810190601f1680156102635780820380516001836020036101000a031916815260200191505b508481038252858181518152602001915080516000925b818410156102d3578284906020019060200201516002602002808383600083146102c3575b8051825260208311156102c35760208201915060208101905060208303925061029f565b505050905001926001019261027a565b9250505097505050505050505060405180910390f35b34156102f157fe5b6104b3600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919080359060200190919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020016000905b828210156103c157848483905060400201600280602002604051908101604052809291908260026020028082843782019150505050508152602001906001019061037c565b50505050509190803560001916906020019091908035906020019091908035906020019091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020016000905b828210156104a5578484839050604002016002806020026040519081016040528092919082600260200280828437820191505050505081526020019060010190610460565b5050505050919050506106c9565b005b6104bd61083c565b6104c561083c565b60006104cf610850565b7f551303dd5f39cbfe6daba6b3e27754b8a7d72f519756a2cde2b92c2bbde159a76040518080602001828103825260138152602001807f2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d0000000000000000000000000081525060200191505060405180910390a17f43123f7005ece31cd2478fa2cd0bec5ea2e353c1c3fe9ca390a6de2ab917eac96040518080602001828103825260168152602001807f576520676f742061206e696365206d6573736167653a0000000000000000000081525060200191505060405180910390a17f43123f7005ece31cd2478fa2cd0bec5ea2e353c1c3fe9ca390a6de2ab917eac9886040518080602001828103825283818151815260200191508051906020019080838360008314610610575b805182526020831115610610576020820191506020810190506020830392506105ec565b505050905090810190601f16801561063c5780820380516001836020036101000a031916815260200191505b509250505060405180910390a17f43123f7005ece31cd2478fa2cd0bec5ea2e353c1c3fe9ca390a6de2ab917eac96040518080602001828103825260138152602001807f2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d0000000000000000000000000081525060200191505060405180910390a18787878793509350935093505b945094509450949050565b6000600088518a8c02141515610768577f551303dd5f39cbfe6daba6b3e27754b8a7d72f519756a2cde2b92c2bbde159a760405180806020018281038252602b8152602001807f4d69736d6174636820696e207468652064696d656e73696f6e206f662074686581526020017f206b6579206d617472697800000000000000000000000000000000000000000081525060400191505060405180910390a15b7f43123f7005ece31cd2478fa2cd0bec5ea2e353c1c3fe9ca390a6de2ab917eac98c60405180806020018281038252838181518152602001915080519060200190808383600083146107d9575b8051825260208311156107d9576020820191506020810190506020830392506107b5565b505050905090810190601f1680156108055780820380516001836020036101000a031916815260200191505b509250505060405180910390a1600090505b8381101561082d575b8080600101915050610817565b5b505050505050505050505050565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a72305820a5fa078f0f18cb8426d0c3bc94628d48f90145b19b0de014beb6764f4c00e7ca0029"
#     blockNumber = connection.eth_blockNumber()
#     contract_tx = connection.create_contract(connection.eth_coinbase(), compiled, gas=300000)
#     print("tx " + contract_tx)
#     contract_addr = connection.eth_getTransactionReceipt(contract_tx)
#     while(contract_addr == None):
#         print("waiting")
#         time.sleep(0.5)
#         contract_addr = connection.eth_getTransactionReceipt(contract_tx)
#     global contractAddress
#     contractAddress = connection.get_contract_address(contract_tx)
#     print("addre" + contractAddress)


def ecdhEncode(mask, amount, receiverPk): 
    # mask: the mask to hide (32 bytes number)
    # amount: the amount to hide (32 bytes number)
    # receiverPk: the receiver pk (sec format)
    ## return: newMask: hidden mask (32 bytes number)
    ##         newAmount: hidden amount (32 bytes number)
    ##         senderPk: the public key genereated by the sender to encode this amount (sec format)

    secret = to_32_bytes_number(random.randrange(crv.order))
    senderSk= g.from_string(secret, curve=crv)
    senderPk = senderSk.verifying_key
    recvPubKey = VerifyingKey.from_string(receiverPk, curve=crv)
    to_hash = VerifyingKey.from_public_point(recvPubKey.pubkey.point * to_int_from_bytes(secret), curve=crv).to_string()
    sharedSecretInt = to_int_from_bytes(hashlib.sha256((to_hash)).digest())
    newMask = (to_int_from_bytes(mask) + sharedSecretInt) % crv.order
    newAmount = (to_int_from_bytes(amount) + sharedSecretInt) % crv.order
    return  to_32_bytes_number(newMask), to_32_bytes_number(newAmount), senderPk.to_string()

def ecdhDecode(mask, amount, senderPk, receiverSk): 
    # counter method to ecdh encode
    # mask: the hidden mask (32 bytes number)
    # amount: the hidden amount (32 bytes number)
    # senderPk: the public key genereated by the sender to encode this amount (sec format)
    # receiverSk: the receiver sk (32 bytes number)
    ## return: newMask: unhidden mask (32 bytes number)
    ##         newAmount: unhidden amount (32 bytes number)

    sendPubKey = VerifyingKey.from_string(senderPk, curve=crv)
    to_hash = VerifyingKey.from_public_point(sendPubKey.pubkey.point * to_int_from_bytes(receiverSk), curve=crv).to_string()
    sharedSecretInt = to_int_from_bytes(hashlib.sha256((to_hash)).digest())
    newMask = (to_int_from_bytes(mask) - sharedSecretInt) % crv.order
    newAmount = (to_int_from_bytes(amount) - sharedSecretInt) % crv.order
    return to_32_bytes_number(newMask), to_32_bytes_number(newAmount)

def createTransaction(message, inPk, inSk, inAmounts, destinations, outAmounts, mixin):
    # inPk: vector of public keys corresponding to the owner inputs(sec format)
    # inSk: vector of private keys corresponding to the public keys (format 32bytes number)
    # inAmounts: vector of number corresponding to the amount coming from corresponding public key
    # destinations: vector of public keys (sec format)
    # outAmounts: vector of the different amounts going to the respective destinations public keys (int)
    # mixin: the number of pk to get involved in the rings (int)
    ## return: destinations: a vector of destinations public keys as received (sec format)
    ##         destinationsCommitment: a vector of commitment assigned to each destinations public keys (32 bytes numbers)
    ##         I: part of MLSAG, a vector of pk in sec format corresponding the the sha256 hash of the sender pk 
    ##         c_0: part of MLSAG, first sha3_256 (keccak) of the consecutive series of the MLSAG 
    ##         ss: part of MLSAG, a matrix of "random" 32 bytes number
    ##         infos: an array of ecdhEncode result containing the amount paid to the corresponding output pk
    ##         rangeSig: vector of rangeSig (format TODO)

    print("------ Let's create a the transaction -------")
    assert mixin < MAX_MIXIN and mixin > 0, "The number of ring participant should be between 0 and " + str(MAX_MIXIN) + "\n Aborting..."
    assert len(inSk) == len(inPk) and len(inAmounts) == len(inPk), \
        "The number of private key doesn't match the number of public key or the number of input amounts.\n\
        Aborting..."
    assert len(destinations) == len(outAmounts), \
        "The number of outputs addresses should match the number of outputs amounts.\n\
        Aborting..."
    m = len(inSk)
    for i in range(0, m):
        assert inAmounts[i] > 0 and inAmounts[i] < MAX_AMOUNT, \
            "The ingoing amount #" + str(i) + " should be between 0 and " + str(MAX_AMOUNT) + "\n\
            Aborting..."
    outNum = len(destinations)
    for i in range (0, outNum):
        assert outAmounts[i] > 0 and outAmounts[i] < MAX_AMOUNT, \
            "The outgoing amount #" + str(i) + " should be between 0 and " + str(MAX_AMOUNT) + "\n\
            Aborting..."

    for i in range(0, m):
        assert g.from_string(inSk[i], curve=crv).verifying_key.to_string() == inPk[i], \
            "One secret key doesn't match the corresponding public key.\n\
            Aborting..."

    print("------ All arguments are good, next ! -------")

    inSkMasks = [] 
    inPkMasks = [] 
    for i in range(0, m):
        skMask = to_32_bytes_number(random.randrange(crv.order))
        inSkMasks.append(skMask)
        pkMask = g.from_string(skMask, curve=crv).verifying_key
        aH = hash_to_point(to_32_bytes_number(1)).pubkey.point * inAmounts[i]
        pkMaskPoint = pkMask.pubkey.point + aH
        inPkMasks.append(VerifyingKey.from_public_point(pkMaskPoint).to_string())

    destinationsCommitment = []
    infos = []
    rangeSig = []
    outSkMasks = []
    for i in range(0, outNum):
        print("------Creating rangeproof for amount#" + str(i+1) + "-------")
        outCommit, outSkMask, rg = proveRange(outAmounts[i])
        destinationsCommitment.append(outCommit)
        outSkMasks.append(outSkMask)
        rangeSig.append(rg)
        hiddenMask, hiddenAmount, senderPk = ecdhEncode(outSkMask, to_32_bytes_number(outAmounts[i]), destinations[i])
        infos.append([hiddenMask, hiddenAmount, senderPk])

    print("------  Rangeproofs are valid. Next   -------")

    pkMatrix, pkMasksMatrix, index = populateFromBlockchain(inPk, inPkMasks, mixin)

    print("------Matrix populated, going further!-------")

    if debug:
        (newMatrix, (I, c_0, ss)) = prepareMG(message, pkMatrix, pkMasksMatrix, inSk, inSkMasks, destinationsCommitment, outSkMasks, index)
        print("------Transaction created with succes!-------")
        return newMatrix, L, R, destinations, destinationsCommitment, I, c_0, ss, infos, rangeSig
    else:
        (newMatrix, (I, c_0, ss)) = prepareMG(message, pkMatrix, pkMasksMatrix, inSk, inSkMasks, destinationsCommitment, outSkMasks, index)
        print("------Transaction created with succes!-------")
        return newMatrix, destinations, destinationsCommitment, I, c_0, ss, infos, rangeSig

def verTransaction(message, newMatrix, I, c_0, ss, infos, rangeSig):
    for rg in rangeSig:
        verRangeProofs(rg)
    verifyMG(message, newMatrix, I, c_0, ss)

def prepareMG(message, pubsK, pubsC, inSk, inSkMask, outC, outSkMasks, index):
    # pubsK: matrix of public key (size: qxm, sec format)
    # pubsC: matrix of commitment for pk (size: qxm, 32bytes)
    # inSk: vector of private key (size: m, bytes32 format)
    # inSkMask: vector of mask for the corresponding sk (size: m, 32bytes)
    # outC: vector of commitment for pk (hidden amount) (size: outPKsize, 32bytes)
    # outSkMasks: vector mask for out public keys (bytes32)
    # index: index of where in the pubsK matrix our pks are located
    ## returns: same a genMG

    print("------ Preparing the matrix for the MG-------")

    rowsQ = len(pubsK)
    if debug:
        assert len(pubsK) == len(pubsC) and len(pubsK) > 0, "\
            Mismatch in the number of public commitment and keys.\nAborting..."
    colsM = len(pubsK[0])
    if debug:
        assert len(inSk) == len(inSkMask) and len(inSk) == colsM, \
            "Mismatch in the number of private keys or private key masks.\nAborting..."
        for i in range(0, rowsQ): 
            assert len(pubsK[i]) == len(pubsC[i]) and len(pubsK[i]) == colsM, \
                "Mismatch in the number of public commitment and keys.\nAborting..."
        assert index >= 0 and index < rowsQ, "index: " + str(index) + " should be between 0 and "\
            + str(rowsQ) + " (the number of public key).\nAborting..."
        assert len(outC) == len(outSkMasks) and len(outC) > 0, \
            "Mismatch in the number of private commitment and keys.\nAborting..."

    matrix = [[None for x in range(colsM + 1)] for y in range(rowsQ)]
    sk = [None for x in range(colsM + 1)]
    for i in range(colsM):
        sk[i] = inSk[i]
        if i == 0:
            sk[colsM] = inSkMask[i]
        else:
            sk[colsM] = add_2_32b(sk[colsM], inSkMask[i])
        for j in range(rowsQ):
            matrix[j][i] = pubsK[j][i]
            if i == 0:
                matrix[j][colsM] = VerifyingKey.from_string(pubsC[j][i]).pubkey.point
            else:
                matrix[j][colsM] = matrix[j][colsM] + VerifyingKey.from_string(pubsC[j][i]).pubkey.point

    for i in range(len(outC)):
        sk[colsM] = sub_2_32b(sk[colsM], outSkMasks[i])
    for i in range(rowsQ):
        for j in range(len(outC)):
            point = VerifyingKey.from_string(outC[j]).pubkey.point
            matrix[i][colsM] = matrix[i][colsM] + VerifyingKey.from_public_point(Point(crv.curve, point.x(), (-point.y()) % crv.curve.p(), crv.order)).pubkey.point

    for j in range(rowsQ):
        matrix[j][colsM] = VerifyingKey.from_public_point(matrix[j][colsM]).to_string()

    print("------ Done with the matrix for the MG-------")

    #TODO message
    return (matrix, genMG(message, matrix, sk, index))



def list_to_bytes(list):
    # [[None, None] for x in range(m)]
    ret = to_32_bytes_number(list[0][0]) + to_32_bytes_number(list[0][1])
    for x in range(1, len(list)):
        ret += to_32_bytes_number(list[x][0]) + to_32_bytes_number(list[x][1])
    return ret

def genMG(message, matrix, sk, index):

    n = len(matrix)
    if debug:
        assert n > 0, "No public key received.\nAborting..."
    m = len(matrix[0])
    if debug:
        assert m == len(sk), "The number of secret key doesn't match the number of public key.\nAborting..."
        for i in range(0, n):
            assert len(matrix[i]) == m, "Public key array is not rectangular.\nAborting..."
        assert m > 0, "No public key in the array.\nAborting..."
        assert index >= 0 and index < m, "Not a valid index.\nAborting..."
        for i in range(0, m):
            assert g.from_string(sk[i], curve=crv).verifying_key.to_string() == matrix[index][i], \
                "One secret key doesn't match the public key. Index: " + str(i) + "\n\
                Aborting..."

    message_bytes = bytes(message, 'UTF-8')

    alpha = [None for x in range(m)]
    I = [None for x in range(m)]
    ss = [[None for x in range(m)] for y in range(n)]
    
    L = [[[None, None] for x in range(m)] for y in range(n)] 
    R = [[[None, None] for x in range(m)] for y in range(n)] 

    for j in range(0, m):
        skJHashPub_point = hash_to_point(matrix[index][j]).pubkey.point * to_int_from_bytes(sk[j])
        I[j] = VerifyingKey.from_public_point(skJHashPub_point, curve=crv).to_string()
 
        alpha[j] = to_32_bytes_number(random.randrange(crv.order))
        LPoint = g.from_string(alpha[j], curve=crv).verifying_key.pubkey.point
        L[index][j] = [LPoint.x(), LPoint.y()]

        alphaHashPub_point = hash_to_point_special(matrix[index][j]).pubkey.point * to_int_from_bytes(alpha[j])
        R[index][j] = [alphaHashPub_point.x(), alphaHashPub_point.y()]

    c_idx_1 = sha3.keccak_256(message_bytes + list_to_bytes(L[index]) + list_to_bytes(R[index])).digest()



    c = c_idx_1
    c_0 = None
    for i in range(1, n): 
        idx = (index + i) % n
        for j in range(0, m):
            # assert ss[idx][j] == None, "Hmm sounds bad"
            ss[idx][j] = to_32_bytes_number(random.randrange(crv.order))

            c_PubK = VerifyingKey.from_string(matrix[idx][j], curve=crv).pubkey.point * to_int_from_bytes(c)
            sj_G = g.from_string(ss[idx][j], curve=crv)
            L_point = c_PubK + sj_G.verifying_key.pubkey.point
            L[idx][j] = [L_point.x(), L_point.y()]


            c_I = VerifyingKey.from_string(I[j], curve=crv).pubkey.point * to_int_from_bytes(c)
            R_point = hash_to_point_special(matrix[idx][j]).pubkey.point * to_int_from_bytes(ss[idx][j]) + c_I
            R[idx][j] = [R_point.x(), R_point.y()]

        c = sha3.keccak_256(message_bytes + list_to_bytes(L[idx]) + list_to_bytes(R[idx])).digest();
        if idx == n-1:
            c_0 = c

    print("------ Done with generating the MLSAG -------")

    if debug:
        # sanity check:
        L_tmp = [[None, None] for x in range(m)]
        R_tmp = [[None, None] for x in range(m)]

        for j in range(0, m):
            ss[index][j] = to_32_bytes_number((to_int_from_bytes(alpha[j]) - to_int_from_bytes(c) * to_int_from_bytes(sk[j])) % crv.order)

            c_PubK = VerifyingKey.from_string(matrix[index][j], curve=crv).pubkey.point * to_int_from_bytes(c)
            sj_G = g.from_string(ss[index][j], curve=crv)
            L_point = c_PubK + sj_G.verifying_key.pubkey.point
            L_tmp[j] = [L_point.x(), L_point.y()]

            c_I = VerifyingKey.from_string(I[j], curve=crv).pubkey.point * to_int_from_bytes(c)
            R_point = hash_to_point_special(matrix[index][j]).pubkey.point * to_int_from_bytes(ss[index][j]) + c_I
            R_tmp[j] = [R_point.x(), R_point.y()]

        c_tmp = sha3.keccak_256(message_bytes + list_to_bytes(L_tmp) + list_to_bytes(R_tmp)).digest()
        assert L_tmp == L[index] and R_tmp == R[index], "Sanity check for computing ss[index] failed.\nAborting..."

    if debug:
        assert verifyMG(message, matrix, I, c_0, ss), "Ring verification failed.\nAborting..."
        print("--------- Done with verifying the MLSAG  -------")
        return I, c_0, ss
    else:
        return I, c_0, ss

def verifyMG(message, matrix, I, c_0, ss):
    n = len(ss)
    assert n > 0, "No ss in the ring signature. Length = 0."
    assert len(matrix) == n, "Mismatch"
    m = len(ss[0])
    for i in range(0, n):
        assert len(ss[i]) == m, "Non rectangular ss in the ring signature."
    assert m > 0, "No ss in the ring siganture. Length ss[0] = 0"
    assert len(I) == len(ss[0]), "Not the same number of pubkey hash (I) as of secret (ss)."

    message_bytes = bytes(message, 'UTF-8')

    L = [[[None, None] for x in range(m)] for y in range(n)] 
    R = [[[None, None] for x in range(m)] for y in range(n)] 

    c = c_0
    for idx in range(0, n): 
        for j in range(0, m):
            # print("----- " + str(idx * m + j) + "")
            c_PubK = VerifyingKey.from_string(matrix[idx][j], curve=crv).pubkey.point * to_int_from_bytes(c)
            sj_G = g.from_string(ss[idx][j], curve=crv)
            L_point = c_PubK + sj_G.verifying_key.pubkey.point
            L[idx][j] = [L_point.x(), L_point.y()]
            # print(sj_G.verifying_key.pubkey.point.x())
            # print(sj_G.verifying_key.pubkey.point.y())
            # print("^^^^^^^")
            # print(c_PubK.x())
            # print(c_PubK.y())
            # print("++++++")
            
            c_I = VerifyingKey.from_string(I[j], curve=crv).pubkey.point * to_int_from_bytes(c)
            p = hash_to_point_special(matrix[idx][j]).pubkey.point * to_int_from_bytes(ss[idx][j])
            # opo = VerifyingKey.from_string(matrix[idx][j]).pubkey.point
            # print(opo.x())
            # print(opo.y())
            # opo2 = hashlib.sha256(to_32_bytes_number(opo.x())+to_32_bytes_number(opo.y())).digest()
            # print(int.from_bytes(opo2, 'big'))
            # print(g.from_string(opo2).verifying_key.pubkey.point.x())
            # print(g.from_string(opo2).verifying_key.pubkey.point.y())
            # print("^^^^^^^")
            # print(g.from_secret_exponent(int.from_bytes(opo2, 'big')).verifying_key.pubkey.point.x())
            # print(g.from_secret_exponent(int.from_bytes(opo2, 'big')).verifying_key.pubkey.point.y())
            # print("++++++")
            # print(str(p.x()))
            # print(str(p.y()))
            # print("......")
            # print(str(c_I.x()))
            # print(str(c_I.y()))
            # print("******")
            R_point = p + c_I
            R[idx][j] = [R_point.x(), R_point.y()]

        # print(L[idx])
        # print(R[idx])

        c = sha3.keccak_256(message_bytes + list_to_bytes(L[idx]) + list_to_bytes(R[idx])).digest();
        # print("CCCCCCCC = ", end="")
        # print(str(int.from_bytes(c, 'big')))

    return c == c_0

def populateFromBlockchain(publicKey, inPkMasks, mixin):
    # publicKey: vector of pk, sec format
    # inPkMasks: vector of bytes32 (format from verifyingkey.to_string())
    # mixin: number of other pk involved, int
    ## return: pk matrix (format sec), 
    ##         coressponding masks matrix, 
    ##         index of our pks in the matrix

    if debug:
        assert len(publicKey) == len(inPkMasks), \
            "Mismatch in the number of public key and their corresponding mask\n\
            Aborting..."
    m = len(publicKey)
    index = random.randrange(mixin - 1)
    pkMatrix = []
    maskMatrix = []
    for i in range(0, mixin):
        if i != index:
            pkMatrix.append([getKeyFromBlockchain() for i in range(0, m)])
            maskMatrix.append([hash_to_point(to_32_bytes_number(random.randrange(crv.order))).to_string() for i in range(0, m)])
        else: 
            pkMatrix.append(publicKey)
            maskMatrix.append(inPkMasks)
    return pkMatrix, maskMatrix, index

def getKeyFromBlockchain():
    #TODO
    ## return: a public key "from the blockchain" in the to_string format
    x = to_32_bytes_number(random.randrange(crv.order))
    return g.from_string(x).verifying_key.to_string()

def GenSchnorrNonLinkable(x, P1, P2, index):
    # x: bytes32 number
    # P1: pubkey in to string format bytes32
    # P2: pubkey in to string format bytes32

    if index == 0:
        a = to_32_bytes_number(random.randrange(crv.order))
        L1Point = g.from_string(a).verifying_key.pubkey.point
        s2 = to_32_bytes_number(random.randrange(crv.order))
        c2 = hashlib.sha256(to_32_bytes_number(L1Point.x()) + to_32_bytes_number(L1Point.y())).digest()
        L2Point = g.from_string(s2).verifying_key.pubkey.point + (VerifyingKey.from_string(P2).pubkey.point * to_int_from_bytes(c2))
        c1 = hashlib.sha256(to_32_bytes_number(L2Point.x()) + to_32_bytes_number(L2Point.y())).digest()
        s1 = to_32_bytes_number((to_int_from_bytes(a) -  to_int_from_bytes(x) * to_int_from_bytes(c1)) % crv.order)

        # sanity check
        if(debug):
            L1p = g.from_string(s1).verifying_key.pubkey.point + (VerifyingKey.from_string(P1).pubkey.point * to_int_from_bytes(c1))
            assert VerifyingKey.from_public_point(L1p).to_string() == VerifyingKey.from_public_point(L1Point).to_string(), \
                "Sanity check failed in GenSchnorr 1\nAborting..."
    if index == 1:
        a = to_32_bytes_number(random.randrange(crv.order))
        L2Point = g.from_string(a).verifying_key.pubkey.point
        s1 = to_32_bytes_number(random.randrange(crv.order))
        c1 = hashlib.sha256(to_32_bytes_number(L2Point.x()) + to_32_bytes_number(L2Point.y())).digest()
        L1Point = g.from_string(s1).verifying_key.pubkey.point + (VerifyingKey.from_string(P1).pubkey.point * to_int_from_bytes(c1))
        c2 = hashlib.sha256(to_32_bytes_number(L1Point.x()) + to_32_bytes_number(L1Point.y())).digest()
        s2 = to_32_bytes_number((to_int_from_bytes(a) - (to_int_from_bytes(x) * to_int_from_bytes(c2))) % crv.order)
        # sanity check
        if(debug):
            L2p = g.from_string(s2).verifying_key.pubkey.point + (VerifyingKey.from_string(P2).pubkey.point * to_int_from_bytes(c2))
            assert VerifyingKey.from_public_point(L2p).to_string() == VerifyingKey.from_public_point(L2Point).to_string(), \
                "Sanity check failed in GenSchnorr 2\nAborting..."
    L1 = VerifyingKey.from_public_point(L1Point).to_string()
    return L1, s1, s2

def VerSchnorrNonLinkable(P1, P2, L1, s1, s2):
    # P1: Pubkey in from_string format (32 bytes)
    # P2: Pubkey in from_string format (32 bytes)
    # L1: output of GenSchnorr, pubkey in from_string format (32 bytes)
    # s1: output of GenSchnorr, number (32 bytes)
    # s2: output of GenSchnorr, number (32 bytes)
    L1Point = VerifyingKey.from_string(L1).pubkey.point
    c2 = hashlib.sha256(to_32_bytes_number(L1Point.x()) + to_32_bytes_number(L1Point.y())).digest()
    L2PointA = g.from_string(s2).verifying_key.pubkey.point
    L2Point = g.from_string(s2).verifying_key.pubkey.point + (VerifyingKey.from_string(P2).pubkey.point * to_int_from_bytes(c2))
    c1 = hashlib.sha256(to_32_bytes_number(L2Point.x()) + to_32_bytes_number(L2Point.y())).digest()
    L1p = VerifyingKey.from_public_point(g.from_string(s1).verifying_key.pubkey.point + (VerifyingKey.from_string(P1).pubkey.point * to_int_from_bytes(c1))).to_string()
    assert L1 == L1p, "GenSchnorrNonLinkable failed to generate a valid signature.\nAborting..."

def GenASNL(x, P1, P2, indices):
    # x: vector of 32bytes number serving as mask
    # P1: Public key 1, from_string format (32bytes)
    # P2: Public key 2, from_string format (32bytes)
    # indices: vector of number (1 and 0 in our case) to specify which public key will be used to close the ring
    ## returns: L1: vector of public key (to_string format, 32bytes)
    ##          s2: vector of 32 bytes number
    ##          s: 32 bytes number, aggregate of s1
    n = len(x)
    L1 = [None] * n
    s1 = [None] * n
    s2 = [None] * n
    s = to_32_bytes_number(0)
    print("Generating the per bit signature of the amount")
    for j in range(0, n):
        if j % (n//10) == 0:
            print("[", end='')
            for u in range(0, 10):
                if u < (j*10)/n:
                    print("#", end='')
                else:
                    print(" ", end='')
            print("]")
        L1[j], s1[j], s2[j] = GenSchnorrNonLinkable(x[j], P1[j], P2[j], indices[j])
        if debug:
            VerSchnorrNonLinkable(P1[j], P2[j], L1[j], s1[j], s2[j])
        s = add_2_32b(s, s1[j])
    return L1, s2, s

def VerASNL(P1, P2, L1, s2, s):
    # P1: Public key 1, from_string format (32bytes)
    # P2: Public key 2, from_string format (32bytes)
    # L1: vector of public key (to_string format, 32bytes)
    # s2: vector of 32 bytes number
    # s: 32 bytes number, aggregate of s1
    n = len(P1)
    LHS = to_32_bytes_number(0)
    RHS = g.from_string(s).verifying_key.pubkey.point
    # print(RHS.x())
    for j in range(0, n):
        c2 = hashlib.sha256(L1[j]).digest()
        # print(to_int_from_bytes(c2))
        L2Point = g.from_string(s2[j]).verifying_key.pubkey.point + (VerifyingKey.from_string(P2[j]).pubkey.point * to_int_from_bytes(c2))
        # print(L2Point.x())
        L2 = VerifyingKey.from_public_point(L2Point).to_string()
        if j == 0:
            LHS = VerifyingKey.from_string(L1[j]).pubkey.point
        else:
            LHS = LHS + VerifyingKey.from_string(L1[j]).pubkey.point
        c1 = hashlib.sha256(L2).digest()
        # print(to_int_from_bytes(c1))
        RHS = RHS + (VerifyingKey.from_string(P1[j]).pubkey.point * to_int_from_bytes(c1))
    assert VerifyingKey.from_public_point(LHS).to_string() == VerifyingKey.from_public_point(RHS).to_string(), \
        "GenASNL failed to generate a valid signature.\nAborting..."
    # print(LHS.x())
    # print(RHS.x())
    # print(LHS.y())
    # print(RHS.y())

def proveRange(amount):
    # amount: the amount to prove range from, in int
    ## returns: C_pk: output commitment serving as a public key (to_string 32bytes format)
    ##          mask: part of the private key for C_pk. mask * G + amount * H == C_pk, 32 bytes number format
    ##          rg: vector of range proofs, each entry contain a vector of public key Ci and a aggregate signature.
    ##              The aggregate signature itself contains L1: vector of public key (to_string format, 32bytes)
    ##                                                      s2: vector of 32 bytes number
    ##                                                      s: 32 bytes number, aggregate of s1
    ##              For more infos on asig, see GenASNL(...)

    HPow2 = hash_to_point(to_32_bytes_number(1)).pubkey.point
    H2 = []
    for i in range(0, ATOMS):
        H2.append(VerifyingKey.from_public_point(HPow2).to_string())
        HPow2 = HPow2 * 2

    def d2b(n, digits):
        b = [0] * digits
        i = 0
        while n:
            b[i] = n & 1
            i = i + 1
            n >>= 1
        return b 

    bb = d2b(amount, ATOMS) #gives binary form of bb in "digits" binary digits
    mask = to_32_bytes_number(0)
    
    C = to_32_bytes_number(0)
    ai = []
    Ci = []
    CiH = []

    print("------  Preparing different elements  -------")
    for i in range(0, ATOMS):
        ai.append(to_32_bytes_number(random.randrange(crv.order)))
        mask = add_2_32b(mask, ai[i]) #creating the total mask since you have to pass this to receiver...
        if bb[i] == 0:
            Ci.append(g.from_string(ai[i]).verifying_key.to_string())
        if bb[i] == 1:
            Ci.append(VerifyingKey.from_public_point(\
                g.from_string(ai[i]).verifying_key.pubkey.point + \
                VerifyingKey.from_string(H2[i]).pubkey.point\
                ).to_string())


        negateH2 = Point(crv.curve, VerifyingKey.from_string(H2[i]).pubkey.point.x(), (-VerifyingKey.from_string(H2[i]).pubkey.point.y()) , crv.order)
        CiH.append(VerifyingKey.from_public_point(VerifyingKey.from_string(Ci[i]).pubkey.point + negateH2).to_string()) 
        
        if debug and bb[i] == 1:
            #Sanity check A + h2 - h2 == A
            assert g.from_string(ai[i]).verifying_key.to_string() == CiH[i], \
                "Sanity check failed in proveRange !" + bytes.hex(g.from_string(ai[i]).verifying_key.to_string()) +\
                " ---- " + bytes.hex(CiH[i])
    if rangSigBool == True:
        L1, s2, s = GenASNL(ai, Ci, CiH, bb)
        if debug:
            VerASNL(Ci, CiH, L1, s2, s)

        asig = [L1, s2, s]
        rg = [Ci, asig]
    else:
        rg = 1

    C_point = VerifyingKey.from_string(Ci[0]).pubkey.point
    for i in range(1, len(Ci)):
        C_point = C_point + VerifyingKey.from_string(Ci[i]).pubkey.point

    C = to_32_bytes_number(0)
    for i in range(0, len(Ci)):
        C = add_2_32b(C, Ci[i])


    C_pk = VerifyingKey.from_public_point(C_point)
    if debug:
        x = hash_to_point(to_32_bytes_number(1)).pubkey.point * amount + g.from_string(mask).verifying_key.pubkey.point
        assert C_pk.to_string() == VerifyingKey.from_public_point(x).to_string(), \
            "Something went wrong in the genreation of the commitment! " +\
            bytes.hex(C_pk.to_string()) + " should equal " + bytes.hex(VerifyingKey.from_public_point(x).to_string())

    return C_pk.to_string(), mask, rg


def verRangeProofs(rg):
    HPow2 = hash_to_point(to_32_bytes_number(1)).pubkey.point
    H2 = []
    for i in range(0, ATOMS):
        H2.append(VerifyingKey.from_public_point(HPow2).to_string())
        HPow2 = HPow2 * 2
    CiH = []
    Ci = rg[0]
    [L1, s2, s] = rg[1]
    for i in range(0, ATOMS):
        negateH2 = Point(crv.curve, VerifyingKey.from_string(H2[i]).pubkey.point.x(), (-VerifyingKey.from_string(H2[i]).pubkey.point.y()) , crv.order)
        CiH.append(VerifyingKey.from_public_point(VerifyingKey.from_string(Ci[i]).pubkey.point + negateH2).to_string()) 
    VerASNL(Ci, CiH, L1, s2, s)



def prepare_arguments_to_send_ring(pubkey, c0, ss, II):
    # Prepare arguments for sending to the contract. 
    # Since solidity doesn't accept 2dim array so easily we have to adapt some of our arguments. C0 is untouched. 
    ##
    pubkeysAlligned = []
    for i in range(0, len(pubkey)):
        for j in range(0, len(pubkey[0])):
            pk = VerifyingKey.from_string(pubkey[i][j]).pubkey.point
            pubkeysAlligned.append([to_32_bytes_number(pk.x()), to_32_bytes_number(pk.y())])

    ssAlligned = []
    for i in range(0, len(ss)):
        for j in range(0, len(ss[0])):
            ssAlligned.append(ss[i][j])

    IIAlligned = []
    for i in range(0, len(II)):
        I = VerifyingKey.from_string(II[i]).pubkey.point
        IIAlligned.append([to_32_bytes_number(I.x()), to_32_bytes_number(I.y())])
    return pubkeysAlligned, c0, ssAlligned, IIAlligned

def prepare_arguments_to_send_rg(rangeSig):
    # Prepare arguments for sending to the contract. 
    # Since solidity doesn't accept 2dim array so easily we have to adapt some of our arguments. C0 is untouched. 
    ##
    n = len(rangeSig)
    m = len(rangeSig[0][0])
    CiArray = []
    L1Array = []
    s2Array = []
    sArray = []
    for i in range(0, n):
        sArray.append(to_int_from_bytes(rangeSig[i][1][2]))
        for j in range(0, len(rangeSig[i][0])):
            CiP = VerifyingKey.from_string(rangeSig[i][0][j]).pubkey.point
            CiArray.append([CiP.x(), CiP.y()])
            L1P = VerifyingKey.from_string(rangeSig[i][1][0][j]).pubkey.point
            L1Array.append([L1P.x(), L1P.y()])
            s2Array.append(to_int_from_bytes(rangeSig[i][1][1][j]))
    return CiArray, L1Array, s2Array, sArray


def displayFilters():
    for i in range(0, timeTo):
        time.sleep(1);
        if i%10== 0:
            print(i)
    for i in range(0, len(filter)):
        change = connection.eth_getFilterChanges(filter[i])
        if len(change) > 0:
            for j in range(0, len(change)):
                if filterNames[i] == "Print uint256":
                    print(filterNames[i] + " result " + str(j) + ":\n" + str(to_int_from_bytes(bytes.fromhex(change[j]["data"][2:]))))
                else:
                    print(filterNames[i] + " result " + str(j) + ":\n" + str(bytes.fromhex(change[j]["data"][2:])))

    print("------ All events have been displayed -------")

def send(sig, args):
    # send a function call to the contract
    ## sig: string of the signature of the fucntion, no space, no variable name
    ## args: arguments in an array. In the order of the function signature. 

    # debug
    # sig = 'test(uint256)'
    # args = [1]

    results = connection.call_with_transaction(cb, contractAddress, 
        sig,\
        args, gas=99999999999, gas_price=1)
    bashCommand = 'curl -X POST 127.0.0.1:8545 -m 3 --data ' + results.replace(" ", "")
    import subprocess
    process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()
    print(output)
    print("ERROR: ",error)
    print("------Transaction sent, waiting events-------")
    displayFilters();

def sendTransaction(message, matrix, I, c, ss, infos, rangeSig):
    #
    ## infos are not used yet
    ## 
    print("------ Preparing to send Transaction  -------")
    pubkeysAlligned, c0, ssAlligned, IIAlligned = prepare_arguments_to_send_ring(pubkey, c0, ss, II)
    CiArray, L1Array, s2Array, sArray = prepare_arguments_to_send_rg(rangeSig)

    # verify(string message, string infos, uint256[2] pkDim, bytes32[2][] pkB, bytes32 c0, uint256[2] ssDim, bytes32[] ssB, uint256 IIX, bytes32[2][] IIB, uint256[2] Cdim, uint256[2][] CiArray, uint256[2][] L1Array, uint256[] s2Array, uint256[] sArray)
    sig = 'verify(string,string,uint256,uint256,bytes32[2][],bytes32,uint256,uint256,bytes32[],uint256,bytes32[2][],uint255[2],uint256[2][],uint256[2][],uint256[],uint256[])'
    args = [message,\
        [len(pubkey), len(pubkey[0])], pubkeysAlligned,\
        c0,\
        [len(ss), len(ss[0])], ssAlligned,\
        len(II), IIAlligned\
        [n, m], CiArray,\
        L1Array,\
        s2Array,\
        sArray]
    send(sig, args)



def send_ring(message, pubkey, c0, ss, II):
    print("------ Preparing to send transaction  -------")
    pubkeysAlligned, c0, ssAlligned, IIAlligned = prepare_arguments_to_send_ring(pubkey, c0, ss, II)

    sig = 'verifySignature(string,uint256,uint256,bytes32[2][],bytes32,uint256,uint256,bytes32[],uint256,bytes32[2][])'
    args = [message,\
        len(pubkey), len(pubkey[0]), pubkeysAlligned,\
        c0,\
        len(ss), len(ss[0]), ssAlligned,\
        len(II), IIAlligned]
    send(sig, args)

def send_rg(rangeSig):
    print("------ Preparing to send Transaction  -------")
    CiArray, L1Array, s2Array, sArray = prepare_arguments_to_send_rg(rangeSig)
    # verifyRangeProofs(uint256 Cx, uint256 Cy, uint256[2][] CiArray, uint256[2][] L1Array, uint256[] s2Array, uint256[] sArray)
    sig = 'verifyRangeProofs(uint256,uint256,uint256[2][],uint256[2][],uint256[],uint256[])'
    args = [len(rangeSig), len(rangeSig[0][0]), CiArray,\
        L1Array,\
        s2Array,\
        sArray]
    send(sig, args)


def sendASNL(P1, P2, L1, s2, s):
    print("------ Preparing to send ASNL  -------")
    P1x = len(P1)
    P1A = [[VerifyingKey.from_string(x).pubkey.point.x(), VerifyingKey.from_string(x).pubkey.point.y()] for x in P1]
    P2A = [[VerifyingKey.from_string(x).pubkey.point.x(), VerifyingKey.from_string(x).pubkey.point.y()] for x in P2]
    L1A = [[VerifyingKey.from_string(x).pubkey.point.x(), VerifyingKey.from_string(x).pubkey.point.y()] for x in L1]
    s2a = [to_int_from_bytes(x) for x in s2]

    sig = 'VerASNL(uint256,uint256[2][],uint256[2][],uint256[2][],uint256[],uint256)'
    args =[P1x, P1A, P2A, L1A, s2a, to_int_from_bytes(s)]
    send(sig, args)

def sendVerRang(P1, L1, s2, s):
    print("------ Preparing to send VerRang  -------")
    P1A = [[VerifyingKey.from_string(x).pubkey.point.x(), VerifyingKey.from_string(x).pubkey.point.y()] for x in P1]
    L1A = [[VerifyingKey.from_string(x).pubkey.point.x(), VerifyingKey.from_string(x).pubkey.point.y()] for x in L1]
    s2a = [to_int_from_bytes(x) for x in s2]

    sig = 'verRangeProofs(uint256[2][],uint256[2][],uint256[],uint256)'
    args =[P1A, L1A, s2a, to_int_from_bytes(s)]
    send(sig, args)




def test():
    print("------  Entering the first test case. -------")

    for i in range(0, 10):
        x = random.randrange(2**256)
        assert x == to_int_from_bytes(to_32_bytes_number(x)), "bytes <-> int conversion failed, x = %d" % (x)
    
    print("------ Entering the second test case. -------")

    for i in range(0, 10):
        x = random.randrange(crv.order)
        y = random.randrange(crv.order)
        newMask, newAmount, sendPubKey = ecdhEncode(to_32_bytes_number(x), to_32_bytes_number(y), bytes.fromhex(pub))
        newX, newY = ecdhDecode(newMask, newAmount, sendPubKey, bytes.fromhex(pri))
        assert to_int_from_bytes(newX) == x and to_int_from_bytes(newY) == y, "ECDH failed, x = %d, y = %d" % (x, y)

    print("------  All test passed. Well done !  -------")



with open("contractAddress.txt") as f:
    content = f.readlines()
# you may also want to remove whitespace characters like `\n` at the end of each line
content = [x.strip() for x in content]
found = False
i = 0
while not found and i < len(content):
    if content[i][0:7] == 'RingCT:':
        found = True
        contractAddress = content[i][8:50]
    i += 1
if not found:
    sys.exit("Error message")
filterNames = ['Log Error', 'Print string', 'Print bool', 'Print address', 'Print uint256', 'PrintStringAndUint(string,uint256)']
to_keccack = ["LogErrorString(string)", "PrintString(string)", "PrintBool(bool)", "PrintAddress(address)", "PrintUint(uint256)", "PrintStringAndUint(string,uint256)"]
keccack = []
for i in range(0, len(to_keccack)):
    keccack.append(connection.web3_sha3(to_keccack[i]))
filter = []
for i in range(0, len(keccack)):
    filter.append(connection.eth_newFilter(from_block='earliest', address=contractAddress, topics=[keccack[i]]))




upu = 0
pri = "07ca500a843616b48db3618aea3e9e1174dede9b4e94b95b2170182f632ad47c"
pri4 = "79d3372ffd4278affd69313355d38c6d90d489e4ab0bbbef9589d7cc9559ab6d"
pri5 = "00dff8928e99bda9bb83a377e09c8bf5d110c414fa65d771b7b84797709c7dd0b1"
pub = "0462abcca39e6dbe30ade7be2949239311162792bdb257f408ccd9eab65e18bc5bbcf8a3f08675bd792251a23d09a48a870644ba3923996cc5b5ec2d68043f3df3"
pub2 = "040ccad48919d8f6a206a1ac7113c22db62aa744a0700762b70aa0284d474c00203029637ce8e84f6551fd92a0db8e1f964ff13aa992e4cbfd1fb8fa33c6e6c53c"
pub3 = "049f742f925b554e2dc02e2da5cb9663ef810e9eefb30818b3c12bc26afb8dd7ba3461c0f7d2b997bf455973af308a71ed34ae415cfc946de84db3961db522e5d2"
pub4 = "04ef36c6d140e7970cc54c08e0e5d3173059ee6276dd0de99e09d10c49bd49e63c44e0a2e7180fff5e3e8a549027b8a37bc3a9437374ef1b7a05040b244a7bccc5"
pub5 = "04da11a42320ae495014dd9c1c51d43d6c55ca51b7fe9ae3e1258e927e97f48be4e7a4474c067154fdaa1c5b26dee555c3e649337605510cf9e1d5c1e657352e9c"
# createTransaction(bytes.fromhex(pri), bytes.fromhex(pub), [bytes.fromhex(pub2), bytes.fromhex(pub3)], [1, 2], 2)




# helloashjdagfghfhgjhjgjdlas = []
# inAmounts = [3,4]
# inSk = []
# inPk = []
# for i in range(0, len(inAmounts)):
#     sk = to_32_bytes_number(random.randrange(crv.order))
#     inSk.append(sk)
#     inPk.append(g.from_string(sk, curve=crv).verifying_key.to_string())

# outAmount = [1, 6]
# message = "hello"
# outputPub = [VerifyingKey.from_sec(bytes.fromhex(pub)).to_string(), VerifyingKey.from_sec(bytes.fromhex(pub5)).to_string()]
# matrix, destinations, destinationsCommitment, I, c, ss, infos, rangeSig =  createTransaction(message, inPk, inSk, inAmounts, outputPub, outAmount, 2)
# verTransaction(message, matrix, I, c, ss, infos, rangeSig)

# print("rg:\n")
# print(rangeSig)
# rangeSig = [[[b'\\L\xec\xd7N\x9e\xde\xd9n\xb9na\xb0\xef\x1d\x85\xd9\xd4\x0bkQ\x16\x98/c\x95D\xd4\x97N\xbd\x18\xdaN\xc0\x12A\x07@\xdd\xcc\xb1\xd1\x88-<\x96\x85\xb14\xc6hhcy\x9d\xa6\xda\xf4~\xd7\xf2\xeb9', b'a\xf3\x9f\x87H`\xf4\x86\xd0/ws\xa3\xca\x8c\xa7\xa9\xf1|4\x9c\xb6?^\x1dY\xf2\xcf\xef}\\\xd5\xe0\xa7s\x0c[OjrW\xbd\xc1\xd7\x81q\xe0\xfe\x13r\x0cr\xe2\x04\x8d\xbdp\x14,p\x9b\xa5n\xe7', b'\x9b\x92F\xc6k\xd14\x90/\xf2\xb4w\x15|\n\xa7\x12\xae\xc2\xa8\xbd\xf4\xc7\xd6\xd6\xe65\n\x11 \xea\x15\x83v\x12s\x05l+%\xf5}=\xaf\xad\xc3\xd9d\xb6\xbaz^<\x13\xeda\x91\xc2Hb\\."7', b'\x0c\xd5f6`N\x15T\x81l\xee3\xd6P*Z~X\xe56.\xd6\xe2\xf4\x0ci\x0e\\&SJ\x12\xc7\\3\xfb`\x1ae+i\xbco9\xe6\xbb,<\x1bf\xd2f\x9cF\xb1\x12KU\xea\xd2\x04\x8c\x1a\x9c', b'\xd0\x1b\xab4O\xcfH\xdfb\x03U#\x0b\xecd\xaf;\xf8\xbf\xf3D\xb0\xc5\x87\x1b\xaf+\x93v\xbb3\xc9\xb3\xf7\xd8\x80m!\xc8\x93\xd0i\xb3\xb3B\xf84u\\7\x8b\xf3J!\xbcV\x13\x9fC \t\x88\xb3 ', b'\x12\x14\xae\xc2\xb3\xd2T,\x87}\xe2,-\xe4\xee\x0c/]\x9d\x8eF\x942\xb0h\xba\xb58I:p\xf5\x150/\x11w\x97t\xf9\x12\x8fct\x8dX\xdeVe\x9faE\x93\xc9-\xda\xf5\xe2\x97/\xe1\x914:', b'\xa7B\x8a\xf2\xde\x08\x18e\xb7;OWwK\x89\x1c|IV\xd8\xdaY\x1bq\xc3\xc4\xfe\xd8{\xe1)\x0f\x7f\x1f\xa6\x84ICr\x07\x02\x15\x84+p\xeb&W\x0e\xa43\xae\xa8jz>\x87\xfc\xa7<\x1bM\x8f<', b'\xe2B\xc7;LLL\xed\x88\xbb\xcc\xc7H\x05{?\xc0\ri\xa9\x9a\r\xb5*F\x9c\x934MK\x8f\xc3\xdd\xfd\x9dV\x8d\xa8\xadX\x04\xc8\x88\xdd^\x85{\xb7\x11\xf8\xbd\xff\x92\xe7\x8b\xf7;\xb7q\xe5\xb0\xc5\xaa0', b'\xcb\xd5\xca\xb1\xdb\x7f-P$Z\xba\xa5~\xca\x0cM\x8d\xcd;c.Z\x97\x9dTT\x1aaW\xff\xb6b\x03\x9a\x03}#\\\\gQ\xcc^\xed\xc3\x10r\xeb\xf2N\xe8\x1d\xd0H\x02\x81c\x06A\xdb\x86d\x84 ', b"\x04\x03\x17p\xa4'\x84\xf1\xacq\xe8bh\xbe\xd42\x80\xb1\x80K9\xce\x07\xe9\x85\x1f\xfeg\x8b\xa5\xe6\xe72\xcf2\x9d\xc2Tk\xdf\x00\xc7\x0b\x1b\x8a\xae\xdf\x87\xe9&4h\xcb\xf6dh`\xef\xfc\x90\xdb\x83rL", b'E\\\x94e\x97\x0e5NYc\xb2x]\r\xfa\x1c^\x1a\xff5S_\xf8\xb7)\xd6\xd3\xd8\x01:\x9c\x0c\x81Z\x82\xfbX@\xf9\x06\x80\xb1(\xd9+\xfc<\xcf\xc72W3\x82\xa8\x0b\x9c\xf9)\xe3\xe5g\x93\x08\x08', b'c\xdfz\xb2A\xf1\xab\xc8\xd9\x1d\x95\x0e h\xf1`\xdf\x15\xe2\x98\xaa\xde#\xab<\x008^\xe2\xa0\xb6\r\x07\xd3\x85\xd9\xb3\x9cW/\x9e\xd118\xb5(\x0c.>){\xe8\xf0\x9f\xab?\x12\xbe0\xbe\xcb?\x10\x08', b'\xa4\x14\xf8AJ\xb3\xa5A\x93\xea\x13\xb2%\x84\x15S\xff\xbd\x86W\xb2E\x84\xfc;:\x95P9\x1aX\x99\xba\xe3\xba\xcf\xbe\xa0\x8b5\x05\xf4N\xb7\xdfk\x82\xd5\xe6W\x07\x81\xb7\x9fC\xa4\xfe\xe4\x0eK\xb2\xf6\x8a%', b'9\xedg\xa8\xd5\xb6\xbb\x9fJ\x8eAN\xd6\xaf\x8egE9]$\x83\xc2?:1>\x8c\x7fBdr\xdbD\x1aP\x90\x7f\x05\xd2\x8b\xe5\xf6\x13\xde@\xc5\xb7ZE\xbduD\x85\xb0\x0c\x16\xfe\xf1hJ\xb4\x80[y', b'\x0cV4W\xcch|\xbbT\xc2\xa8\x0bG\xc3\x9c\x049\xa9n\xb4\x08\xa4;\x8c\xdc~t\x18\x96\x9b\x07\xa0X6\x0e\xc9\xff\x99\x84\x86\xc8\xa8\x9f\xd4\xd09\xf3\x1fs\xf0\x10qi\xc7\x04\xe7\xaf\xfa\x9f\xbd`Z\xeet', b'm\xa7cq\xa4t\x1d\x10\x0f\x87\xa38\x9d\x1d\xca\xb7\x85`\xdei\xd5\x14\xa1\x87<\xc8sk\xf0\x88Q>=\xbd\xb2\x895`VY+\x06S|6!\xee\xb5\xe2\rrM\xfe\x10\xcd-q\x0b\xfbB\xa1\x98\x81\xeb', b'\xe6\xd5\xf0\xf8<%\xcaS\xaa\xb0\ts\xe1\x8e\xca>a\x0b\xcaY\x95?:\xa9w$>\xa7}\x08\xceJ\xed#N\xf1:#HH\xadc5S\xf6i\xa1=Q(\xfc\xd6\xe7\x9b\xdbt\xf2\\\xd4\x03\x11lS\x0f', b'\x88\xba\x1f\xe8\xf2"\x02\x08B\x8b\xbf\x80m\xcf\xbeWj\xcd\x91\xa2:\x1a\xb8\xd1\xa2\xeb\xe4\xa9Q"+\xb2\x1c\x91o\xdb\x81?\xf5\xaf\xd2\x0e\x06\xd4\xfe\xce\xb0\xf4\xde\x90\xd4\x0c\x8d\xd2f\xe2\xc2%7M\xe8\x9d\n\xbe', b'\x8c}[\xc5\xa9\x80\\\xf4#\xb1\xc8\x1e\xe1\xaco\xd2\xa8\xc0\xc0b\xdc\xd8\xceI\xe3\xfe\x1d\x9b\xc1^\x10jX\xe2\xf5\x0f6\xfc\r4\xbd-X\xd18\x9d\xc8\x9a:\xb2O\xcar\xf9\xd4\x0c\xaaYr\xcff\xa5K\xf7', b'\xab\x0e\x99\xdf\x00pZ+_\x99\xf3G\xe1l+\x04N"\xb5\xcbd\x18V]Q\x1d-fn_uh\x07mt\xba\x03\xf7G\xdbB\x13v\xcf\xd5\xe0\t;\xc1\xd9\x8bc\x8a\xc6\xd49o\xc4\xc1\x94W\xc1,4', b"1+e\xf0\x1b\xc1@\xc0\xc7\x96\xba\xd0]M]/'j\xd8$\xe9\xe2&\xbe\x9c\xccre\xc6B\x8c\xb5I(\xb7\xa5\x94\xbd\xa0\x80-`\x03\xad\x1e\x19@(5\xaa\x93\x0bgEn\x0c$\xa9f!\xd9\xed\xe8:", b'uP\xea\x12xL"a\xff\xd9\xea\xea\x87\xf8L\xd1\xad\x05A\xb7\x99nS\xc1?\x1b\xad&\x9f\x1b\x1f\xb2M\xef\xd0\xfeh\xa2+M\x12\xae1\xb7O4\xa3\x84\x16R\xacJK\x82\xeeV\xe3w\xb4#W\xd5(\xdf', b"\xe1\x00k\xba\x05-o\x1a\xde\x91\xf3\x17\xf8+\xe4\x84\xde,\xc6\x9d\xac6\x0b~\x05\x18\xb4P\xd8\xd77{-\x8fQ\x05o\xb08\x93\x93\x12\x97/\x00N\x99\x0f\x19\xce\xf5{\xccG{\xe3\xb0\x9d\x8c'\xda\x91]\xa1", b'l5~\xe7w\x86\xfb\xfd\r\xa1\xeb-\xb3\xe6Q\x85}pe\x9d\xb1Lc\xef\x08\\Z\xc8\xda\n\\3ZD\xd5\x92\xda\x8c\x0f\x03\xe0\x14\xf5H\xa7H\xd5Hphr\xf9&f\xeaw\x80\x13\xcf\xbc\xf9\xd2\x8d\x18', b'\x13>\x8f\xdf\xe4\x95\xeb\x14\n\xd6\x91\xfc\x85h\\v5\x7f%\xd0\x98\xd7#\xdbz\xe3\xef\x15+\xaf\xd0\x18\x1e\x080\x06B\x99;\x1c\x0c\x12-o8\xbf?iB\xfd\x03[\x14>\t:\xc9\x93\xa9\xd2\xadh\xdf\x01', b'_\xec*\xfd\xa4n\xfb*y\x0b\xdd\xd6\xc9@\xe6\x003\xb6\xee\x82+\x85\xbauD;\xa8$-\xa9^\x17"\x0e\x97`\xeb\xb4\xf5\x10\xc5~%\xf8lVq\x83)\x0e\xfa\xc4*5\xc0\xed\x98>\xd0\xbd\xdb\xf0\xe8=', b"\x0e\xa7\x0c\x1bN\xab_\xbf\x7f[SVR-\x0eDV\xdfA\xee.?\xdd\xab\xc7\n\xf9\x00\x9fc\xf3\xea\xb8\xca\t\xd8\xd2\xfa\x0f\x15\xe8\xben\xbe*c\x9f\x9f\xe0'\xaa\x08\x15\x94\xf5\xc7\xbd\xa7;\xf5\xb0\n3Y", b'\x18\xfe\xb83\xef\x1f\xb1\xa5\x14\x93\x949S\x18\xdd\xb9\xb5I\xd5\xf1Ji\x80\xcd\xf0d\x82\x8f\xda\x9e\xad\xbd\x81\xc7\xdf\x93z_8\xdb\x1e %\xfaiw5\x96m\x93\xad/cEK`\xf5\xb8v\x00\xb5\xb4\xa8\xa9', b'\x98\xcc\xf6\x15\x07\xd9\xa3\xb6\x15\xab+q\x98wl\xe3\x8e#G\xba\x06\xe8\xf1\xa0\xb7\xb6\xf1|\xe6\x93\x0fn8\xc0-\xd9\xcfU\xb7\xb5\x0e\xd1PT\xd0\xf8G\xdd\x8b\x7fR\x9e\xbfN\xff&\x00E>\x81 \xaa\xba\x8b', b'\xc3BXB\x8cO^\xaa%v\xe8\xc6\x95gg\xea\x8fC\x80\xe6\t\x97\x00\xf0K9*\xa7F6~\x10){\x8c\xc7\xe6C\xddr\xa5\xd0\xb6|h\xe3\xc7\xd26\x86\xca\xad!Cl\x9e!\xd5S\x9e\xa2Ym\xd4', b'\xba3\xc1\xd3\xac\xb2\x8b\xd8\x7f1\x0bm\x14M\x18U\xdd\x80\th\xf7\x03\xfe\xa3\xfb{\xcb\n\x80W\xd9\x19\xdd}\x96\x84\x14\x97$r!\x1f\xc0\x06\x15\x10i\x0c\x90.a\xbcn\x9c\xbe\xf4d\x1eC^\x9a\x04W\x88', b'\x12\xc0V\xe5\x12\x83\xa9g,\x17,Br\xb7\xdfH\x88r\x97\xf5\xb9?&r\xa0i\xef\x8f\x97\xb6\x04]?\x94pm\xedP\xf0\xb9\x0c0$\xe6\x18\x02\xf0c\x02\x01\x9e\x84SJ\xef\xe7\x178\x9e2\x0e\x90\xa8\x99', b'\x96\x8f\x17e\x15T\x9b\xa7CW-Y\x8el\xb9I\xbe\xae!\x8b\xd5\x18]\xefx\x8c\xecN\xad\x0eN\x9a\xdf\'\xe1p3\xdeI\xf8\xcd\xb2(\xdc\t"\xb2>\xad\xad.\xf4\xd3\x88\xe9\x93\xe0uCc[Xj%', b'\x90\xff\x07c\xb3\x1dZ*,\x10\x86\xd4\x84\x16\x06T! \xea\xac\xc5\xb0{\x84_#\xbaA\xc11E\x95\x99\x83G\x89\x92\xe7\xfc\x17#\xc7\x98\xf4\xf7\x07ZO?\xfd\x0e\x1aC3 \xae\xa0\xe7\x17\xad\rP8\xbb', b'\xf33\xab\xeb\x9f`\xb2\xb6\xbb\xad\xb7#Y\xb6\x91])M\xaf\x83\xac\x9cP\x02\xf7\x80\xfc\xdb!m\x04\xb4\x9c\x88\xd6\xdd\xf2\\\xea\xc8\x80\xe27\x96\xb2SN)\x07\x02a3`v\x94\x8d\xcb\x90\xd5\x1bb.y\xd4', b'\xf0\x9eF\x83_\x1ca\xaa\xd1\xa4\x1f\xa3G\xadB8CU\xa3 \xcc\x15\xe2\xcc\x06Yu\x831\x1a\x1ab\xe1\x93\x08\x1a\xd5\xaca\xc9\xd6X%\x93\xf20\xe4>o\x9a\x17\xc5QEjx\xf0\x18a!n\x01\xcc\x02', b'@s\x85\x91\xe9Uh\x00\x8b\xaf\x06\x00\xb37isArB3\xfd\xe7o+\xc7[\xe4\xb0\xb5\x92\xd3\x03\xd8\xe8\xaf\xb6\x92y\x10\xbe\x87\x1a~\x01\x13\x9c.*\x1d\xd5\x1e\xcdv\xec\xb1\xb8\xf1\x9a\xb3\x12o\xe5r\x88', b'X\x1b\xb0\xff\xb5\xc7\xe56\xf4\x19Y9\xe0t\x02\xab\xdc\xd2\x06x\x8bw\xca\xd0<\xbb\xdfUN\xe2>\xe5\xba$p\x08\xc7M\xc1\x80g\x8c\x8f\x18\t\xfc\xb46\xbb!\x16q\x95\x95Q\x8a\xcb^L\xff\xf7\xa5\xb4\xc3', b'Ym\xf9\x1f\x1a\x8c\xf8m\xff\xfe\xa6B\xdez\xc2\xf8h2\xaf\xe3S:_\x8b|a\xf1q\xfd\x81\x9e\xbb\xf1\xc7\x9fQ\xe7m\xa6p\xc0Yv\xb1?\xb1I5\xd2\xd6\xc0\xec[\xaeN\x01\x16\xe7O4i\xee\xb5\x01', b'pv\xaf\x0c\xaf\xec\xc8\x19\xf2\xe1\x9e\xfd\x02\xc6P\x87"\xa6\\\xcf\x1d\xc2U6\xa2\rFG\x99U1\xa0\x91\xf3\x0e\xc1`!o\x0e;tQ\x03\xcc\xe7\x86\xde5\xd8\x8a&K\x8d\x05\xc0\x96\xe1o^\x19\xa1c\x87', b"\x83\xfd\x9d\xa4\xe4\x91\\\x85n\xfcJK\x1c(\xc9\x165Y2\xd6\xa6.\xc0\xa1\x96\x13#:=\xd9\x96\xac\x93\xf2\xf3\xab\x01\x0fX<\x97\xe0p\xf83\x80,\xa57\x9f*|\x84p\xc8@\xe1\xb6*\x17'r\xeaR", b'9\xf6\xa9\x1aI\x7f\x88\x89,\x85\xdd\xa9`H\x8b\xfc\xe2\xc6\xe0A_&\xff3vT\xf5cl\xf3\x8cW\xef\xe8\x88\xdc\x89\x9f\x9f3\xc2w\xb4^\x9dL\xe8\xbe\x98\x0c\xee\xbe\xa3$ )\xa2\xdaq\xd0&\xef4\xce', b'\x97E\x83\xf74\x89\x03\x87_`\xf9\x9f\x0e\xb2\xbdl\xdb\x04Wq),\xf8\xda8P\x1d@2\x84\xe7nq\x1a]\xa3\xd3B\xad\xdb\xab\xb6\xac\x00\xb3#\x0f\xd4ed?\xf7\xe1\x02}\xe8\x9b&>\x91\xc8\n\xb2;', b'\xaa\x14\xfe\xd4\x07\xa9e\x9a\xe7\xac\x86i\x0b\xfeu\x12\x83\x1e\xce^E(t\xb5\x1d3\xcf/\x17\xb1H<\x10\x00\x82rF)\xe9`\xc5\x86\xfd\xc3\x0c\x9b\xf7\xac\xec\x908\xf2LR\x9aS\x870\t\xb2$\x9eQ\x0f', b'Wq\xb0\xb9\x14\xd5\x9e\xc0\xfd\xc3\xc0\xda\x8a\xe1\x154X\xd3\xa3\x02X\xac\xf1\xa4\x9eA\x0e\xeb\xd7{)\xbb?\x8ag\x02\x129I<\xe0Y\x91#\x0bK-e\xc8\x89\xf82\x08\x14\xe7\xc17L(\xbb?\x9a\xd9(', b't\x917\xe1\xdc\xac\x13o7\xef\xd2\xe1\x9cR8\x14|A\xd9\xdb\xa2=\xb5\x90\xd2!\x83\x8d\xc0\x08\x9e\x84\x90\x1a&\xa8Tg\xa9\x10\x00"\x8aO-\r\x80+\x84\xc6(\xa3Z\xdb(yw\xaaVr\x0c\x93\xbb\xc5', b"\x8a:\xe7\x11\xd76\x99\x9d,\x90{\xe1\x98\x80\xc6D\xff\xf5\x12'\xd9b\x9b6[\xc7\x82\r\xa9v\x03\x1b\xb6\x8a\x03\xe1d\x07\xda1:\xcd8<\x04\xdb\xe54KR\xb9\x13\x97\xe1\xbf\xac\x9c\xef\x94\xf94\xd1\xe3j", b'\x92\xf6j\xedz\x9d\x9f\xfcBc\xd8H\xa0\xf6)\x0bd\xca\x86\xbd\xe0\xa4\xdb\x17\x9c\x04\xce\x8a\xc06]\xf0\xb2\x87\xa8\xb0\x1a\xd7\xa1\xd1\xe8\xa4\x15\xc4k\x9d\x1a\x95\xf8\x1d\xa8{cS0\xee\x06=^\x9bo\x85A\xdc', b'`\x02\x87,\xd7\xea\xeb\xf8\x12\x9e\xbf\x07\xd5\xa3\xa6=\x99\x10\xabo\xf5O\xa4\xb2\rH\x01\xbdua4\x04?AU\xb8\xa5\x9c\xd7\xb4\x84\x10\x9e3\x9a\xab\xbd\xc0 \x9c>\xea\xf3\xff\xc7\x97\t\xae\x1a~}\n\xd6l', b'\x9f\xb9b\xd0\xff\x9a=\xd4\x9c\x01\x04\x0cX\xfd\n\x13#,\xad\xc3M2Z\x1c\xed\xd7\xd2\xce"\xacC8\xa5\xf5\r\xf8gT\xdf\x03\xdf\xddE\x8a\xfcLV\xedf\x99\xb6\x8e\xa7>\x16\x99\x8aE\xb6\xf0g8P\x87', b'\xc3\xa0\xd0B$\'\x13{\x10$+\xf2\xa3[\xc3H\xbf\xcf\xa7\x9fe\x8a\x1a"N\xa8\x7f\xdc\xbc\x0f\xe3q\x98\x8dO\x08.\xb0\xa1o\xfb\xc8\xe5\x8c\xb8\xc0\xb9S\x13N\x87\xd3\x8d\x06 \x0b\x8ei\xfc\xe0O\xa6\x07G', b"ov\xf3\x92\x10\x9e\xbd\x91\xa6zW\xe2\x12^(`<y\x9e\xca\xb7j'\x02]\r^\xb0\x0b\xb4\xb83p\x0c\xbe\xa8ty0&\x85#R\x0c\xb1L\xf3\xf5:b\x86\x83w\x93\xe5\xa9\xe34bk9s\xb1\xa2", b"%\xc7\x9f\x80\xfd\xb4\xceU0\xb8B*U>\xd9s\x13\x96;\x1d-\xe4\xdeb\xc1\xa2\xa2\xab\x8a\x01'\x1e$\x03\x8b+\x8a\xcbN\xf0\xb6\xa1\xe7\xc2\xd4\xfa\xdf\xe9\xfbY\x94\xb9\x8aAV)[_\x1f\xa5p\xa0h\xbf", b'v\x1dDx\xd1\x9bZi\x8d\xa1\xb7\x83\x80\xdd\x84\xaf\x8d\xde\xfe\xbd\x1d\xf4\xc7\xac\xd2\xaeq\x81~{@a$\x9f\x8a\x92\xd0\x19\xd8\xa0\xb6\xaa\x96S\xddmBT\x03\xe4\x98\xecU\xcdl\x9b\xf2\xf8\tr;\xf1*\x9d', b"\xa1\x97\x88\xc5\x15|\xf8`3\x1eL\x9d\x18\xf9\xd2\x1b[\x1f\xdb\x04\x12!\x9e(7\xfdbm\x81\xcd\x89f\t\xc8\xb6gR}\xd0?Hf\xb2\x18\x85`\x9a\xeb\xb6\x1a\xd3\x1aS-O\xf7'0\x95\xa0#4\x17\xf4", b'AG\xd8\xae\xae\xce&\xe7\xf5\xc20\xd6\xd2\xbd4\x16]\xbe\xaez\xbdX\x82}\x92U\xcb0\n_G\xc5/u\x06\x14\xb1`c\xd6`\xa6T\x88\x81\x15T\xd9\x11\xd8\xfc\x02n\xcd\xf2\xd8\xc8P\xae?]\xae\x86^', b'\t\x8c\xf7\xaa\x7f\xf5\xec\n\xf9\xc7\xb1\xb0\xcd\xe2\x9aL\xd6*\x10\xe0>\x86\x83T\x11\x06\xbb\xc0@\x98.,\xcd\xef\xe59,\x80@\xa3\x95\x86\xbe\xbb\xf8\xb6\xd1\xe6\x85\xacyp\n\xd2\x13\xe8G>\xc6B^\x19\x00X', b'\xfa)\x17\xc8oH\xa1\xef\xf3\x8a\xe3\xf9\x17\x12\x05\x93\xf5\x8e\x15\xc7W\xcf\xcb\x1d%:\x02\xccRk\xb8\xc0\xef\xfc\x83\xd7+\xdb\xe9\xe9(0\xe7=\x06\x0c\xc3\xce\xa4\x16\xef\xd9\x0fh=e+\x97.><R\x9c\x16', b"r\x1e\xda\xe0\xcc\xa2'\x05 8\x82\xaa\xc63<\x1a\xb3\xb9\xe3\xbd\x05\x85L\xde;%\xd0\xfcV\x11\x87\x13xD\x0f\xd1\x1c\x91X\xbcs7\xaa\x8e\xd6\xb8e\x84\x8b|)~#2\xe2\xcd\xd0\xd0\x88mJ\x8b\x96\xa4", b'\xd1\xcd\xa2\xcf\x8f\x88\xc9\x82\x8e\xb0\xa9\xa94\x03\x9a\xebP\xa7\x1f\xa7\xd5t4\x12\x00m u<\xf3r\xc1+(\x1b\x80\xd4\xa9\x91k\xe0\xf6\xb8BD6\r\xe3\xfc\xc5\xfe\x91f\x01\xb5=\xb3$\xca\x13\xfa\xba\x92\x87', b'\xfe\x12\x02\x15\x1b\xa2\xe2\xfe\xfa\x98\xc1\xf4\x98\xfe\xacm\x83\x1ed\x81\xcbE\xb5\xa2\xafc$\xb1U\xaa\xadb\x91.=\x02\xd1\xb4\xa9X\xbc\xf7\x9a\xbc\x04\xa4Pj\x86:\x17#K&\xd7\xb2M6`\xd1\xdb\x87\xe2\x92', b'FO*P\x06\xe89\x06z\x8c\x0b<\xae\x81>\xb4F\xad\x17\xa6>\xb35\x95qN\xa0\xe9*`o/.\xa3*\xc6\x0c\xe7)\xe6\xa7(\x9b\xe8\xf7\xce+\xc6\xa4\xbc\xa6\xc3\xd7\x0e\x05\x0f\'$\x97\x8b\xaax"\x83', b'\x9b\x0eV\xc5v.\xb3=ZL\xb3i\xa9\xe5\x83\xd6gq)\xe2\xd69\xac\x84\x86\xb9\xbe\x99\xd7\xf2\xaf\xf3#\xefC\x98\xdd\xe6TG1\xc1((M\xf5Yt\xc3\xa9\x16q\xab\xae\t<[l\x99\x08uO\xfe\xce', b'\xa5y\xe9\xee\xa8\xc5<8c\xf5!\xa8\xed\x18\x01\n\x96\x08X\xa5b\r\xa7]\xce[=o\xf3x\xb3J\xccuh\xc9\xbf\x9e\x93F\x07f\xe9\x1b\xdd6\xa0v\xe8\x80\xe5\xa6[\x16\x0b\xda\xdfl{;<\n_F'], [[b'Zs\xf1#V\xd7\x87\x1a\n\xa5Ja\x02\xcdE\x8bX\xaeL-\x9d\xfcj\x12\x1e\x88\xc9\xc0\xfa\n\x8c\xd6\xef\xde\xb3\x13\x0f\x9e>\xd3\x15J\n\xdd\xba\xe3\xb2&M\x98\x90\xc6n7\x9dXm\x03.n\xbb\xdc\xe7\xae', b':[\xc4\xfe\x1d\xe1\xce\xa3\xe2\xf94\xc8\xcc\xde\\\x8fUg\x89\xac\xa9\x0c8\xf8>YrY\x0c\x14\x01\x13\xdb\xbaB\x1bv9\x90\xac\x02qx\x18\xfb\xc6$`\x8aV\xfa\xf0\xfa\xe7\xf2\x13\x88\xb98\x03\x111\x8c\x95', b',\xf4\xf2\xd0`\xf8>}\xe9\xa8\x06\xfd\xda\x7f\xf4\xb8\xf9\xf0\xa1\xc2\x1c4\xaf\x80\x82\xf1F\xf8\xaa@\x94NG=!\xbeq\x8a\xa6@\x14\x18.2 \xb0L*\xde\x9e\xf9\x102\x88\\\xd5\x06\x83\x93\xe2\x80\x81\x15\xd2', b'M\xf0\x820\xeb\x1c\xeb4e\x14\xaeZ2\xae\xdc\xf1\xa2\xb6.l]\x1e\xe0+kxPN\xfdh\xac\xc7\x19[\x9c\x1b\x84\x02N\xf6\xe4\xd5\xb6\x98f\xe1@\x99"\x99C\xf7\x97\xf6\xdf\xf9p3\r\xaf~0l%', b"\xe5\x05@\x1c\xbd;\xc9l\xcd_.\x80\x16\xa9\x02L9\x91\xc5\xac\xd3'U-\xe5\xf5\xdf?\x80\xf2\x98\xbe\xc6\xf4\xc9%dg\xf6\xb0_\xce\nE\xd1\xfe\x9e[\xa0\xd1X\xea{C\xcc\xde^\xb09\xa5*4\xeff", b'\xa9\xa9\xe1?\xe0\xc9\x0c&\xea\x97\xbbZ\xc8J\x054\xa3@\xc6\xb8\xef\xc7%LGp\x92\n\xb5@\xea\x99\xea\xca\xfb)\xcaS\x996z\xeb\xde\xd6p[V\xc8\x11\xa8V\xa0\x88\x88\x16\x99\x9d5\xfav1g\xbb\xf5', b"CF`\x10k\x04\x93'\x00=\x15\xe5\x11\xb1\xc8\x0e\xdb.8\t\xb9a\xf9\xfc\x1c\x81\x01\x80>\x8e8+-\x02\xd5\xd0\xb8\xd2Q\xa3\x0b\x94\xb1\xf9q\xaa\x08)7bz=k\xfc$\xfb\xdc\x04\xec\xcaT\xef\x05\x9f", b'\xfbv\x0e\xa9\x87\x0f\x1f\xc2\x8a\x16\x0b\xcd\xc3\xb4J\x8e\xae|\xc0\xe4\xd1\xdb\xf0!R\xf5\xb6\xaa\xfc\xdc\xff\xdcr7\xdf\xe3\xdd\x1c\x90\xc9\xfa\xca\xea\xc0Y\xe7%@\xd5\x99\xc0\xa2\xa3\x01 \xf4\x83V^\x1a\x11\xab\x0e\x10', b'n\x04\xdaF\xec@\x00w\xc0RX\xc0\xa5\xda\xadH\xbbO\xa1\x84Y\xb6j\x0f\xaa\x1b\x8eu\xcd\xe7(Qc\xd7\xa4k\\\x9c\x92\xf2d\xebp\xc6\x1dT\xac\xd09C4\xf8\xd9?DW\x07En\xd5\x04w\x0e#', b"\xb6\xfa\xb8\xbb\xb9\xcc\x05\xeb\x15\xc1\xae~\xb0\xd9d\x1aI\xa1\xf7(\x85\xa2B+Bh\xc7\x8d\x84Y`\xc3\xa0'\xe1\x97\xab+\x9aQu\x08L\x8ex\x06W0\xda$\xff\xd9\xdb\xe1b\x8b\x15\xdb\x83\xb6G\xa5\xd65", b'\xca\xee\xfc\xb6\x0b\x16Q\xa3[\x02XIg\xd6d\x91c\x9eV<\x81`\xe2\x9c\x98\x14C\x1d"\xf4\xbdg^\xabg\xb1\x8a\xc0\xa2\x83\xba\x0c;\xd4z\x1bcO\x19\x81\xb4\x9f\x85h\x01\xbdr\x91;\xb3\x04\xd6\xb9\xc0', b'\x04\xf99;C#\x9f\xa2h\xa1\x9a\xf3\xc9oN\xb5\x18\xfa\xde\xcd\xc4u\xa2\xf9F\x02\xd5\xde=;\x01\xab\xc4\x1c\\\xfb\x8f\xe7\x19Y\xac<\x08|[u]\x8d\xdc\\s>\xb45Qia1p\xdb\x8e)\x97\xad', b'\xc1\xa0\x86\x83\xf7\t\x0bv\xd5\xa15\x81Nu`\x82\x08+\xdf<wA"o\xc2x\n\xbf\xc8\xdc\x83Z\x0c\xc5\x08\xed\xd2\xaazn>\xea\x9b\xac\xc9Z\x16\x05\xce\x92\xff)\xb8\xdd$\xc7\xc8\x8f\xb6\xa7\x0e\x05\x19(', b'Z\xc3%\xde5\x80\xe9^\xf3qO2\x082\xbeS\xa157\x9c\xac\xb4\x98\xbaeYq\xb3~\t\xc7@\xb0\xafh\x12\x90\xd0\x8c\x16\x91Y\r\r\x1bI\x93\xc6E\xde\x9b\xa5Mr\xacy\xab\xac\x19\xa2r\xdb\xf1e', b'\xc6\xb7\xcbH4vQa|O=\x176\xc4\xd1\xad6\x86\xf2\xfd\xb3\x83\xe0X\xcfM\xdcM\xfc\xb0\x9c\xbe!\xbf\xe9<\x00\xee\xf1_\xb84Z\xb1LO_\xe9\xe9\xb1D\xae85I&\xc3\x9a\xd2}\x801\xdaV', b'\xc8q\xae\n\xc7\x05\xca\x1c\x8e\x08\xac\x1e0?@Q\x95\x9b\x9e#\x8cb\x7f\xbd\x80\xca9\xb0^\x7f\xfa\xa1\x83\r\x13\x16\xeb\x92\xac\xb3\x84\x9f\xed\\\n\x0br\xa5U\x03\xcf:f\x89Vd\xde3\xa7\x9b\xd6\xab_V', b"\xe5\x12\xbb\xef\xc2R\\\xaaiJ\x04\xb8%d\x8dz\x8f\xb6\x9f\x83\x08{\x97F\xaf\x91\xd7\x07\xf3\x1cw-&\xed[Y\x80\xf2\xaa\x16\xe6\x98\xfaP\xe7\x1d\xd4'\x9e\x92W$\x15pR\xa9\xbd\xe0\xca\x82\xde$>\x1e", b'\xbd8[q\x08!\x9d#9-n\x8d\xc1\xc2\xe4g\xdc&\\\x01OW\xdb\x9cm9|\x0b\xa2\xb4\xfb&\xac\xe6-\xd7\xbe\xe1\xea\x1a\x98\xfb\xae\x0e\xdf\xfd }\xa9\xc6K\xeb\x06\t"\xc1\xfb\xeeS\xf5\xa5\xf0\x7f\r', b'\xbf3\xe6]\t\xedV#v\x17\xfew\xc8`\x1c\xba\x98\x88\xe6\xf2\xbdhO\xf1\x9a\x1f!w\xef\xfa\xe1,9R\x8e\xe6\x07L\xdf.,Yl\xcb/\xda|y\xfa\x99\xe2\xf4\xd3+"\xf2u\x98\x10\x95\xed\xc5bl', b'\xcd\xbd\xc3\x0eF\xd5\xd7\x04\xfb\xaa\x88\x7f\xbcG\'\n\xdf\x94NB\x99\xc2\x1b"Pv\xb3\x96h%R\x1b\x82\x07\xc30s\xcd4\x00\xb7\xafnV\xb7\xb9\xb7\x08\x14\xad\x15\x15L.\xb9n8lZ\x1e\x1av\x11\x86', b'\xc4\xfb{\xda\x13\x8d\x9b*\x10\xb0=\xdb\xee\x0f8\xaeW\x97\xc4\xa4\xc6P y=~\xc0T?02fsE\x1en#\xc2\x15\xeaJ=\x03\xdc#T\xa6\xb0v\xfej;j\xab\xdf\xf4\x93\x05\x07\x88\xba\x9b\xda:', b'Y\x1fT\xed\xa5\xdfO/\xd8x\\"\x85\xa6\xe6b\x03\xb7M\xa0]E\xcd\xe1\xc3\xd9\xc9{:\x9f\xd7\xe7v\xab\xcd\x1c\x7fq\x02\xcd\xf2,\xebX!\xb1G\xcb \x10\x1eg\xff\xb1\x18l\x92\xc2o\xb6/\x13\xcei', b'\xf8\xe8\xb80\xc7\xe0F\x02\x7f+\xf4\xb5|\x132/\x1bV\xa0\xf9K\xa3&d\xd1\xa6|\x0c\x96["X\x8b\x92\xf0a\xb7f+\x13o\xb0\xa5\x85\xf5\x80\xab3\x80\x03,\x00\xad}\x87\xd7\xe4\x13\xdcC./\x1b\xcc', b'$\x1f\xec\xc1\xdf\xd3z\x85\x08\xfb\x16\xd4\xc3@\x0f@\xda\xb2\x95\xc7\x82\xfe\x9eZ\x97\xce\x8b*\x1f\xfe5\xb6\\\x12\xcf\xbc1\x1f.\x1f\xb5\x16\x02\x8a\xda\x1f\xf8\xc2.P+\x87t\xe2+\x01.%\xabA\xf0\x9e\xc9#', b'\xd0\x16\x84\xf6\xf6\xce\xa1\x8cn\xee\xdf\x11y"\xcf\xc2\xb1t\x10\x0cW7\xee\xe7\x1c.x\xeb\xba\xf40d@kfMVf!\x96y\xdd\xff\xa4\xf7\xe15\xb5b[\x1b\x02\xd8\xe85\x19\xe8.\xdbY\x95\xc6\xf2\x0f', b'V\xa2\x94\xc6t<4\xedw\x1c\xe1)\x94\xf3\xab\xde!\xb9f\x92L\x9c9@<5\x93\xc9\xa6\xb6l\xad\xcb\xffe\x9c\xa7\xc8\xf4\xc9A\x12\xd1W\x10\x92\xdd\x04}O.k\x8b\x96\xa3\x00b\xc3\x03]\xa2S\x15\x1c', b's1M\x88n#\xed\xba\x82\xa6\x84^\xb6nJ\xd5\xaa\x81V\xc1\xac\xe0&\x9a\x9b\xd0\xfb\x9d\xba\xff\x88\xdc\x9d\xb7\xef\xc9\xa1\x0f\xd0\x15D0\xfa\x1e\xd7\xe3f\xc5\xf9\xa1\x0b\x84\x82\xbd\xd8"\xda\xd6\x8b%\xedY\xa8\x0f', b'\x8d\xab-\x1cs\x98\x9d\xe1\xbeS\t`\x8ap\xdb\x1a-\x16\xe8\x06\xff\t\x10\x0e\xcc\xdf\xfe\xb2\xec\xe1\x8f\x80\xa4c\x83eKF\x94\tG\x02\xcf\xf7\xf6\xc2g\x8b{\xcb\xc9$\x97\xff\xc3\xdfHBe\xcd\x80|\x0ba', b'\x86=\x15\x15\xc8\x1e2\\\xc7"\xc47\xa6\xd4\x0f\x80%\x1d\xc9\t\xaa3\xe1)\xe2\xf6\x03\x1b\xe8\xe9\x1f@H(x\x12t\x8cO7\x03\xd7c\xe1M\xe8\xa1\xc2H\xe3t\xb1\x95|\xf6%\xaa\xd2\xf3\x82\x0e\xcd\x8bj', b'%\xa4|\xe6\xee\x9e\xbfN\x81\x96\x8e\xd4R\xc3#\xee&\x96\xee\tb\xcb.\xef\xaf*\x82\x006*\x8c\x9c\x07{A2\xfc\x1f\x11]\xdf\xe2\xcb\xb5,>FQI\xc4\x90J\x85-\xf0\xa7A\xf4_g\xd0j\x9bd', b'\xfc\x92\x85n\x1e\x04\xac\xb5\xd4o\xb7O\xce\x8d\xe6\xf8\x89\xca\xc1`N\xd8\xdb\xbd\xcc\x8e;G\xbf\x8d\xd0\x80\x850\xb5\xecw\xc0\xc5\x86\xe2\xe5\xada\xbe\xe6\x83Ep,V\x08\x16k\xf2\xb8v+\xdf5g\xe7\xcc/', b';%F\xdb3\xa3\xa7\xf5\x08w\xd1\xda\xb1\x89*\x8b2\xaba\x87D\x98\x805#\x86\xb7Z\xc3\x9d\x81|(/]\x1b@\xf3?\x04\x18\x0e*\xb2p\xce\x85_;\x84JC\xee,d\xd5p\xc1o\x8fsW9]', b'7\x7f\x1a-\xae\xfe"\xd3\xeen\r\xe8N\r\xc98%\xd9{\x1ag)Q\xb4Tj$\x05.\x1c\xb1k\xc9@f\xab\xef\x94\x7f\xa6J\x11\x9e\xab\xd6\x8f^/\x86\xb7.M\xed\x92\xe9\x0cx\xd9\xec\x1e\xfdS\xcf3', b'\x96\x16X#\x17\xa97A\xb5sa\xe6!\xff\xed\xdf\x052\xf0"\xa9\xf0\xdfBJ\x93}\xc7x\xaa\x9eF\xc1\x11jv\xe6\xf8S}\xce\tF<D\x1dnK\xd1J\xd8\xf2Ix\xd4:\x1d\xaajU\xb11[\xc9', b'\xd3\x80\x81\xfeig\xd4f\xf7\xae\x8b\xae\x86\x02\xed\xbe\x93\xf572\x0boj\x81)\xc6J\xbe\xca\xc1\xa9\xab\xb9\x99\xaf\ty]\xedfk\xd8b\xa8Y\xc7\xd8@Jz9\xd1\xc6<\xa9\xf3=\x9f\xeeB.m\xdc\x91', b'\xef,\x87\xc7\xc2\xdfA\xf2\xd7\xeec%6\t\xb9\xed\xe2\xa2\t\x12bX\x04\r"0Tv\xf1\xef\xcf\xe9]*\xf4\x19\xbb`h\xc8\x83w\x1e\xff\xd1{\x7f\xa8\xbf\xe5\xc1Rh?j\xf6\xbb\x9e\x14n\xdf\xaa2c', b'l\xdf\x872\xee\x0e\xab\xc5\xa7a\x9f\x85\x08dB\x10\xfa5\xfa\xc3\x89\xf7n\x07\x80\xbbq\xde\xe3\x98\xfb|/\xc1\x0b\xfd\xde\x1eM\x1d\xb1\xd4\xd0\xbe\x054\x1fZ\x80Y4{U\x1d\x86/\xed_\xed\x0c\xea\x87\x13\xcd', b'95\xe5\x82\x04[3\x9e\xce\xa5j\xf0\x14K\xfb2\x18\x05#L\xacB\xaa\x18+\xd7^\x845\xee\xfd\xd3<\xd3\x01O\xc0O\xc3\xb1\x97t\xb2\x12%\x98\x19c\x1e\xa47\r\x98\xf8}\x06HQ\x0e.\xe2\xe5"\xc5', b'X\x15\xa1\xf3\xda\x1aF\xd8\xa5\xf3[\x96\xe2\xb3\xa5\xca\xa2H\x8f\xf1ln5Sb\x16LVn\x13\xf5\\\xc7*\x92\xb7]\xa9\x0e\xa8\x9d4\x152\xfd\x17\xc0\xde\x14\xba/\xcb\x1e\xc5r8\xe2\xa0\xf7\x80\x14\xed\xa3\xb9', b'\x02\xaf\xc2[\xb2\x89J\xa0\xeec\x02\xed\x14\xaa\xee\xfd\xc0Q4-)g\xc3t\xd4\x85\xed\xa9\xf7G\xa5\x81\xad\x03\xb4 \x89\x16h\x8d\x1cW.\xa8\x16\xf6\xed\x93\xce8\xb9\xc8;\x126\x93#~\xb4\xcb\x99!\xba\x19', b'\xde\x8d\xb3z\xf5h\xe7f\\\xc3\x7f\xf3d7\x9aga\xdc\xa7\r$\xcc8\xef\x86K\xb6\xcc\x9a{\xec\x19<8f\xed\xb7t*<v\xdb+\x9f\xa1]d\xdc\xb1o*\x18r\xc0\xd6\xb7@\x103\x1d\xba\xfe\xaf\xba', b"\xc5\x97D\xaap\x9f\xe3^u\xe4\xf0U\xa5\x19L2\xf0\xcdT\xaa\x97TYE\x00\x8c\xb0-\tZ\x14z\xa22;\x81BR3\xee\x1c\x97\xdb\xee\x99\xe9\xb6\xb3^\xc5\xdb=\x9aM\xde\xed'\xc9W\xfc\r#\x06\x12", b'\xf3\xbc\xdd\xc4vm\xc0`\x99\xfa\x7f\xca\xdb\x80\xb0\xb7\x10\x91\x14\xf8\xa9Jp\xc9\xe8\xaa\x06\xd1\x0b.+;\x88\x06\x8e\xe3x\x97\xed-\x0e\xd06\xa9N\xf2\x9e\xcb\xbf\xe88\xb8\x93|\xe7\x8f\x1a\xf8\x89\xf0\xe7_=2', b'K\x87\xfb<\xa5Z\xdd\x15WF\x9f\x8c\x88y\x12\xa5r\xcd\xe3`\x9a\xe2=\x03\xd0\xcf7\xach\xefx$\x0e`\x17\x06t\xa5<\x19t\xfeq\x95;\x0e\n,D\xd8\xa6\x05;\xd8\x0en\xcavK6`\xd5\x10\xde', b'\x13\x88R=C\x1a\x84bZB\x00\xb9\xa2\xd1\xe2\xa5\xa6\x0c\xbf\x14\x9d*B\xc2:\xdbN\x97\r\xed\x8b\x9e\x19\xfbp\xa9\x9a\x83\xab|\xb2u2\xbd\xd6\x96\xa3w;o~\xe9\xc8X\xb9\xaf\xb54\x91\xcc\xad\x7f#$', b'\x19>\xae\xe4OE\x02\xdaI~\xa0\x08\xddF\xd6`R\xdd\x07U\xebw\x0f\xdc\xf1r\xa3\xff\x16k\x1fRMM\xae\x03 \x02\xf9\xb41\x97\xff|\r\x84&\x11\x9e\x12&\x07\xb1\x1c\x9e\xeeR*.\x84\xc2@\x03H', b'\xc2\x04W\x0c@t4\xa3\xdb\xe5\xef@\xb1F\xef\x08\x12\x90\xb9\xa9K\xf6\x0f\xd0d\xabNA?\xd0\x03\x1aN\xb7\xcf|\x80\x8fRn\xa6\xf6HWm\xe4&\x13Tn\xd0\xdb\x8e$}""x\x85\xbb\xfeM&\xef', b'bahd\xd6\x13$\x8b9o`\x8aj\xf5Af\xd6 \xab\x12b\xee\xdegV\x01s$\xa3]\xaf\x8fx[\xb15\xc8\xef\xb0I\xa7\x9bP\x86\x9d\xa6\xc8E`e\xe59\xa3\xff\t\r\x94*{s\xf7]\x0c\x0e', b'!\xd4\\\x9c`\x19\x84|\xec\xe8\xdaN\xc6\x0cjZ\xed\x03~4>y_<!|\xf1:\xd2\x1c?4N\xd273\xf5\xc1\xd2\x0f\xa0\xb78^\xd7\x1b\xcfo%\xb2c\xfc \x9d\\\xa0\x06.4JG\xa4`\xc9', b'tj\x0cv\x97y\x945\xab\x1bf\xd9 pi\xed\x93\x99\x14n\xd2\xcf\xfeX\xb0)+\x8cJ\xd1\xff>\x02\x00\x15\xf7E\xbc\x9c\x90cg\xf6\xaf|\t\xe1\xdd\x11\xf7\x92\xfeM\xf4\xa8m\x06\x8eP\x88\xb8\xf6-a', b'\xa2\xce\x9a\xec\x9c\xba\xc4\x15v\x87Q\xe3B\x84\x87x\x9d\xce\xfaj1\xba\xf07.\xde\xf2,W\xaa\xa5\xd2\x9e`\xca\xea\x9a\xc0\x0f\xe3zK\xe2h\xd0(\x0b\xc5\x1e6\xf7\xcd\xbd5\x10\xcf\xf9\xf2\x9b\xe9\xaa\xa7\xcf\xe0', b'>\xb5\x91\xf4\x9a\xbc\xbc\xfe_\xec\xcfD\xbb\xcc9\x12\xc2\xe6\xfb\xfaJJ/\x1e\x9e\xbe9\xc4\xcee\x92^u\xf8+\xd9g\xfaq\x07\x99\xe3B\xc1\xb4jd\x07\x98\xa7\x8d\\.\xf4z8\x0b4\x90\x84\x1a\x8e\x7f\xdf', b"\xa9g9M\xd5\xf4w\xd3o\x03\xe9R\x91\xd78\xbc\xb8\x81\xb9\xab\tI\xb5\x8d?\xc0\xca\xab\xa98x\x06\xa8\xde\xc4P\xd5o\x06\xe6('M;\xba\x99\x80\x1e=\x1e\x8e\xd1\xd9\xa9\x16l\xc3\x15\xa9\xe2\xee0\x90\x82", b'\x8f\x17\x12d\xbf\xbc\x0b8\x0fN\xa4\x1e$\xe5\\\x935i7q\xdb\xc6L\xbd\x9c\xd0\xde\x88\x06t`\xcb@I]\xad\x8e\xe9\xf0\x81\x0f\xbd\xa9\x1b\x8d}\xbc|c*9\x081\x00\x8f\xc5\xbe\x97Z\x11\x15V\xbe\x03', b'\xe8\xa6C\x04\xdcs\xf2\xa0\xa8\x9c\xd9p\xc3\xeb\x99\xc6F\xc66\x19\x7f%P\xfe5\xff\x05\xcd\x0c\xa2;\xcd^8\xcc\x1f{6\xee\x0b?Fy\xdc_\xcd\xfecr\x10\x08\xdf\xd8l@h\x18\xed\xbd\xdec\xf6\x02m', b'\xa1\xaa\x14\x10\xba\x8dY\xe0!z\x1ck\xcd\x03\xf3@\x1c\x1fy$w8$Ur\xaf\xf8\xbe\xfc\xbc\x9e\x10\xddi\x1b\xe2\xbd`n\xb7.0\r\xfcr\x82\xda`\xe1\xd4\xe9\xc4\xe9&:K\xe1\x16\xb0=|\xe1{-', b'\xde\x1a]\xa9\xaeU\x98\x1e\xd9}\x9f\x8b\xd6!\x1d\xcf\x00{S\t\xdd"\x99\xbf\x9408h\xe6\xca\xa2\x0b\xeb\xba\xe9\xe1\x9c\x91\xab\x99\xaaHZ\xd8f\xad>/\xba.\xbc\x9e7\x04\xd6\xe9\xaej\xdbNJ\x90\xa4\x92', b'"\xf2\xe7\x8f8\x9ew\x066>\xefq\xd1\xc0,9\t\xe9\x08\x8aX\xe1gv\x94\x89\xf5/\x00#\xf6\xbfd\xe1\x92Jy%\xbc\x7f:\x96g\xb2V\xb9h\x15m\xbe\x96\xbcmy\xe2\x0eab\xc7\x91\x91\xc4P\x85', b'\xe4\xe8\x94\xdb\xbb\xa0\xf2\xf6\rg{\x99Q\x17$\x14$\x93"\x87\x84\x95[\xb1\x0b*=AG)l\x12\xc1\x92\xc4\x8eF\xa9\xc6\xa2y-\x04]<\xd9\x0em\xd7km\x81\xa2_\x00\x08O\xe3\xb2\x8e\x0f\xfb\xcaQ', b'\x01\xc25"y~`\xb0#s\xb7\xa9\x8d\x1c|\x7f2\xa2~\xa5\x0eL\x830\x94*\xe8\xab(c\x9d.\x9d" \x87$\x80\xd1\x05\xb8D^N\x84\r\xee3\xe1z%u\xd0%\xc7\x84\x82\xa7\x9fy\xa8\x83\xc1+', b'>\x9b\xee5\xe5\x05%\x91\x81\xd9\x8cH\xccj\xca[\xb3\xb9Pg\xaeC\x15?\xe6\xb2\xb5&[\x92\x1a\x96#\xcf\xee\x90}I\x98\x11\x172\x83\x02o\x89\xde\xe08\xe2y\x80\x8c[\xeeG\x98-\x1dV\xe0\x0f$\xb0', b'\x16\xd2<\x8b\t{\x06\x85\xf3h\xb9\xc2\xb0\xe8]\x045(f\x1e\xc5\x12q\xbaT\x01u\xa6n\xe5\xbd\\\xe5\x08\x061\x03\xb4 \xc8\x80\xd2\xea{\x04\x01\x82\xcfN\x05;>1\xdeJn\xed\xdcB\x92>8<\xa8', b'\x8d\x92Ic0"!\xd9\x8a\x8b\x9d\x15\x9c\x1d\x99\xc9\r\xbb\xbdlH,v[\x19>>\x82%#ST\rNT\xd2|G\xa2\x04\xb8qEm\xb0~\x1a\xa8l\xf3\xaa\xf0S)2\xb2b\xefG\xa3\x04\xa2C!', b'\x05_\xa0\xcf\xe4#%\x123T\xd0\xceTK\xe7R\xf8v1\xec\xf0\x80\xb4\xbcT\x06F\xe8[\x18\x13Y@6h\xe3\x05\x0e\xbe\xa4k\xa5\xb8\x9c\x1fUG\xc2u\xee\x95\xa8\xad\x18S)\xa4\x8d\r\xbcz\xe5\xfb\xd8'], [b'na((Oj\xa7y\xa5_\x93\xd3e\x8b\xea\xe2h\xa1\xca\x1f\x0b\xf7Z\x943J\x1f\x82\x11\x94\xbb/', b'\xfd\xc2\xc1\x9e\xd3\x15\xfd\\\xce\x1b\xd9CO\xe1\xd7\x97A8\xa4\xc8\r \xe2D\x88\x083Q\xa1\x9d\xe9\xb1', b"#\x9b\xc6&\x85\xfd\x98\x9eR\x99\x82N\t\xf9\x87w\x07w3'9\xc9\xc9\x1a*\xd9z'?\x03\x02\x81", b'\xb6`\x08*\x9cM\xba\xb0{^\x18\xd6\x99\x9c\xb7\xf3\xbdhaf\xf4\xab\x81,\x1c\xd0\x085\x85\x90i\x19', b'\xe5 \x92*\xc4\xa6\xe8\xf4\xb2[a4~\xec\x1c\xd0p$\xd7\xb9L\xbb\xba\xc4\x1e\xf5\xcfZ\xee\xf4\xf7\xea', b"\xdb\x8ag\xafG\x05\xdb\xd1\xf8;\x89\x86\x88k\xce\\'?\xb5\x92\x0e\t\xc1\x9c\xdc\x0c*\xda\xe2\xcaj\x97", b'5Y\xe9\xf9\x95\xac\t\x83E\x0e\xdf\xba\xc0g\x1cU\xaa7\x82\x91TZ\xee$\xf7n\xbd\xcb\x84\xb5\xd3\xda', b'\x0f*\xd9\xbc\x1ez\x16\xe2T\x07}|\xb1\xf6o\xcd\xe9\x16\x99\xea\x0e>\xc8o\xf8\xb4j\xf3\x9fo\xfb9', b'0\xb0?\x0fv\x1f\x17\x9d\xc3\xcb\xc6>\xb0^\xde\x02\xea\xa7\xcfL\x95\x06Y\x8a\x01\xd1\x1f\xb1Bcb\x8c', b'\xd3\x16=\xed\x07\x1d\x90\xd4Od&\xb8r[\xc3\x08_\x04\x0e\xd8\xb3e\x80\xb1j\xc6j\x1a\xe5\x85\xfaa', b'K\xc0\x0e^\x1e\x82\x87uc\x80&\xcbF\xa0\x00TB+\xdf\x7f\xcet\x0c1\x1f\xb1\xcd\x14z\x93Ql', b'\xa8\x97W\xefVh\xb8\x0bL\xc0\xfc\xc8A\x9a.A\xa1\x00\xbe\x042Y\xc4\xb5F\x9aVV\x9cn>\xbf', b"\xaa\r\t\x04B9\x08\xdec\x05\x05\xaa\xa1\x1c\xbf\xc6\x7f\xd44\xda!=\x9d\xf1\xd3\xa1'\xdd/\xc0\x845", b'\x9d5kq})\x12,\xa4\xfd\x0b\x05\xfek\xefOF\x19\x8a\xbf\xdb\x03\xd5\xfc\xdbD\xc4\xbc\xb8\xe3s2', b'\x18\xe3"\x1a4\xb0\'EU+f$4\x0c\xa63]\xc7%\x14=J\x8f\xf2\xfe\xa0\x9e;H-\xb4\x11', b'\x94\xa4\xb7?\xec\x81gi\xdc\xed%%d\xa0?\xae`T?X\xe5\x917\xa7VF\xe4WE\x1e\x03\x06', b'\xbf \x92\xaf\x82\xed\x8d\xbft\x97\'"\x0c\xa3\xb1+\x13&\xa8\xb1\x8c\xdfWon8@\x8b\xf8\xf6\x01Z', b'e\xc3~\xd8\x7f\x1c2\xb6\xfe\x1a+\xee\x98\x97\xca\xd3V=jx\xc0r\xfe}\xad\x82,(Y\xbc\xac\xc5', b'\xa2\xaf\xf6\xce\x06D;\xaa\xb2\xf8(\x8a\xf8\xf5]\r\xf1z\xb8R+T\xcb.\xdd\x95\x00\x8ci\xc8\x81\xde', b'\xa2\xc4e\xf6\xa35\x913n8\x1d\xab\x86\xe0;"\x14\x11\x8d\xce\x86Jf\xc7\xc4\x05\x11\x91\x8e\x9a\x1e\xf7', b'\x0c\x90\x10\xb1\xd2\x98\x86f{\xde\xd3Qp\xe0\xad\xbc\xbe\xd0\x1ftA\xd1\x88\x83h\xb5\x90VX;\xcch', b'\x8d\xdf\x99\x9e\xa6\xf0\xae\x80\xbc\x06\x9cB"\x8e5\xc1\x19\xa8\x17Z\xf7~\xec\xab\x80\n\xdc\x16\xc4\x17\x93e', b'\xfd\x17\xa2\x03\xc7\xd03\xbb\xb2$\x9f\xc3oa=}\x90pOp\xae6\xa7\xafS\x00]\xca\xaeE~\x8e', b'\x91\xa7+\x06i\xc2\xb1^\xaf\xae\xf8\x9e\xcc\xc2Z5Ln\xc17f\r\xa7\xa6\x18\x8c\xbf\xc8\xbc\x83\xaeG', b'w\x11\xa9\x81\xf6\xf0\xc6?_\xa7\x0b\x8bV\x02\xfc\x83\xa6\xfc\xb2\x8a\xa3?l{\xd9cQ#\x0c\xf1\x9fx', b'?\xe9\xd8L\x82\xa3\xdc\x9a\xb2\xaf\x9c?b\x0b\x170\xc0\xb7X\x0f\\\x8dBT,\x1cu\x02\x14\xe3Mw', b'S\x95\xec\xf1\x7f\xfe._\xf3Z\x1c\xb8)T\xff`\x99FF\xb3\xc9\x7f\x14\xc0\x83\xcb\x9c\xbe\xc0e\x17\x8d', b'\xa92C+\xea\xec\x1a\x12t\xc4H\xd8\xc6\xfe\x10\x0e(\xa1\x15\xb7\x0e\xaa\x9e5\xfa\xc9iI\xb1m\xba)', b'PJ\xd0\x19\x7fla\xce\xa9A\xbd\xc7P\t\xeb\xbf\xa7\x81\xa9\xb1\xf5\x1e\xe2\x9f\x90\xf1w\r\x86\x04\xe0\xaf', b'\xb6\xf9LD\xc1\xf9\x02\x01\xe5\xb2\x84\n\xf1Ts\x06\xf6\x94\xa0I\xe4\xc9o\xbf\x87\xf3z\xa7\x17\x85\x06\xca', b'\xad\xde\xd3\x83T\xf4Y1\x8er\x02\x9c\xc0qb\x01\xa5\xa2\xce\xa7J %\x9d\x0bO\xce\xbfM\xe0;\xa8', b'\x0b\x90J\x80*\xfd\xa6\x0eDB\xbc\xcd\x89\x18S\x07\xee5"\xa7 1\xc7\x85?Fg+\xad\xe3\x00r', b'\xe8\xc5\x01k\x8a\x10\x91w\xb9\x03@yh\x04\xf5\xf4\xcb\x07d\xb0%\xf3\xe4\xcc\xb1\x11 \xb9\xe5\xed\xca\xf9', b'\xa6\x0c\xb6GIE:\xc6\xbc\x13\xact\xe88\xdc\xd0!\xd5s{\x16\xf1>\x91\x94\x9f\xbf\xd9%\xfbGY', b'\xf8\x82\x8fhw\xbce\xba!\x15\x81o\x9d$\x17v\x8b{kU`.\x13\xb8\x8f\x1b\x05Q\x97\xc2c\xb8', b'\xf47\xba"\\.\xa5^\xc5\xc9t\x88\xd0\xa9q)\xfd"\x132y0\x04\xbb\xfb\xbc\xe5z\xe7\x07\xcb0', b'(R\xc2\xc1U\xac\x06\xac@+\n\x14\x8auC\x92\xe9\x1dN,\x1c\x96>\xa5\xe0\x82\xc1V\xe5,\xd5\xd1', b'\x15B-\xb7\xd5i\xb4\xd8\x9f\xe4 sQ\xb7\xd4/JfQ\xc2\xa53\x07\xdb> OrX"\xbb\x86', b'E\xc0\x98\xfd\xe1\xb7\x10\x12\xbc\xea\x08\xee,\x97f\xe4\xbb;\x8e\x89&\xe8o\xff\xbc\xa5\x0co\xc7\xac\xc2P', b"\x17\xe9Hmx\xf5sO\xcc\x81\x02\x0f\x93n\xfd[0F\x86'@\xf6\xa6\xf6\x95\n\x1f\x05Z\x07\xf3i", b'\x11\xe5<\x0e\x8d\xfb\xd0"\xbdt|\x07\xd9\xca\xbbU,\xfc\xf7\\Y\\\x9d*V\xd9\x1d&\x08\x8f\x83B', b'\xc6\x82\\,\xb6\xe6\xe5FnV\x02\xbar\x02mFF\xa1%\x1eC;\x9f\x15\x89\x0f!\xbf{S\xdam', b'\xfa\x12rU\x94\xc5\xdb9YrO\x95~\xceo\xc2\xc3@\t}\xce"J\x91"\x1cO\\S5K\xbb', b'\xb8\x01c^]\xf9R\xeaQ\x9a\xae\x0c\xd5\xabu)\xd4\xa3OvN\xd0\x04\xa4^%<\x1b\xf4)V\xe0', b'~wr\x06\x8byI\xbeA\x0b\x13\x16\xb0]\x8e\xf6\x8a.\xed\xf8,)\x9f\xcc\xdaV\x9bq\xe8\n\x08\xda', b'v\x90B\xc2S_##\xfb\xd5\xdf\x08\xe8\xc8\xfc\xbd\\[\xbb:\xb5\xc9r\x0cJ\xe4\x91:\\\xe1\xe7=', b'\x85\xdac*\xaf\xf2\xd8\x7f-\xd4f2\xca\x95\xb7&\x0c\xba\xbdt\xe0\x96?\x9f\xec\xb0\xa1\xac\xbf\xdf\x18i', b'uj\x06S\xabB\xf5\xc6\x96\xa7J@\xe4\xf3i\xa46y\x1f\xf3&e\xc9t\x96\xbdu\x1b\xeb>N\x16', b'3x\xd3\x17\x7f\xed\xcf\xad:K|!\x99\xb9b\tf\xb7\x00\xe3\x1e9`\x95K\x84\x8b\xb1\r\xfe^\xec', b'\x80^\xd7f\xa2&\xf6m\xec\xf4t\xe0\x82.\xcc\xcb\x01\xfdR9FS\xce\xac\xb4p\xd9\xc8z\xd0cd', b'T\x7f\x08\x0c\x9a\xb4\x9c\xa3Z\xa4=\xa1\x88s\x05\xdfJ:\xc8\xc7\xa0\xa0\x87=\xc0[BG]\x17W\xb5', b'w6\x86I`\x01\x8bX\xb5\xb6N\x9b&\xf8\xbf1\xb9\xac\x88eS\xcaf\xc5\xc3\xf0\xca\x83\x93,kE', b'\x16\xa317Z)\xc8\x9a\xcb\xa8^\xd5\n\x08i\x10\xdc\x9b\xec\xfe\xbaB\xcf \x7f\x11l\xba\x14\xf1\xefn', b'\x12\xa3\xa4\x8e\xd8`\xf3\xf6\x1c\xb4\x9c\x92\x88F\xf8a\xd0\xb8\x1d\x17\xdf\x016\xa8\x1fo\x04i\x00\xd0;\x7f', b'\x93\xf6\xaa"\xa3\xc3\x98\x18\xb5\x1e8^T}DI\xdc1Q\xe7\xe1\xff\xd3\x9f\x88\xedp@S\xed\x17>', b'\xc5\xe0\xa8Y\xbcJ<\xd7\xbcn7B\xbd\x97\x90ZMe\xfbhx\xd9d\x8f\xab-\x80E\x16-\x11\xcf', b"|\xa5<.\xca\x01\xd0\xf9\xd3\xba'\x0f\x92\x91qK\xdf\xb9\xa3c\xc9\xb6\x0b\xccY;\xa7\xe7\x88\x9a\xdd}", b'5\xebU\xc8\xdbW\x9a\xf9(3\xf9\x88k\xc3\xeb1_\xd0T\xcf\xdd2\xc8e!\x992\xcf\xf3\x82\x96\xa8', b"+\x7f\x9b\x91\xcd\x98~?J\xec'\x02\x97\xccw\x0c\xd1\x93\xfa89\x9d%h\xd7\x19\xf6\x1f\xfb\xb0\x8b\x1f", b'XC\xd3\xce\xea6\xda+\xb6\x02\xce\xd7\xfd_f\xce\x8e\x88\xeae\x82\xe1\xbf =V\xa0\xde\n\x8a\xb3+', b'!*\xd9\xd7\x8d\xdfX\x19\xf8\\\xe2z\xef\xdc]_\xb6\xc5\x89W\xca\xb5\tf(\xfbR\xe7\xe6\xbb\x1a\xe7', b".\x86i\xb4\x18\x8e^$\x1c\xdc\xf7=-\xc7R\xe0\xa88\x11\x8c\x9c~\xa5\xd3'\xb4\xa9D?:\x9c8", b'-\x12`\x93\x81\xb7\xc7TP;o\x02_aO;\xbc\x83\xf28\x0f\xaa\x07bE\x1f\x1e3[\xa5X\xe6', b'\xcf>\xa0\xc5\x02\xd3l\xd9\x82y\xc2\xa7\xe9\xf6\x8dQ(;c\x9f0\x9f\x99\xf5\x0e\xcd\xe5;#w\xe6\x1d'], b"\xed\x91\xae9^y\x80\xc3T\x98'\xaf$\xd4\x14\x18\x9c\x80m\xf3\x13slu\xa9>7\x82$\xafc\xe6"]], [[b"hl!>\xe4`\x1f}\x11}\xd0\x04\xe36G3z\xdf\xf3d\x85ER\x87\rD\xdc\xdd\x97\xa7u\xb6j\xca\xfc\xb2\xe6\xda\xd8\x18\xe00v%\xae\xa4\x16u\\\xfa\xf9N\xacI'\xb0\xe11\xd8\x7f\xf3\x90tk", b'y[\xc1~\xd4\xad\xb5\xbc\xbd\xfd\xd9\x8e\x83\xda^\x85\xdc5\x1fqN\xa5\x98a\xcd\x18;"\xf1u\x9b\x9e\x1e\xb9a\xe8B\x90\xce\x96\x94M\x16\\xc\x01i\xb8M\x17KLs\x0b\x0c\x80OI\x86\x98\xeb\xda\xce', b'\xd8Yq(`\xa5u(\xb0\xca\x1f\x8b\xfb\xcc\xf7\x17\xa7Fi\x02\x98@\x19bS\xff3Z\\n\x16\xe5\xa3\x97\x13\xef\xa7\xe0\x13l\xa6`\x8f\xd5\xf2\x12M,\x13\x99eFG[^:\x9d\x92\xe6nLpO\xa2', b'\xa4?\xd8\xd1L\xd5`gd\xc2\x8c\x94>\x8c\rpe\xe2\x17\xbch\xc5\xd5\xf1p2\x1c;\xe1\xee\x0c\xa4\xf5\xe9ji\x07xq\x1f\x83.\xda$\xa3\xce\xd2\xba9u\x9b\xd8&:6[\xf3 \xb8UF]:\xda', b'.\xee\xc5\x9d\xe4\x87\xa9;\xa5\xcd\x15\x94\x1c\xc8l\x18\xb5\xcf\x1au\x13S\x83\xe2\xcf\xe5\xa5\x1e\x1d\x0c\x8f59o=1\x11D\x8cqb\x95&\xa4\xc5@ga\xd6\xd8\x91OE\x10\xbe\xa3i\x12\x05\xdfc\x9eoy', b'\xefC\xcc\x1e\x8cB+\xe0\x00c\x9e\xb1\xc4\x8e\xe9\xa6\xb3\xa1\x96$\xbf\x9b\xd2\xdbV\t\x8e\x97l\x88\x8d\xa4\x8b\x82\x93\xb8)\xf8\xea5y\x9f\xa3\x18\x1e\xef\x97\xc8J\xb5\x8c5\xc7\xae\xb5\x01\x06z\xf4\x8d\xe4b\xfd\xd5', b'\'\x85\xc0\xd9\x00K\xa1\xab\x16\x8fK\x8b\xa1\xf77\x1e&4\xdd-\x16\x06\xdb\x16z\x1b\x8c?\x18\x81\x90\r&,{>#\xeb\x904X\x11\xeeV\xb9-\x9b\xda?\xd3\x93\x16\xe3\x19\x9b\x1e\xcd\x95"\x1ep\xe5\xce\xac', b'z\x83\xfb\n\x15\xfb\xcdQ\xbfX\x82\xec\x15\x8e\x8bd^\xf2\xb2\xf3\r)\xb14C\xcdL\xaf\xbe\\:\xc9\xdcOI\x8ah\xa9p@\xcd]\xf0\xe0\xe7J\xa9\xeb\xabqJ\x90\xc4k?\x9fI\x13\x8d\xb0C^-\x0b', b'\xf1\xb6\xf2L\xe4\xbahw\x99 \xacm\xb1b\x18\x96\xeb\xaf\xeeL\x07z@\x80\xe1\xab\xacMO\xfe\xe1J\xb09I\x0e\xa0\xc6\xeaFBg\xd4\xec\x87=\x1feg\x02\xd3u/)\xfej\xf2\x9f4d\x1a\xd0qO', b"w7\xa4&'D'\x00\xb85b\x1f\xf1\xda\xb4~\xef]\xfd\xa5\xd9\x1dp\xc5\xaa\xfc.\x12\xfa\x87\xab\xe8_\x84k\xea\xbc'\x9d\xfc\x9e\xa0\xb1\x15\xe0\r9\xc4\xc3\xca\xc8[X\xa5#@\x98\xc32\xd1C\x9d\x17\xa9", b"\\\x05'\x0eO\x82C%\xb53\x10\xafy\x13#p\x96\xdc\xea\xca\xc1\x89~X\xcd\xb6\xe7\xd7\x01\x88\x12u\xb1/N34\xeb\xa6\xa1\x85h\xdc;+\xa7\xe7\xd6\xf4\x1c{\xdek\xcbo\x11\xbf\xd3\xa5\xfc\x82\xe6A\x04", b'\xfe\x1ee\x99.\xc6\xd0\xa0\xf8\xfe\n\x1bZ\xd9\x92\xd4&\xd1\x1f\x88;\x92v\x0b5"\xa4\x05\xbcF\x8c\x11\xdaoe\xea\x95f\x0b\xac\xcbP\xfe\x98C*j\xad\xbb\x135\xa6\\\x9b\xb1\xa0e\xb0\xba\x9eo\x8bG\x99', b'\xa1\xc8\xc9K\xde\xd4\xb6\xbf\x05(\xf4Sbk\xf8f\x19i\x84\xff\x064\x08\x8f\xde\x98|1+n\xbcA\xf0\x93@w\xbb\xd3rT5\xa8\xf9%\x99\xf2\xf2\xa21l\xab\xca\xfeAX_\xdf\x1c\xda\xa6}\xf2{&', b"\x00Fm\xa4\xf7\x0f\x1eQ\xe2\x1fe{t\x8f\x9eZ\x18\xaa\xd0\xb8'\xeb,\x08\xb2\xa6|\xefb\x80#(KY~9\x03\x81\xf6\xbf\x02\xc7\xbf\xe3]\xa8`\xed\xe6c+\x0c}\x1db)+5\xd6\x16\x0f\xe1\x1c\xb9", b'\x8b\xa2\xe6\x9eP\xab\x05\xf0\x1c\xcd:\x19\xda\xea?\x1e\xa9\xad\x0b\x1b\xa5#W^\xff\x88\xa9\x85\xa3\xaa\x1e\x9e\x97\x9e:\x7f\xaa\xefC\xcb\xc1\xa0y\xd3\x97\x1c{\xb2\xf6\t-4a\x8d\xfd\x94]\xad\x9c\xff\xdb\x85\xee6', b'B$\x16\x96\xdco\x08\x81v\x05\xe5g\x89\xf0\x84W\x90\xcaP\xd3\xbbl\x93\xf9\xaat\x1a\xba\xb2\n\x008{F\xb3\x80\xdb\xfb#N\xf9j\x11m(\xf8e\xc7\x17U\x15J\xc8s\xd3\x8e`Th\x06\x95\\\x1d+', b'Z"\xee\xfeg\xeb\x83\x8e\xf2*_\xf8\xabn\xdd\xce\xe9\x03)<J\x86\x0f\r\xd5\xc4\x03\xd9I\xc0\x1e\xef\xb90\x81V\xf0\xed[\x88\xe1\xe3R\xa0\xba,\x81\x0f\xf9O\x07\x04C\xbb9\x08\xdf\x81}\xc3\xfb\x0f\xbc ', b'\x0c\xad\x07\xa3Y\xacum\xceO\x18\x07~\xda\x00\xdc\x90\x05(\x93\x985~\xf9e\x08\xc8\x8f\xdd\x8d\x00\xa4W(eq\xc5\xe5]\xa3\xc8r\xde\xcf\x07\x07-\xa95\xce\xc7\x82\xe6\xaci\xecCX\x9cWv0\x8d\xa4', b"Qx\xa3\xee\xfbe\xa8\x9ft\xa8\x96)eK\xc8$\xb4'\xd0|m\xd7c\x0c\x12^dri\x11\x87\x11\x1e\xb3\x9d\xe4\xb1\x01ZY~\x86#VM\xf7\xf0\xaf\x86Uy\xceN\xc1\x8c\x82\x9c\xbek\x0cP\x04\xb2X", b'\x84\x0c\xe4\xf2\xc6\xc7\x1d\x9eG\xcb#\x80D\xe0\xd8(\xdc>K\xdd\x8d\xba\xa1N\xb5\x82\x98\xadO\x1ec\x05\xd3\x9e\x1e2\x0f\xba\xa3S\x8dk\x90x\x93\xf3\x9d\x12+\x1d9y\xa3\xa7\x13\xb8\xc2\xde|Z\x0cFb\xde', b'\x9a\x84\x80\xe3~\xe7\xe3\x08\xd9\xbe\xb5\xa15\x9dR\xf2C3\xdb^`\xfdy\xcc\xe9p\x9a\xec\xc2<\x95\x81k9\xed\xac\x08\xca\xd0(\x1b\xec\xf0\x02\xc2\xcf\x88#_\xd2\xee\xcd\x8dt\xcd7\xad\x11-\xda\xfe\xca1\x96', b'\xb2|\xedM$\xa9o\x95\x86"p\xb4]n#2\xa8\xebW\xf9\xe4|P\xe1d\xac\xe2\r\xc06\xc4\xae\xf1Q\x0c\x13g\xbd\xba\x97_\x9b\xda\x16\t\x89ey7\x80\xdaDX\xc0\xe8\x85J\xaalK\xe7\xeb^l', b"s\xe7\x95\x8ca>\xff\xaf\x05bv\x90\x95\x12\xa3\x99\xa7\xda\xd6\t\x84-\rtf'N\xd6\xee\\\xff?\x87\xc0\xe3\x8c\xfc\xc6\xedb\x14\x13f\xf1\x8b\x90\x04\x0e\x08R|\xdd\x85\xba\xc1\xda\xf1\xc8*Y\x1a\xc4\x12\x8c", b'\xfab\xe0\xee\x14\xfd:/\x18\xbc?\x03\xae\x8d\x925\xaa}\xda&Kk\x02\x96\xdb{T\xc3\xc0\x0b\x9c\xc3\xd1\x83\xf8_\x82\x87\x02\xd2\xd5\xee>c\x8ev\xae\x81^X\xdd\xd9\xbc\xc7\xce"\x1e\xe8\xb1!Y\x82\xdb\x1b', b'\x9e\xfb\x05\xf3\x845\xde]F0R\x95\xdc\xd4[\xde\xe3\xd1\x1b\x8e\xa3T\xd9\xb9\xc8\xfco\x02\x8b\xcb\x12\xfa{2\xe1Y\xfd\xe8pe\x925\xc6\xd3\xcci\x03\x89\x94E\xdb@\x08/!\x90\xafs\xc3w\x131).', b'\x1e\xd1\xe75@@"z<\x9c\xd1\xa2\xcf@_\x01V\x8b$\x8d\xb8\xb7\xca\x01\x15GL\xf3\xd5G\xf8\xb3\x90g~\x93\x92ZU$w\xb7\x1c5\xaa\x16\xd0\xff\x9a<\xce\xf6\x17\xb8\x8f\xfd\x0f.zn\xbdt\xf5\xc6', b'\x19*\xab\xda\xd9\xa4\x1f\x92\x80\xda\xaf\xa4\xda[\x94\x01\xe9\x0b\x11\xe2\x9d\xd7.\xad\xe33I}5\xa1v\x15<V\x93\xf8\xc2\xc1\xe1\x03\xbf\x97\x92\x98\xb0V^a\x91\xa3\x83\x02\xc4\xde\xe9\xe4w*n\xc7\x85\xec\xf5\x0b', b'\xcd\xd4\x10,F\xad\x18\xd93\xc8\x88\xb7>\xa3&@7p\x07\x1ch\x12TI\x0c\x0e_\xd8\x97\xac\xe0\x88\x86m6\xa4\xee\xc5+\x15\xedq\xc0\nG\x1e\x87\xeb\n|*\xda\xfa}UR\x11X\xcd\x82Y\xb5P\xec', b'\x0e\xa3o\xdc\xec\xbd\x14\xaeTR\xf1>\xe3\xa7\xb1\xb6\x05\x9f\x12\xc00\xfak\xf4~\x85\xa1lLm*1\x9d\xe2n\x04s\xa7W\xfe\x82[\x95l\x07M\xa6\x17k\x015\xee\xac|!\xe4\nW\xa1)o\xd45\xb7', b'|=\x0e\xd7x3\xf6V\x88\x80b\ti\x88\xf5\x15>XL\xce\xd3\x1b\x92GF\xe3j\xb3;\x06\x06@\xfd\x8a\xaa\xfa2&\xc9\xb6\x11\x85\xf5\xeaJA\xf6\x1c\x0c\xa1\x05\x1c#&\xd3u\xb7\xac\x84\xcd\xcd\xfe\xa9{', b"Oa?\xae\xaf\x1e\x0cp\xe1*\xe8\x9a\xe5\xd3R!\xbc\x1c\xe3W\x85\xe4\x1eY\xe3s\x0cde\x1e\xbf'\xca\xdb,\x95\t\xb9\x82W\xac\x18R\x8a\xa3\\\x03Q5Jz\xe8\xe89f}|7`\x9a\x80\xb8\x8bA", b'\x13\xe2\xbb!\xfc\xf2\x9c\xf9^!aK\xb9\xe1\xeeh<\xb2\xfa\xc7Mor\xf0H\xb7{\x88\x0bT+\xbe\xbc\xe4\xe0\xa6\x004\x86\x83\xb5\x12\xb1\x8f\xe8\xf9\xe5\x88\xe4\xee\xab\xc4=\x0e\xbaF\xbc\x81V\x9f\x86\x92;0', b'<\xbb\xba\xdc\x9cm\xf8h\xd4\xf9\xf6\xbe\xf0\xc8\xf8\x0f\xa8.~\x02&\xf6H\xbb\x98a\x84\xe7F""_(oe2\x95\xae\xdd\xf9k\x08x\xf4\xd92@\xb5\xea\xbe\x82\x7f\x80\x8b\x16\xc5\xce\xf6\xf1\xe1K\x0fn\x10', b'\x8fd\xb2\xf9\x9f\xd1\xa9R\xeaD\xfe\x96e\x13$9 m8*\xf8\x93\xd9\xb6+0\x90\x02\xc5\xc5\xe0\xa5+\xaau\xf16\xf2\x1f\x03\x9dU\x8e\xff\xa7B}\x04\xbb\x82\xd3)\xb0\xc8\x9c\xd8<\xa3\x7f\x96\xa0\x1dk\xa7', b'\x88stZ\x89}\xf8\x0f\x02\x01\x04k\xd7ETi*\x15\x1f\x9d\n~\xf7\xa4\xff\x9c\xf9\x86\x1d\x15<\xce\xd2(\xe1\x10\xcb6V`\xb6\xc9(\xd6\x81\x1d(\xcb\xa9\xc0y$\x999q|f\x9b\x87\xe23y\xa1=', b'\xbeJI\xcdQ\x17\xd9\x81\xdc\x97\xce[xoF\xbe\x9c\x95\x05\xda\xd4\x1fa\xcb8\xb7d\xc7\\\xd2\x1cncC1h\r\x8a\xc5I\x91\x8a\xb8,\x93\x11\xbe\x8a(X\xa7\xfe\x13\xc5dbW\xae-\xb5\xe4\x87+\xb1', b'\xa1f\xa6s\xbc[~\x08\xbcu\x93\xf8\xd8M\x0b\x87/`\xb6\xfd\xa5\x1b7\x8d\x12\xef\x97\xd9\xe5\x03\xae_"\x17EX/\xc5\xe6&)~\xdc\xe95\xa8\xa0_\xaa\x82\xed\xf53\x1ea\xab\xcf\xd1\x17\x96\xcc\xcc\xb9\x06', b'6r\x15\xbc~\\\xea\xa1f\x17\xcak$bB\xceja-\x0f\x97\x01\xa1V\xbb\xf9\xf10<\xf8\xb6\xd1\xd7\x98}\xa5\x90tOc\xed\xc4\x1e^\x84(\xf4[\xc0\xd4\x01\xaa4\x81\xe8^\xe8n-X=\xa3\xbb\xf0', b"C\xa0\xe9n\xcd\\\xf8\xe1\x13\xfdW\xba\xe3\x9a:\x87V\x1d\xedmXqQ\xd4Q\xb7\xca o\xd2d\x82\x1f\x80;\x8d~\xc4$\xb3M\x8a\x9c\xd9>\xc1R\xf5\xa7\x805\xd7\x93\xc8be\xea\x9d\x9c\x06\xb6')\xe1", b"8B\x18\xee[\x8e\xaaH\xab.-\xf4#\x08\xdaE\xb4\x1b\xa9\xfa\xe1\xa5'\x83\x8bQ:\xc3\\T\x9d\xd8v1\xe9B0k\xbf,\x86\xa4\x15'\xd5ye\xbc\x15\xf9-\x07JMh=\xcb\xdbj\x02\xf1#\xc4N", b'4\xecpH8\xf6\xe1`i\x84m\xd9d.\x87\xcc\xb6\xc1\xf6\xc0\x87\xa9#*\x8c\xc6\xa3\xb0\xccFE\x01\\\xafv\xff\x0b\xcf \xf6M\x9b>W:\xa7\xde\xe0Q\xe5s\xe1\xe9\xc8\xdc\xee2"\x16W\x91\x9f"\x08', b"\x07\xdf=\xcc\xbbL\xd2\x9bq\xde\x90\x9d\xf1\xaao\xa7\x82\xfe\x83\x06\x13\x04\x8b&UY\xed\xb8\xa0f\xf28\x98\xed\x8c%o\xa3\xe3\xc6Kx~\xf6[=\\t\x8ca\xe82XabUc3\xcf}'Be@", b"&\x18\x81\xc0\xc1\xf0{\xa7\xda\xba\xee\xb6\xb0ne\x92v\xa8\xcf\x06$'.\xf4\xcf\xb6\x92\xd2\xe9\xf0\tg\xe08\xa1e\xab\xc5s\xd4\xa4\x12\xa9^\x9f\xf1\xb9|\x06\xf6\xc7\xc9\x145CuK8\x82\xb7\xc3\xe3?\x96", b"\x1ev\x8c\xd6\xdb}\x8d\x1d/\xf6O\xa2\x06\x1c\x0b\x8a\xd2\xa6D\xd5f\x14\xbeV_#\xec\x17\x17#\x02\xd0\xb3~/ \x9c\xf6\xee\xdf\x06\xce\x8dv[\xde\xa6\xbb\xa6\x90\xe1#\xf9\xb8g\x18'\x03\x8c\xd3\xe6\xb5\x91\xd8", b'\x0b&\xc6.\xca\x8e\x88i\xd1\xfc&0\x93\xaf\x81\x10p\xed\x15ood\x87\xde\x1f\xb7\xe9\xbe\xb9\xdeX\xc5@\xdc\x00E\xc6@\xde~Z\xba\xa9\xadH\x98F\x02\x84A\n\xc57>\xf36\x97\xf1\x0f\xbd\xfa\xe7hT', b'\x80\x15\xf8\xd8\xb4\xa9\xe2Z\x9bI\xb6j)\xc9-_\x14X&\xc8\xbe\x86\xa2\x9c\xcc5c\x1f\xe7k&w\xd5\x97\x85\x94\xad\xe4\xcb3\x08\xf02`\x88Z\xf6\x0bV_\x86\x1e\xb07\xff\xf8\x91\xfaZt\xd3\xbe\xdf\x8e', b'o\x0c\x97\xf4\xfb\x05\xd2\xcbcn\xe8"\xc2\xd5\xfc\xcd9\xaa=\xff\xd2\xc8I$\xed\xf8\x89K\x13\x13\xb1@ \xe0\xa0\x98LR\xdb\xb0\x91Y\xd2\xdb\x86\x1b\x1d\xfee\x1e\x8c\x10\xcde\x89\x84\xf4-NZ\xc0\x1b\xef\x8d', b'\xed@}HB\xa5\xd4\xc4\x8d\xd5a\x9a/\xbe\xff\xc9\xd8\xf3g\xae\xd2\\\x8c\xaao\xf5\xdf3\x15\xa5y\xea\xab\x92\xbf\xbe\x9f\xb0R5\xbd,\xe0\xb2\xfc\x91j7\x00\xd8\x95\xfc\xeese5t\x88\xf4\xd7T8I_', b'T\xc1\xa2\x80qZ\xf1.\x1f\xae\xa4\x87\x9a;\xd1A\xd1_u;\xf6\x89\xbb\xba0d\xb4[\xe6\x82\x8d\xaf\xfe\xac\xb4\x84h1@\x8b\xebDV\xe56\x07:\xda\xab\x81\xcd\xf3v\x06\xfa\xb4\xd4\xba\x88ty\xaeC\xf9', b'x\xcdN\xc2\x94\x1b\xe2w\xa4TV\xd2\x0b\t\x1a\xb7Y\x01\xcc\xd9Uh\xeb\x8a\xab\x98\xbc\xad\x8c\xe0\\\xd5Y\x92\xcc\xc7\xce\xc6E\x1d\xcc\x9d\x18\x9a\x9c\xea\x06U\xf7*\xcav\xf8\xee\x0br[\x0c\xa6\x86\xfb\xb4\xc8\xec', b'\xd8R:\xea\x1f\x0e\x87\xd2-N\xa9\xb4\xcat\xd8\x87\x8f\x12\xfc\xf2\xba\xb2O\x1b\x05Q\x96j3R\xa8\xb6\x98\x96\xf0\xba*\xa6.W\xaa\xe2%\xef\xa4\xd3\x1e\x92\xfb.\x89\xcd@\xa3\xfe?\xf6\xbf\x8f?\x9b\xea/\xe0', b'a\xebh4\xbfM\x96\x05\x11\xe7U\xe6\xa6\x9f}\x11\x82\x86%~E\xf8\x12\xb4\xe9-\xf4\xf1K\xacl\xf2\xc16Bp\xf3&\xc6%-\xedN\x04\x15\xe5\xb5\x14ck*\xb8\x96rN:GY\x9c\xb1\xa0\x0b\xc1\xb2', b'B\x0b\rK\x8a/\xf3\xacU\x87B}"h\xa6A\xbf*GZhn\x12y\x94V\xe2\xb6\xa8\x05,\x9f\xf1\x0b\x16V\x10\xcc\xcc\xc1\xb4Zm\xa3!A\x9d\x1c\x90\x96)4\xd1\x18\xee\x1a\x93\xd4\xd4\xbb\xf5 \xc7\x1b', b'\xbaN\x9c\x04\x8b\xb3\xde1\x8b\x88\xb7\x864\x83\x050\x94\x88\xa9\x927R[`\xdb\xd8\xa0\x15\x17 \xfc\xfb5n)\xe4\xc6C\xd4\\\x96_\x8b>\xe6\x94$\x8c\xdc\x96)\x1b\x8f\xd8\x92g\xe8sqNnv\x95M', b'\xda)\xc3\x1bF\xe1\x93\xf7Q\x9b\xbb\x1c3H\xfc\xb0\xc1\xd7L\x0e>\x96ZU\x17y\xe0\xb8\xa36\xb1\xf6\xec\xe2\xddxQ\xca\xc31\x87=\xac\x14k\x86\x1a\x01\xda=\xf1\xb1\xec\x87\x134Z\xd6\xf9\xc3\t\xb8\xe1\xae', b'*\xb2\x04\x99D\x0b5\xde/\xe8\x05-\x15\xf1e\xc2\t\xab#\x17$U]\x8d\xaer\xc2\xde\x12\x9b\xb6\x06,]A8l\xda\xffP\x8a\x18TF\x9a\xbe\x06\xadB\xb26%=\xa1I\xf8|\x99i\xaeA\xd9M"', b'FpX\xd7\xd6R\x1fi\x89\xd7\xd97k<\x8c\xc1\xdf}\x91p7\x10qq \x95e\xe3\xe6Pi\x9c\xfe\xb4\xe8Vo\xec}#+\xf7\xcd)\x08U\xca\xd6\x9fn,LN\xb2\x97*\xa1sc\x01J=l\x12', b't~P\x81\xebQ\x10\x88?\x85\xa7\xa1%M\xa7\x176\xeca\xbb\n)\x83\xdc\xc7p\xd1\x13\xc8\xf2\xb7\xac|\xe4\x9fJ\x9c\xf6\x86(%\xe5\xd3Q\xbdt\x9fS+1vl\x19\x9b\xc6\xb9\x8eL\xab\xe7\x83\xb6\x9f=', b'KH\x7f\x81#\xed[\x16\xc8"8p\x10\xcc\x8eb2\xe6\x83\x1c\xe4\xf2d\x13G\xaa\x91\xc91\xdcG\xbb\xeb\x12!\xe02\x8b\xff\xa1E0\xed\x13\x15\xffQZ\x1b_\xfaJ\xe7k\n\xee\x90Q\xb3\x99pJ\x16\xf9', b'qf9\x07h\x1a\xf0\xe3$\x94R\n\xc7t\x7f=[\xead2\xb4\xcd\x1f\x87\xcb8\x85p\xf3\xed\xfeD\xcf\xab`\xd4\xb4\xae\xc6:+\xc6\xdf\xb0\x1d\r\xdf\xee\x92\x9d\xa5^\xfa?\xe7}1&\x1a\xc8#c:\xf5', b"}\xfcBJf\x19\xf3\x82Nw\xd6\xa5\xaa\x8cq\xec\xec\xe9\n\xa0\xbew\xd4\x95\x13\x96\x1e\xd9\xb5\xe4\xaf\x82'\x04V\x05\xe9\xdd3\xdc\xfaR\xb1\x92\xfb\x9c5\xcb\x8dT\xee\x0f\x91T%\xb4\xddr\xb6\xdb\x90\xc8\x16\x1e", b"g\xcb\xd3=\xdb\xf1\xb9\x08y\xe1e4\x11]\xa93.n\x03x\xa1\xd3\x15$\xffz\x8b\x8a\x1euq\x81K\xbc\x99\x83*Jr1&!\xa3\x92g\x86'\xf8Kn_\xce\x9c[\xd4\x1a\x1c\xe7]P\x89\xda\x08\xc6", b'*\x931~\x88`\t{i\xc6\x8a5\xdcz\x87-Kk\xe4\xe0r&\xd4\xeb\xdf\xaa\xc7\x16\xf6T\xfe\x96b3[O\xca:\x04\xdcK\xeeh\xaf\xcb\x03\xaf*`\x87\x12\x83\x80\xe2?O\x7f\xdf\x84\x132\xf7\xf5f', b' \x03/s\x9c\x86\x90\xcf\x8f\xd8\xc2\xec\xa2\xf5\xdcP\x9a|\t\xd0\x82\xa8\xc8\xa4%\xed\xb5\xd6\x01jnf\xda\xd6+\xf3\x04,\xd9\r\xdc\x1fI\xc7\xa9\xffv\x9e\xec\x07w\x13?L\x08\x88\xee\x16.F\xa8xTQ'], [[b'\xbc\xff~&\x92+\x8c\x91\x00wW3\xfa\xe1up\xe2\x9a0\x9a\x8ff&)\x81\xa9\x94\xcajU\x8f\xf1\xb8K\xc7\r\xb8\xa0{\xf5\xaf\xbeo\xf7-eF\xdb9\xdd\x99\x02\xd9R\x87\x91\xed\x08\xf1O\x8e\x9c\x1aX', b'\xe2x\x9c\xf4\x9c\xef\xe7\xfa\xb8*\xfe\xcb[D,2\xd7m\x1ck\xc8\x13\x12\x81\xe5m \x05\xb1\xec\x8aA\x0bq\xaa\xcb#\x98U\xcbR\x99\xa3\xfb+_\x8f\xa0\x9d\x925\xd4>|4\x8a\xf4\\l\xcc\x0e\xd2q\xec', b'AA\xf7\xc6\x7f\xe9\xef\x0f\xe7\xf2T7T\xc2\x07| \xa16)\x0f(\xae\x1a\xdc&\xc4\xd6#h8,h\xec\xab["*\xfd/\xc3\xe7\xf8\xaf+m\x7f@\x97>0\xee\xa0\xc5\x1a3\x8e\\j\\4;\x96\xd8', b'\xcb\xc7\xc4\x81\x82\x07F\x8e\x1f\xda\x960\x15\xea\xa6\x84A\xacb.\x9cc\xe3\x86\x1e\xa8 S\xc3t\xba\x16\xb6\xc0m\xeb\xc7\xe6\x16\xee\xc5\x0bw\x83N\x9f \xc7e\x88\xbfd\x8e\r\xf0\xa9\xf4\x87\x99\x06\x96\x01\xe1\xca', b"5\x17\x8b\nN\xcd\x16\x06\x82?\x02w\xd1\x0b\xaf\xe0L!qy\x91\xac:\x06\xcb\xf7\x91\xb03o\xba\x82se\x88\xc2H\xaf\xa7\x0c\xbep\x91N \xd5zY\xc8NP'=\x99\xe5\xe0>\x9b\xfc\xa63\xf7'\x10", b'\xb0Y\x86\x10\xf3\xe5}\x86\x9d\x9aL\xfaN])\t\x97(PK\xcc{&\xda\xa8\xef\x81DE\xaek\x0bH1*\xec<\xc4\xa2\xf7\xf5\x16/\x99\xfc\xb46`\xdd\x0b\x90\x97p{\xd3\xe6U\xb3\xcf\xe4\xd0\x8c\xf4\xe9', b'\x01\xe2\xfa\xb4p\xac\xeco\x8c\xe1\xf9$\xf2H\t_c\xdc\xe3\xb6tp\xa7ZSt\x95\x07P6\x89\xcfzB`\xaa\xda\x8b\xf9-\xf3L\x12/2\xb0\xeb<\xdf\xee\xe8\x9akoS\xf3-\x9fx\x8b\xa6\xaeO\xc4', b"\x9fi\x8a\x9fg\xfbzi\x97Q\xa8\xe1\xf0'+\xe0\xa0M\x16@r`\x923U:%\xd0\xa4GN\x16\xd4\x11\x82\xaf\r\xb6\xfbO8\xb1\xd73\xff\x9c\xe2?u\xe1!\x0b\xf2<=\x85f\xb761\x11\xf7\x9bU", b'\xdf\x1cM\xe5-\x89\xc3sj\x9f\xa3p\x98\xa4\x10\xd9\x1f\rZL\x12\x0b\x84|\xfd\x115\xaa\xed\x80\xed\xce\xcfe\xe2ZN\xc9?\x1f\xe4\xc7r\x93>ws\x19\xac\x93\x89\xdc\x82r\xb1\xd4\xeb\xf1Hb\x94\xd2^5', b'\xf9\xfa%\x84\r\x82\xe3\xb5R\xe2`\xf2\xfbV\xd3\x1e\x8bp\xd7M\xac\xff\xabRhI5\xbe\r\t\t\xf1(\x022\xed5B\xa5`,G\x0f\xdcb\x96\xd4Ob\x8c\xcdH\xd0~3@\xe7f\x96\xb9\xcf)_f', b'\x8c\xb7\xb9\xd4\xf9xm\xcb\xf2\xdb\x82\xe0/v\x84\xe2v\xab|\xa5>\x11\xab\xa6\xb6\xf7\x91Px\x98l\x0f4\x87\x14\xdf\x1d\xca|\x8fh\xe1 \xd0\x1b\xdf\xa6\xcb\xc5\x02\xf2i}\xe8\x02\xacNKr\x04\xdd\xc9\xac\xff', b'\xf7\x1e\xfc\xd4\xabj\xb9\x8c\x81\x8a\x0bhJ\x8e\\V\xdd\xa7\xcb\xb2\x9d\xb2\xd1\x8bR\x1f\xd7S\x00\x81\xc7\xd7\xd12A\xf7\xab\xa1\x95,\xd6|\xbc\x95|)\xb8\x18\xaf\xb2\x1a\xa6\xf3y\xafB^\x9cS\x12\xeew\x7f\xb5', b'y6\xa0.\xbe\x88\xea+\x0f\xf4\xdcR\x85\x12\xcei\xd6\xeb\xe8\xdao\x1br&\x13\xec\x1b*\xacdyW\xbb%\x9ae\x85\x88\xce\x04\xa4\xbf`28\x9aZ\x1bm\\(\xf6\xf5qh\xb1\xf3\xf9\xe8.k\x91\xd9i', b'\xc0\x0e\xc4\x17\xa2\xc0\xd3W\xd8J\xed(XGY\xa8\x88DY\x81\xd4.!\xda\xa6\xb8\xeb\x94\x16\xd7\xbd\x03N5\xd2\x9dLZ\x917\xb6\xa5/\xe4\x0f\x80\xcb\x10\xb5\xd0\xbf\t\x9a\r\xc2i*\xbc;\x920p\x9bZ', b'H\xa5\x00\xa7,\x13f\x01\x7f,r\xab\xbc\xc0F\xfe)\x04\xfc\x88LM\x81m{\xe6P\xd3\x92Gy\xacW\x11\xb9)\xf2\x8e\x9b\xfdt\x13\xd4kt\xe9T\xf7\xffQ\x18\xb0iC\x847\xf7\xd4\x86D.\xd1\xf0~', b'\x0b\xe4\x1dY\x13}\nr\x94\x9b\xa9\xa3{\xf7\x10\x95\xcao\x11\xda\r\xd7\x88\x05.\xd2p\x044.\xf1\x0b\x81S\xcf\xbc\xa3v\x04\x86R\x88o?\x16\xb4vx\x053C\x9b\xf2\xe72\x9b\x99\x19L\xf0\xb3v\x92s', b'\xe3\xf7\xeb\x10\xf5\x9d_d\x8dvL\xef3\xae\xf3Inn*\x16\xc5t\xff\xf0\xd8\xd8\xb6Y\xb9jm\xe3N\x91\xbap\xb3@U\xf3\x84\x92\xed\xdb\xa1\x925GY:\x8a\xf8\x92`\xd8\x18a\xac\x18x\x1dT\xa6\x99', b'1}\xd5\xa8\x1c\xfa\xed\xbf\xfaUYA\x80\x80\x1e\x1e\xc0\xad/v\xdbs?[d\xbd\xb3\xc0y\xc8\xf8\x0e\xae\x1b}e\xff\xfb6\xc6U\x1e*\xfb\xc3\xc0\xeaI$\x0f\xe8)pp\xe9\xc8\x9ei\x91\x19\x87\x93\xe9O', b'\x1a\xd2v\x08\xfa^\x98\x14\xc6j\xfek\xcff \n\xe6\xe5\xa5\xd2\x01=\xeb\xf51G\xdc\xa9\xce\xe2c\xc8\xdb\x0e\xe0\xe5\x13\xf8f\xfd\xb7\x92\xe9NI\xb8\xc71\xa3\xd1\x16)\xa7\x85o\xb8cP[\xe9\x13\xb6\x1f\xc0', b"\xce\x98\x9d\xe9X\xa0\x98\x8f\x06_B\xac\xde5EV\x1ag\x0c\xc0\xd0\xfd\x1a\xb0\xc8\xef\x07s\x1e'\xa5J\xe9B\x03j\xfc\x85\xa5\xa6\xe6rd\xce\x82\x12V\x19\xf76Y\xe1\xc2\x1d\xdb5\xf8\xee\xeb\xbb\xe1\xfa-\x14", b'\x7f\x9f>|\xc3K\x14\x91}\xa5\x96\xc5\x7f9\x9b\xcaA\xc7\xb4\x9b\xb5a\x0e_\x82\n\xfa\xe0\xa9i\xdfWQ\x1b!1\xd4<^\x0eps\xc3\x8ak\x9a\x00\xb8\xb1\x89\xb6\x12\xef\x9c\xca\x9a\xb3f"\xca\xc4l\x87u', b'\xcf\xb4\xb9\x11\t\x94\xefu\xe7\xdf6X\xb0\xadn\xc4\x07`MuC\xf1\xa4)M\xaa\xaah7\x8d\x99uULX\xf5\x8e\xb6R$\x83nH]%\x96\x9e;\xcb\xfe,\rZw\xb1\xc2A\x18\xe0\x1f\x9ef\xc8\r', b"pnaR\x08S\xd4\xf3\x83\xaa\xa3\xa5z\xb9\x18\x98PPy\xe3\x13\xad\xf4\xe0Y:c\xa70v\x8d\xe6|{\xae\xcd\xb0\xff\xd4\x92\xa4\xa7\xf3'\xb5`\x1d\xe6'\xef\x9e\x9e=\x1a\xac}u\xf8\xf2\xb9\xea\x7f\xd8x", b'v\xd8\xe2j\xfc\xec\xa1ox\x9c\xef\xf1e\xe7X3\xd9\x9b\xb0\xdd\x104\x97X\xd1T\xf2\xe1\xa3d+g\xd9\x12\\\xf9\xf5\xa5\x8c\xf3\xbd(~\xa7\xebb\x95-m\xdd\xf3ie\xc6H\xa3*\x8b\x18[7\x8d\x1d\xe1', b"aJ\xff\x0c\xaf\x0f\xb8A\x11\xed\x94\xdbx\xf0=\xbc\xb5\x8a\xf7\xc9\xa3\x88\xb4\xbb\\\xe2\xc5\x16\xf6g\x8c\xe6&\xb71\xe8\xa9\x8cL_P\xd9\xcb\x9e'w\xe9\x03\xc8d\x9d\r\x00ix\x8b%^5\xc66\x04\x92\xc4", b"\x7f\xbal\xad\xf5\xc3N\xd2\xed\xae\xf8c\xdd\xb9GSxs\x87\xd7.\x93\xda\x96X\xcfo'7\x00}W\xd1\xbe\xb2\xda{\\|%\x11\x82\x9d?=\x8f/\x1f\xc7\x0b\x10\xf7{Q\xaf\x18j\xa3\x8d\x82Hc\x1d\x19", b'e\xe1\xd8\xe8\xf4\xe4\xd4\xdcQJIJ\xf7\xc27\xe6\x93\xe9\xc69:\xb7\x85\xee\x80[n\x0cH\x8c\xd9\\\x9ev\xa9\xe5%\xee\xb28\xa4H\x1e@\xb3\x18\xb9\xe6\x07$<t\xd6\xd2\xc8rL\x94\xeeeV`!\x00', b'\x0f\x9c*\xbfT\xb3\x17*\xd7-uk\rq\xbe\xfe\x14\x8e\xaai\x7fXZ\xe8\xffw\xa8\xbfp\xf9\x02{\xf1l\x9d\xa4\xe7\xd2\x93\x16Go\x9b\x17b\x0b\xf7\xeb\x9eN\xf1%\xafr"G\x18a\\\xfbc\xe6\x8b\xca', b"\x9e\x0f\xc1H'_Y@\xab\xef_\x14\x105$\x84\xc8\xfe\x80,\xb0\xae\xc6\x17\xd7\xa2:WZ\r\xf9wM\x0be\xd7\xba\xbd|\xe9\xed\xde\xc6\xc1\xc5'+ \xa0AX\xa0\xbb\t\x98\x0c\xe65\x1eU\x94\x0b\xb9\xae", b't\xd1\x0bn~\xcc\x11\x9f\xd9\x0eb(\xea\xcc\x14\x80(\x03\xc0\x88\xf3\xe1\xc39\x85\xe8\x88\xe7\x9e\xcb~|\xd4 \x190&\x14\x0b7\x04|\x13\n\x87\xba\x926\t`\x05\xfdkZ1\xb5\x80<\x04b\xbaR%E', b'\x1d\x8dRi\xa7S\x96Q\xcdye-\xa79H\xe8\x88\xe9\x19\xfa\x9d\xf2\x0f\xd9&\xe1N\x01b\x8bWoC\rm!\xf5{sZ\x83\xc5\x0cZM\r[<\xbfw\x9f)\xc7\x85\xa8K\xe1\x90\xf8R\xa7\x84<\x85', b"/H\xcc\xe8\xdd\xcd\xe7\\\x82\x06\x15\x91]@e\x05\t\xfd\xc2\x03\x1e\xf1tR\x87f\xe5ID*eL\xbf\x14A\xb3+\x05'\xa8\xb8\xa5\x9f\xb3\xb62\x93h!\xb77\x19\t,dy7\x9d\xda,\x84w\xce\xb6", b"\xe6o\x18\x8a\xb0\xf6\xa8\xc4p\xc6\xc4j\xe4C\x82\x9a%c\x04\xa3\xa3\x12\xcb\x94\x8asx\x0eZ\xcfC:\xb6\xc2\x0f\xd1\x8a\x81Rq\xf0\x83\xca*\x95Sq\x97\xe9 \x80Sv4\x84:\x04\x83\xebnH\xbe'\xed", b'\x82\x1d\xfcF8\xf0ae\xfc\xa1nK\xa8%\xc5\xb5I\xbf\xa5:O)E5a\xbc\xdc\x00h\x048\xfdu\xf9\x04\x98z\xea\x8a\x88\xcc,KQ\xdcN\xdc\xc3c\xc2U\xe7\x89\x9e\x88.6J\x1a8~\x8d\xa9\xa6', b'lN\xb4$\xc5_0)Ge\x1f\xb1\xf9\xcaN\xa0]ry\xf1\x04q\xdes\x05\x04\xb5\x0f\x99\x10\xa8(H\x85\xdd\xe7\xc6n3\xed\x85\xe0\x0f\x07\x04\xc2\xdf\x8a@\xa1d\xc2&\xed\x9b\x1c\xd8P[\xf6\x0b\xae\x08\xa7', b'\x1c\x97\xdds\x8e\xb1A)\xe3\xeclI\x05E\xf8\xaa\tx\xe0\xe2g&!\xe0\x15\xb7"\x89\xc8\x1aI\x9am\x19\x91I]XQ\xef\x805\x00\xaft\x87\xe4\xd5\xc4\x9a\xf4\x8ff\xdcJ\xe4O*\xbe\xea\xcf\xac\xf3\xd8', b'ur\xb1\x9e\xe3\xcb&\x89\xb5\xb8\x1bH\xc2\x04\x1d\t\xfc\xd2\x02b-E\xfdR\x81\xc7\x85\x0c7\xb4L\x01\xffM\x95\x12X\x0c\xc7\xeb\x1dz \xd1<,\x95\x96\xe1G\xa0:\xc5z\xc4f#\xcd_\xbf\x1c\x04\x0e ', b'\xa5\xbe\xc9n\xd6N\x85\x10\xa4\xba\xb5\xc1\xe8\'\xf6\xe5\xc7\xdd\x94\xcc\xad]\x16\x8e\xc5 F\t\x988\xe0\xd6\xe8\x95\xc4\x04&,Ko"Fe\xcbB\xb3.e\x98kH l\x13<p\xf2\xa6\x1a\xf8]\xd7(\xf0', b'\x81\x902\xd63\x06\x968\x04J\xc5\x03\xae\xb1r\x84\xac\xc2\x1dy\xf7\x03\xd8Q\xdcN\x10@\xce\xc3\x9a\xa5K@\x13\xbe\xac\x11\x9b\x1dd\x8a\xa4*\x9e\x96\xc5\x1aQ\xad\x83\x165\xf6\xfc\x1b\xc3\x88!\xc1\xc0B\xc2\xde', b"5\xa4E\xb7\xff\nP)\xc1\xc4n>\x12\xd2\xee'E\xa7\xf5H\xf7\x1a\xba\xd2,\x87.~\xf4\x00\xd7\xc0\x8a\xe1\xe2\xca\x08\xb2\xe2}\xe87\x8e,\xaf?\x06\x87\x9e\xd6\xdc\xbaMY\xd8\xf0\x15\xb6\xb7\xe9i\x87\xdf\x98", b'\xb3\t\x01\xca^\x1eZ\xd3\xe2,\xe5\xdb\xdc\xb4\xe4\x01.\x99^y\x8a\xb6\xea\xb8W\x86R\x93\x82\x98\xe4\x89_\xed\x06\xba\xc7`\t\xa7\xa1=\x0b\xf0\xbe\xc5\xe4\x8c\x9dlj~\xa6\xbd* x\xc7\xc6%\xe5\x10Z8', b'k\xf5O"\xb4&\xf1\xf3x\x85\x83\xbbMgc\xa8\xc3\xd9\xdeI\x9d\xd6\xb3F8\xe8\xfcV\xdaP\x81+6\xe4\xce|6\xf5\xbf\xc0d\r\'\x9e\x8b\xf9\xd3uhd\xb2\x01MC\xb3\x16\xe2\x9aB\xaf\xd0\xd4\xec+', b'\x1a\xdak\x82\xc7\x9feT\x01\xb0\x99\x0f\x11N\xfa\xc3\xca\x10\xb1t\xb0\x16\x8c!\xf0r>\xa23\x84\x81\xb5UC\x0f\xfb/\xc2\x0f\x8a\x87m\x8budg\xdby\xb1)\xed\xed\x0b%\xd9\xf3\xacTDhI\xdc\xb8(', b'\x14\xa5\x90\x01\xe7p\xed)kN\xff\x1b:i\x07\xb4\xe1\xdd[q\xb1\x1a\xe2\xb1\x08\x9e\x88\xde\x97M\xeaO-\x9bb\xfd\xb7\xb4\x15O\xfb\xf6tG\xf4\x89C\nO\x16\x99\xc9\xed+\t\xc4\xf4\xba+w(d\x19u', b'7G\x97\x94&7\x00I\x06p\x83\xc4\xe7@-\x00Ei\xa3&\xa2YT\xbe\xbc\x9f\x82\xbf\r\x83\xd1]\x08\xfe\x16\xd3}-\x1e\xcf<W}\xbf\xd1eRe\xcd3\xab\x88\x1a\x14\xd3\t[\xe7\x03$\x0b\xc3\xa2b', b'P\xfb\x7f(\x9aV\x12X"O5\xe7\nP\x9a\xde\xd6p\xf7\xaeO\xa9\xf0"\xd7\xa1J"\nbi\x7f\xeb\xf3\x9a\xdau%\xbf\xf3n\x85\x85m\xcf\x1cf\xe0\x9c\x1e0\r\xbc@{\xc1\xb6HZ{\x98Q\xd0\x94', b'\xea\x95\x1a\xb1\xd5\x9b\xce\xdf\xd3)g\xf0\xb0\xa6\xe5\xb1\x85\xcc\x14\xbd\xc0\xd9T\x88\n9\xda\xaf\xaa\x11\n\xb6\xe7\xed\x17]\x07\x88\xf7\xac\xea\xc0\xd6\xd5\x8f\xb9\xb0\x8e\xc6$\xef\xb4\x81>\x90\x9aQ3Lt\xa95-}', b'\xb9\x99\xa2g\xdbl\x85\xf9\xe1M\x96\x86\xc2\xe07\xc7\x86o\xc3\xea\xa2\xfc!\x90\x01Y\xd0f\xbf=\x07O\xcb\xc9\xad]/_\x0e\xde\xb2\x12\x84\x16~\x1e\xb2@u\xa8\t\x89\x80\x83@\xcf\x7f(\xb6s\xbb\xa6\xf6]', b';3\xbel\x9e\xb3\xf6Du\x070-\x81\n\x1cI4\x00\xad&\xe0\xd2\xc5\xdf<\x94\xa8\x94\xf0<\xed\xc0\xff\xce\xce5=\x9f\xe9\xee\xf0\xe1kJ\x97\xc6%\xa1\xfbt\xa6z\xb5Jz>}K*\xba\xa5\x88)T', b"\xc5\xa2\x8a\x9a3\xcc \xbc\x93\xaa\xd2vv\xda\xf5\xbc\xdf\x07\xeb-\xccfc0\xc9Hg\xf0\x1f'PH\x14\xabCC\x05\x1fj\x10&\xac\x07K\xf5k\xc2_\xb8\xdb\xf5\xb9\x01\xa1\xe9T\xc0\x07Jq\xe4\xde\x14\x1b", b'\xb3\rw\xb8|-\x04g\x93\xb5xW\xe2\x0cr\xae\xa9\xb4rk;\xe3\x86\xc3\xa8\x96A\x8d\xc6\x92W\xb7\x16@\x8d\xa6\xa0EO\x12\xe5\x83m\n\xd2\xcb\xb4.@M\x17rt\x98r9\xf1\x13Y\xb3\x11;$C', b'\xff\xa30o\xe49f\xf7\xe9>\x85\x99Z?\xf5_GQ\xac\xb9V\x10\xf8\x04D:0 ~7\x96~#\xdeNS\x16o\xb2\xd9\x0f\xc1+\xda\x0b\xefi\x8c\xe1\xd3\x98M_\xc1\x83\x87h\x82h\xd3\xc22\xc7\x85', b'\xae\xb9\xad\x91ok&\x892\xf6C\xcd\xb7\x88kk\x02\xdb\x1f\xd9\xe0\x9e\xa1\xf5M\xac\x89\xe8=\x9f\xa3\xf9c\xa2)\xe7\xe5\xcd8\x0b\x07kx$Nr\x81\xa3u\x98w:\x90\xa1+-\x8f,\xa3\xb1?`\xbb\xd0', b'\xbc\x8a\xf0r\xd6d.8\xdf-a\xa0\xbd#\x14\x8b\x7f-\x86\x98@\xb9\x89b\x91\x87\xaa\x9eG\xc2^\x0f\x05\xe9\xa2\xacw\x86\xd4\xeb$a\xffTF\x81\xe6_\xbe\xbef=\xe1\xd4\xb5B8\xe3\x97\xee!\x91\xb65', b"<\xa2\xa9\x1d\x0b\x80\x18\xb0E\xc1\xa0\xd7\x1d\x818\xb3\xcf\xaf\xe6.D\xa6\x9e\x8a\xaf\x85\xba\xf6\xa9\xc8\x16\x8f.\x14\xf2F\xb6\x16'C\xc1:h\xe1\x81\xe5\x12\x7f\xd9\xbed\xba\xd04]\x96\xbe\xe2\xd2\x8c\xeb\xb3\x8fZ", b"\xecM\x8f(i'\x93\xcb\xd3?0\xf6\x82\x84\xbew\xdc\x94U\x90|vp\xbf\x85\xb9\xdc\xc7=zB\xea\x0b\x97e\x8f4\x1d\xa7oi@fD-\xd1\xd2\xd2itd\x93H\xab1\x03$}\xc5\xb7/C\xc4\xcd", b'\n\xe2\xcb\xcdr%\xac\x8eT\xd9\x99\x88\xd1`l\x90\x1e\x95\x03\x95Y\xab\xf5:\x02C\xe1\xfb\xd6\x17\x139\xa4\xce[\x9bi?\xcb\xca\x97u~\xb9]\xab#\xbbbt\xc8\x04\x8d\x9d\xc2\n\xf7>\x15\xc0\xa8\x9d<\xa8', b'\xf6n\xb9r\xb2>_\xc2Z\xa0@u\xe3\xae\xd1\x7f\x1cS\x0b\xff/\x06\x88\xe0\xd6\xc8"6E\x1e\x97\xbbQ\x88\xa3\x1cn\x01\x8eJ\xff\x0cE\xf9\xa2\xf3\x1d7^\xe3\xefjs0\xd9\x0fY\x8c$q\x87Agj', b'03\x0e(f\x00\xf5\xa2P\xb3)\xdd4u\x1f\x8c~\xbe\x1e|t\x8a\xe9\xa4\xf5B\xf0\xb2\xfe?\xc9\xa0\x1cLZ\xf89\x80\xdb\x19\xb4\xca\x8a\xd1\x9dY"\x8b\x9c.\x882\xc0\xc4\x11~\xd9\xe4\xf9"\x11\xd93t', b'\x13\xa3\xdfG;\xa8J\x83\xd9\xe82U\xdfNNb\x06\x13Q/\xad\xa1\xf4\x0b\xb4\x1f\xfb.\x94<K/\xed{4\xf2\xc4\x1b\xcf\xf5ZBp\xe4\xe9TS\x86\x8b\xb0|\x82\x1f\xa9g(9\xd0\xbf\x96\xdf\x18\xb5\xca', b'\xadl)\xa36b6\x9a\xb9\xfe\xf4\xa2\x10\xd6\x9c\xb8H-\xa6y@/\xc0U\xe5[\x02\x82"\n\x05\xf5+\xa0\xean%\x0eU7\xe0\xdb\x9e7IN\xc3\xb9O/\xb5\xd2$\xd77\xb9\xf4\x94\xb77\xc4\xa1\xc0\xa0', b"2&\xad\xb0\x1f\xb7;\xc6\x83X\xdf'Kj\x12w\xbf\x8d\xc4\xaa&k\xec\xc0%E\x14\xb8\x1b\xf7%\x8e\xfb,\xb1\xf8\x92\x86\x84&\x16\xc9)7at\x81NA\xd0\xc7l7\x93I\x16z\xc6&\x08\x0ek\xc8\x8d", b"s:\xec\x87Tx\x14,-\x89\xbc\xc0s\xd9[\xf70P#\xc9\\\xd6\x9a<z\x02%\x1c5\xca{\xb1L-f\x04H\xcb\x18o\xb5<\x05:Y\n\x1c\xc2QZ\x89\xab\xa9,]\xa5\x89\xa0'\xef&'\x98\x93", b'\x12\xf2\xb6Ijp\xc7\xa8\xa8\xee\xdd\xbf\xbc#\x81\t\xce1hWH\x00og\x13X\x96\x1bG~O\xfb\x9a\xaeQV\x81\xdaz~f,8V\xd9\xff\x01<Z\xd3\x01\xb6B\xe9\xd0.\xc6S\xb8\xa1h\xfb/$'], [b'vro;\xed\x1av\xf3\x93\xd2\xc1\xc6B\x0f\x8c/$0\x15Z\xeb}%\x15\xa3\x1b\xa5\x90\x11\xb0\xc3`', b'7M@\xa2\xc2\x89\x04\x94\xc0\xfa\x11\xe1\xee\xe3l\xbe\x8f\xc8\x1b\x86v\xec0\xde\x88\xee\x99\xc1\xfd$\xe2\xeb', b'V\x1d\x7f\xbd\x0e\xa8s}\xacW\x9d\xd1\x8e\xef\xe1_*\x94d<g\xfa+2\x1c\xb6p0_p\xb4\x88', b'\xbd>\x96\x19/\xd6\x9bx\xa2 \xf48\xcc\x8fO\xef\x0c\x1b\x083\x81\x13\r\x97\xea\xa0\x02\x94\x01\x7f\xe1\xfc', b'[,\xeea\xd7B\x8d\xdf\xa1\x85\xc8\x11\x8ao;@\x8er[\x06Y\xd7\x8a\x1f\xdb\x88^\x1cN\x9f[k', b'\xe4\xb08 \xe1Y\xd12\x92\xfb\xf3\xed\x02\xf09;\xa2uP\xc1,\n\x11@\x9d\xeaMb\xa2\x92@\xcf', b'\x08\xc9[\x06\xea\x86\xecI\x97!\xfa>@[\xf1\x19k4\x82\x8d\x81j\x1d\xc9\xe6\x08\x8f\xe4E\x92\xe1\x98', b'j\x89\xb7F\x1a\xfd\x84iI\xe8\xb8\x98\x8d*p\xee\xaf\xa4\xb4\x9bs\xbf\xc6\x807 ~\x8a\xf4\xd8E\xd1', b'\x92W\xa4\xf1\xaa\xa53\xf5k[;4\xbd\x98~I\x00\xc0Y\xce\xbc\x87\\?vS\xd6\xdf\x02R\xdb\xf3', b'\xab\xcf\xae\x87\xe4\xc0\xb0\xae\x13\x8d7\x81\x19\x8f\xeeY\xa2\xd1\xec\xc6\x901\xe0\xa5\xaci\x12B\xfb\x12-?', b'^\xb0\xe9 \xe6&^\xec\x18\xb2\xde\xde\x1eun\xe6\xc9Z\xee\xc8\x1c\x91\x89!\xc9MY\xb6\r\x1a\x8b=', b"\xd4\xc5\x96\xa5\xe4e\x84a't\xbf#U\xcd?\xa6Q\xf7y\xacv\\\xf8\xf4K\xf8\xdf\x81eTO\x83", b'\xee"aa\xf3zm)P\x0cU\x85\xef\x91\xef\xaa\'\xdb\xa2\x9d\xafB\xde\xe0Y\xba\\g\xb94\xd3\x00', b'h8T\xbc\x06\xbf<*\x8b\xd3\x96\x03\xc6\xb7\xa9\x8c\xd3\x98u\x15\xcc\x01w\x0f{\xee9\x03\xd3x\x17\xfa', b'9\xd7\xc1\x97\xccb\x17?\x1d\x9aA%\xafU\xf4\xc9\xc8\x14eg\xaa\x99;\xf5\x9f+\xfdLP\xb9\xcdz', b'\xcb}\xdf\xcc\xa5p\xc6\xbbOQS\xdf.a!\x0fw\xb7H\xe1O*\xba*\xcb\xfa\xed\x1a\xcbk\r\xd4', b'\x8b\xf4lS\xdc\xcf\xdf\xc1Q\x9a\xbf+\xd2\xdb!\xcc\xbf\x82\xd9\xdc\x08%S5w\x0c\x11\xb4\xa0\xef)\x89', b'\xf8\xc0\xf8\x12\x86i\xb8\xb8^i\xd8 &\xc9)\x11\xea\x8a?W<\xbc\x85J\xc9\x85\xdc`c\x19j\xa9', b'\xc6\xee\x9b\x8f%\x00-\xfdYM\xd0:b+\xa5h\x97\x8a3N\x19\xb0\xe4\x9d,t\xd0\xa0Q[a\xf2', b'"U\xdbD\x9a\xc9\xd2f\xcbX\xd3*\x16\xa0X\xeb\xa5\xa2#\xb7f7\x86c\xa0\xc6\xbf7\xc8D\xa4\xe6', b'B\xc0g\x03\xe47W#sI\x9fa\xa0{[\xbbQ\xd2c\xf4\xe9T\xf1\ni\x16\xb5\xe5ul\x7f\xd9', b'ML\xe0\x9e\xf2\xe7\xf3it\xe1\x12\x16%\xb8\xe8?\xd5#\xb31\xc8\x1c\x9f\xff;\xf5\x19\xf0\xb2\x02k\xe8', b'\xbb)\x8dJ!\xcf\xf2\xfb\xf5_[\xba=?\xa7\xd4\x0fF\x89\xde\x04\xb8-\xe8\xc7\x0e\xd4\x83U\xf9\xbb2', b'\xb3o?\x8f\xf2\xfcZ\x80\xb6\xa2L\xb3\xc5\xf3\xff>y\xe4\x1bp\x92[\xe1C\xd8V\xaf\xf6\x12\x82\xc0=', b'\xba\x99\xf4\xe9\xdb\x7f)5\xaaH\xf1(\x86\x03\x14A+(\xa1\x9e4\x85B\xd1\xdf\x906\xc0F\x94h\xf7', b' sV}\xea\x9f\xfdg\x84\xf6<\xc4\xa4P\xbf`\xe7Fp\xc8\xd5;"\xcb\xb1?\n\xa4\xf2\x8f\xb2\xad', b'\xd30\xb4\xf6\x10\x84\xdc\xaeV\x16R\x18\x92Hj\n\x13lM\x15\xa6\xf7%\x8bd\x8c\xde\xcc\x06-\xdc\x82', b'\xfc\xa5>|Cs\x12\xea\xc3x\x9bha\xa3\x8d#\xb3t\xc7Q\xa2n\xe7\x990n\xf1\xbc\x13t\xc6\xe6', b'\x9c!\xa6\x97\xba9\xa2\xddO~QW\xb0\x92\x16#\xcd\xde_\x11&\xf7\r\xc0\xc8B\x17W\xc2+\xbc*', b'\x9e\xec\xd9\x1dB\xf1\xf3k\xa6\xabX,\xa6\xdb\x9fl\x0b\xb6\xbb\x95\xd92u\xa8\x0e\xe4\x8bx\x87d\xd2\x8a', b'+^\x1f\xbb\xfc\x10\x04\r\xe5\x12uzHc\xcd\x13\xd2j\x80\xb3\xd1\x885\xd9\xfa!vEPF\xdf\xb5', b'/Ix\x13\x1c\xad\xaeP\x84x&\xb6\x93\x06_\xf9\x00l\x01\x9dW$\x86_u\xc7\x06\xa3\x98\x91P\xfa', b';\xc2\x94\x1c\x92\xa4\xfe\x86\xae\xc9\xcaR3\x95ZQg\x06\xa8\x81q\n\xc3\x8d\xed\xf1+\xe1\x9e\x18%\xb6', b'\xf5\xed\x88\xbcL\x85C\xde\xe1?\xee\xc0^\x0b\xd1\x1b\x86\x90\x1a7\xc25\x98\xd2i\x8eXH%\x96\xb5\xb0', b'*\x1c\xebDTp\xe5\xbfm`\xa3\x9e\x81\x9d*\xb0\xce\xba\xb1%0\x8c\x96\x8b\xcfa\x1cM[\x19}<', b'\xe8\xb0^\xd0\xfb\x0f\xc9X\xf6\xca\x9e~\xccF%q\x80\x89]\xfa\xb9k\xf5\x84\x816\xe2\x8c\xdb\xca@w', b'~\xff\xea\x1e\xb9,\xa5t\x17\xe6\x1f\x00\xe0P\x9c\xd86\x98c\xca?\xff[\xd4\xb6Z\xc2\x96=\xc535', b'\na\x03\xc3\x0e\xd4\xec\xb8\x15\x1b\x9bt\xffz\xfaU\xc8\x07y\xee\xd6k\xd8lf\xeb\xa5\x02\x89E\xb7\xee', b'Zt\xe8\x16p\xd5\xe58\xa9\xc3\x11<\x97\xe9}5;\xee\xed%\xe7; t*\xe5\x18_H\xb3l\xfb', b'+:!.\xba\x19\x82E\xfe\x9e\x96\xf1\xaa\xbd\xe7\x14\xc4\x1bX^hh^q\x01uI\x99\xaf1\xb3\x11', b'\x90\x1b\x84\xcd\xb9\xf6\xab;b\x06\xb8\x8fp\xb9\xa6\xe7\xc6h\xedg_\xcc\xac(hN\x89\xdav\xf8\x87\xdb', b'\xc6(\xc3dWk\xf0\xa1\xeeg!\x9f*r\x89;\xee\x914\x9b\x84\xc6i\x9c\xf4\n\x9d\xef\xdc\xcd\x83\xd4', b'\xdcY\xc4\x9aK1\xa2\xc8\r\n\x9bp\xda\\Q\x88%\xc7\n\xb7[\xbe=*\x06\xaf\x04Y\xf6[n\x13', b'\xd6\xc8\xe4&\xadb\xc6\xf5\xd2\xf7\xdf\xd7\x0b\x1af?\xed\xbd\x10\x11\x899\xcb]\x0e$_rg\x15\xea\xd2', b"\xca\x95\xd39A3\xe5\xe3\x04\x1f\xad\x0e]\xb0\xc0\xc8:U\x982\xe7\x01\x1b\xe9c\xd8'@\xdf6a\x03", b'\xd6\x16\xd5!\xa5\x17\xc9YPp\x01\xb7\xd1\x10\xbd\xed\x93U\xc3L\xe2`\xe54+o\xc6/\x86\x84D\xdb', b"'\x14C\xb4\xe3Q&f1)'nv\xc0\xb5\x95\x00\xbb\x97\x85\xd5\x8d\xb6\t\xfe\n4\xce\xdfG\xb8&", b'\xa5\xadK\xd1\xea\x85\rI\x00\xf7\xa4\x85x\xdb\xb4l2\x8c$h\xc5e\xd6\xf3\xe82Hm!\x8e\x96\x04', b"K$\x14.~g\x97a\x1a$h'a\xef\xf6\xdfr\xbfZ\x81q_\x9c2f\xed\x9b\x1a\xa2\x0c:m", b'\xfc(\x7fZ%\xda*\xe8\x07nE\xbeB\xa9\x82\x92\xcb!Yy\xcd\x80\xba\xcc"\x02\xfc\x19\xa2E`W', b'"\xbfJ\xf4\xf7\xe7\xe7_\xbe\xeb\xf9-\'\xb5\x80\x12\x93\x04\x98\xaf\xcbk\x9a\xe3\x8a\xb27\xce\\\xe6T|', b'\xa5\xcc\xebt\t;\xa9\xdc\xe9\xbcw\xeb\x17\x13-ve\xfcwg$\xe4\xbdF\xd4Lr\x87\x9e)\xcbo', b'Q\x138,\xc8\x94\xda""X\x1b\xe7\xd7V5\xc1+R\x90SC\xc0\xcb\x99\xd9\xa4\xf1\x88\xea\n\x83\x0f', b'X\xf7m\xf5\x1c\xad$K\x90\x80[\x98\xab\xef\xa5\x97]\xa4%:\xaf\xd8\xa6\xde\x812\x99\x98\xf3\x9f\x95)', b"8\xd0\xf1\x84q'\x87\xb4z/\x8bc\xca\xae!\xa7.\xaf\x01E?\x9bC\x87\xfe\r\x17L\xf5\x9b\xe2\xfe", b'\xb6=\x90\xae\xc6\x97\xe5\x04\x86\xf0t\xa1\xbat\xaa\x96\xb6\xf3\x9a/\x0f\xdda\x1e\xf3\xc6\x95\xd9\xecphy', b'\xeb|\x0f\x9da@\xa5N\xaf\xe8\x84.\xe5Bb\xb6\x97\xc0;\xad\xc0R\xe0\xe3]\xabca5/\xe3\xfe', b'\x03\\\x06\xa1Peg}\xc2\x9c\xc6\xaa\xea\xaa\xbd%\xe5\xd2l\x12\xda\x7f\xf9\xdf\x19\x02X\x91G\xba~\xd3', b'J\xf2\x9a\rh\xf4\xe4{xh\xf3Yuq/\x14\xab,"d\x8a\xd1\xa7\xa7L\xb7\x86\xbe\x1dkb{', b'\x05a\xdbz2\xdeI~\xb17\x9a?J\x18\x86"V\x97U\x04\xda]`\xd1\x8d\x07\xe3\xc3\xeeZzc', b'1\xa5\xf3\xc5l\x9bqb\xac\xe7\xee\xf2\xf29\xf9\xd5C N\x9ez\xfb\xb4\xd2\xdbs\x1d\x06\x9f\x06\x12\x0e', b'\x1d71/+\x97F\xa7\xf2\x9f\xd3\x00\xbc\xbb"0\x1c@\x9c\xb3\x94]\xcaz\x7f\xe3P\xe7\x00\xe8\xe8\x1f', b"\xb3\xed'\xd4*\x12EI\xc2d\xae#\xfc\xef<\x9e\x89\x07\xc7\x0e\x8d\x92R\x99P(\xf86\xe5\xce\xc5\x96", b'\xe6\xef\x83\x88\xca\x06\x85\xd7\xf5R\x96\xc49\xff.\xf2\x13\xec\x86\x9d`\xa9F\xee\x0b\xd0{\xc7\xa6\x13\x03/'], b'S\xba\xf9\x1e\xff\xe9u\x9cf\xef\xd9\xb4\x95\x81\xc7W\x1f\xf5\x1cx3\xf1\xac\x8c\x18}v\xca\xd52\xf3U']]]
# send_rg(rangeSig)

# upu = 1;

# print("I = ", end='')
# print(I)
# print("c = ", end='')
# print(c)
# print("ss = ", end='')
# print(ss)
# print("matrix = ", end='')
# print(matrix)
# print("L = ", end='')
# print(L)
# print("R = ", end='')
# print(R)

# if(upu == 0):
#     I = [b'q\xc0\x8bc2\x80\x80\xfb\xb7r2 \xf46\x0f\xbb\xed\x0e\xd6,\xe3\xd9S\x8e\xe7\xed@\xcc\x81\x0c8\x1c\xfd\xf2va3TR\x90m\x9c\n\n\xd8\x12\xd9,\xbc\xf5\x11\xef7ipg\xe8N0Y\x8ee\xdf%', b"\x8a\x85\xacWF_RG'2\x9bz\xf5\x15w\x01R\xf0Q(u\xbf\x18d\xc6\x04\x90\x91\n\xdf\x9c\x0b\x91\x02\x07\xc1\xfc\xb6\xc0D^S\x1b\xf0Q\xa3\x19Li\x9a\xed\x10\\\xdd\x9d\xac\xabqj\x13-4C\xfb", b'\x99y\xc9m\xefX\x1d\xebK\x1f\x0e`\x11d\xaaN\x9d*u\x87\x05}\x02\xc8\xcc@\x96\xfc\xbd\xa9v5l^\xb6(\x1a\x9f\xf7\xde\x84\x98\xfdyp\x0c\x9a\xb6\xdb1\xc6\x0c\x03@,\x0e\xb9k\xdaS\xc7\xb6\xff\xa9']
#     c = b"'\xf5V\xc5\xf2\x82)\x0f\x05\x9eA\xa2\x0f\xb9\x81\xe0\\\x12\xd4{\x15E\x8e\xfc\x12\xcb\x8ee)\x08\xabM"
#     ss = [[b'\xf4\xb1\xb9\x01\xe5\xe2lM\x0f\x8d\xf0\xbf\x7f\xdfy\xa8\xb0_\x0b\xe0\x0f\xf94\x16E\xf2V\xf2\xce\xd4[_', b'\xeag\xd84\xa3mg\xae\n\xdb2\xbc\xd3\xd8\xe4\xe9~W\x98\x1b\xe5\xa7\x96\x17\x0c\xb9\x1d\xc3\x85\xa7\x85\xb3', b',!\xdf\xf6\xa5\x92\x0e\x92\xeb]b{\xc4E\x80tA\xea\x0b\xd4\xfb9Y\xa1\x91{}\x01\x01\xd2\\\xe8'], [b'\x96:\xaa\xa1\xfd\xbaGb?\xa1@n^n~\xaadk\xd0L\xb0^GG\\\x01\x89\xfaq\xc8<u', b'\xf4\x0c\xd3\x1b,\xdf\n\x8cb}\xe5\x1cE\xe4\x00\xc4\xbc\xd1s\xc6\x89\x080%\x15x8`\xc6\x1an,', b'E\xbax\xba\xf9\x94\xff\r\xe3v\xa2i\x93\x05n\xdbv2\x9bd\x1a6\xcc\xaf\xc4\x1e\x8f,\xca\x07\x01\x1e']]
#     matrix = [[b'\x91%\xe8\xaf\xb0i\xfbh\xee9\x89&\x82\xa2\x0f\x15*\x92\x07\x9e\xf1\xc3\x84\xa5\xaa\xb6\xff_\x0c?a<j.?\x10x:F\xd8E\xd9\xad\x08t\x07\x8e|\x19\xf3\x87\xa7\x89\xe9\xaf~_\x00_b%;\x93\xd3', b"R\xa0\xc9_Z\x13\xbe\xb5\xe3r\xe4\xb7\na&\x9aQ\x8e>;A\x8b\xf3jg{\xf9Gg('\xdcf?\xbeY\x8e\xd7)\xd2W\xc4\x1bZI3-7\x9d\x1a\x19\xc6$>\xc8\xb5\xc0\x03F\x95\xef`y:", b'\x1a\x0f=\xc1\xa2\x90\xdb\n\xec\x1fVg5\xaf\xcf\xd9\xadTr\xdd\x03Z\x88-h\x12D\x06\xd6L\xfd@\x97\x15\xf3\x84uB\xd8\x18\xd1\xde\x18Z\x03\x9c\xf8+\xc2\x95\xb8OQc\x03>\xf0\xd6\xca/\x95\xd1b\xc0'], [b'\xd0\xa3\x91f\x80\xb6\x1dq\x1e\xefm\xbf\x08\x9f\xd6\xf0\xae\x86\xb7\xd8\xcc\xcd\xb4\x19\xd2\x82\xa4B\x9d\x8e\xe5\xd9\xe96H\x8b\r\x1d\xbeG\x14L0\xe4\x96\xf5\xef\xa1\xea\x89\xb5\xc3\x17\x84\xf7\xa9\x9fL\xe9\xfd?\xcc\xa4\x8d', b"~\xc0\x1d\xcdS+_\r\xec\xb6Ew\xac\n\xae;kyf\xcd\x00r\x11Mv \xc1`\xf5\x05f\x84\xb5\xf2)\xd8\x89~\xe7\x89\x8a\rIb\x15\x14#\x886e>\x03\x9d\xc6Y'\xaf\xb9\x96\x15\xcc\xaa\xeda", b'\x84\x90\x1f\xf9\x83\xdf\xdd\xc6\x91VE\x99\xe4[w\xe4\x04\x03,g@\xbb>F\xfb}\xf8\x9d\xff5&\xb3\x10.B\xb0\xe2\xde\x85\xbf\xe6R\xcb5\x99-\\\xe14\x92]l\x10\xf8\xe8\xfaB\xcf0\x84\x11\xe8\xf8N']]
#     L = [[[67568219278872063116858731286494094426526800021979047794231976327118747170869, 4124190802190768737775677903319986613278382390222016340637316022983215513951], [46641593214569842105539997646855453721704848548863602426668361867957162535410, 83491591937706361677055271494614659440509889704610681787481198916046399631745], [14173759417892718798002834245712052388429749841269886368695202810622651152182, 31373863148647571773452438583396577846309280139036828349113307581326624191833]], [[78801145352555159339513583962704496235407556387744775751375136652795140956258, 101092838777187931716179914931287066081957677419110531383717730505680516974757], [111448400435557596065604471457935035895276183210779941806004156927440360105758, 21255117225304034008510093823957577381882000064380536491866085372943723083579], [59361044430883609720657060515938544433618933260609749420965371432909223799009, 41554280199625242679513783979921334403875139778410686312899620239877156442268]]]
#     R = [[[88166592521677660875561116612873821404620222753600492098689398187623435611129, 34949305312588355594419135378409933446493941130282977849679070377922577585333], [79378051287249561629292263540481953767796307454786187664433011406507282425540, 49821777734207903760215127861024368170082158648811869920196480226167766133973], [38148449668158749289165377848720927370910678745245024081894245399513925718061, 74342531632521422242417623596467069192469074355442350577403624877306094188903]], [[5905088600175110656211302465017808401270270836803172573975504241952061909806, 57276724663561780559826149283786925648514763815542425453754812051511526033383], [30394712966506654142445613665813849351445412212753691625890997522176565299714, 66992915390068631033660621189564147531739819295224793360169282471566346754438], [101827451213677863453391062100079656748656651418103194190418965897085850185119, 14909169240030856436378977082027046791714731199379557039640355049357007351253]]]
# send_ring(message, matrix, c, ss, I)
# P1 = b"\xaddEd'\x9f\xef\xe1?&J\xc3\xb3CpT\x99\xeey\xd6\xfc\xf5\xb9\xcd\x0f,/\x06g\xe4\xa9\x83\xde\xca?X/\xab\x17\x16\xaco0S\xbe\xad<Hu\x00f8\x19\xcd\x00\xfd\x82O;Ic\xe0\x1e\x90"
# P2 = b"\xd2n\x1c4n\x14\xc6\xd2i\x9c\xa1\x08\xf0\x04'G\xfd\x9b$\xc5\xf5\xf6\xf4\xe9\x94D\x99*o\x89P\x98\xc4\xd3Y\xd6E\xc8\x04\x9f\xc3\xde\x1d\x81\x82\xcd\x8f\x03)\x14\x1f\r\x08d\xfco\x83si7g;\xe1\xb4"
# L1 = b"i\x90N\xc5\x1aYO*.F\xb71\x92V\xffCvT\x98\xb6C\xfaa#g\x14[\x13[\xab\x83\x99\xe6\x91{ \xee\xc8\\\xb4\xfd\x84}\xedG\x02\x126\xa0\x10\xb6\x11'|\xdf\xe3\xec\xbcw\xc26\xa3\x99\xee"
# s1 = b'b\xdf0\xbe,\x1d\xdaj\x19Q\xa2\xdf\xee\xf6\x95\x0e\x80\xdc\xa2\xf8o\xe3$\xb89\x96j\xaf\xfa>\xce\xe6'
# s2 = b'\x99ti\x8eO\xf1\xd6V\xcb\x1b6\xfe\x81\x97\r\xd9\xa3\x0ea\xc5t\x1d\x1ca[k\x8fD\x1a\x7f\x97;'
# VerSchnorrNonLinkable(P1, P2, L1, s1, s2)


P1 = [b'\xadX\xc5\x19\x9ev\x0f\xe1_9\x91\xb2\x19F\x04}qYB\xfa\xbd\xbc)\xd5\xb6\x9e\xb3\xablC\xc8C\xfd\xdf\xb2\x8faW\xbarzN\x0f$\x83\x1b\xed\xc6Fw\xfd\x0cZ\x13\xb7CD\xc5rIxt\xa4d', b'\x92\x11\x8e\xeb\x10t\x17\r"e\xfa\xe8\x89\x9ct;\x06}q\xf7\x82\xa8\xfd\x8as9\xf8\x15\x8b\x02\x9f\x93\xa8\x04\xed\xd1H+I\xfc\xd1\x99\x12p\x85\xa4\xe0\xfa\x9c\xe6\xc8y\xf2\xa6\xb2\x11\x15\xff\x9d\x1b\xd2\xd3{\x86', b's\xcb\x85\xcd]\x1c\xdf\xc4\xeb\xb5\\J\xdc6\x15\xac\xff\xd7"l\xba\xa3e\xfdL\x05\xad\x19\xde=*\xce\xf9pMA\xf3\x0c\xe2\xe0\x93\xd4\xb4\xc0\x13$\xc1\xd2\xedTGC\xc9\xe6\xdf.\x01\xf3\xe3\xcb\xc1\x8b\x84O', b'\xbfX\x9c\xd5\x06\xe8\xdeO\xab\x1f\xd4\xbf\x8f \xba\xa4\xcca\x98h\xdf\xd9\xa3\xa3M&\xeb|\x91\x8e_\x01\xdc*\x99\xed\xf6\xb6\xa1\xfb=Q\xf4\x0f\x06\x17\xdb\x1f-\xe0)6m\xcf\xb4J\xbe\xc7\x86X\xa0JR\xed', b'\x8a\x08OS\xb2\r\xc3\x8dF\x12*\nA\xc5\xbd\xc7#LGI\x84\x82\xd8\xa8/\x9eS\xec\xbd\xa5d\xf9\xd0\xf1yi\xf2\r\xc0\x9c\x1b&\x16\x92\xd46\xae\xe7\xa8\t\x02z\xbd\x96vm\xf8/j\x9c\xe3\xbc\xff\xf1', b'\x1ed2\xf3.(\xb7\xf9@m\xb6\x0e3v\xb1\x81\xb8%\x8eR\xed\x1d\x8a\xcc\x932"T"\x17z\xda\n\x8c^\xd8\x19\x81I\xd8\x1d\xcf\xa1\xe6\xb1#SuY\xa0.\xcd\xc4\r\x1b$N\xf8SjAo\xbd\xe9', b'\x8f!Z\x80\x89\xf6\xfa\x93t\xed\x90\xa2\xbc\xbd\xc6\x86\x1a\xf2\x00\x7fg&\x04\x1c"\xb0\x0e\xd3\\\x1e}\xb7b\xc8\x94j_%g\xa5\xcb\xd0l\n4 LV\xb0\xf7!\xde\xc3\x1b\x95o=]7\t\xd7\x87\r\xbf', b'!\xf9\x80\xffa\xac\xa6\xf6\xe2h\xe4\xf6E2\xccE^\xc8\xa3\x1b\xeb\\\x19\x13\x1e\xf7T\xc3d\xd6\xd8F\x18y)\xa9\x91eh\xb8\x99\xcby\x0b\xa92\xb4\xaa\xee\xfc\xc6\x8d$\xe6Z\x11$\xd2\x02\xfex\x84\xa0\xf0', b'rM\xd8$\x02v\xe5\x18\x93\xa3\x1f<>\x0c0Tt\x114\xcb\x0f\xf8L\x839\x08M\xf3K\xeb\xc3\x06f%\xa0$\x12X1&\xac\xaa\xf9f\xc4W#\x95\r\xc0\xf9\xe3s/b*\xbe\x8fT\x8aZ\xec\x038', b'\xa5\xe4\xf2M1\xa3\xe9\xb3P\xa5*\xc9\x93s5S\x89\xde\xc04\xb8Y\xaeFTZ\xb93\x10\x15\xae\xec\xa7\x01\xe6\x8d\x04\xeb\xbf\xf3\x03|}\x12\xdf\xf6\xeb\x95\xa7S\xe9\xf0k\xed\t\x0f\xc2\xd9\\\x8f\xadO\xd7\xdc', b"\x8a\x9f\x032\xe4$\xb1U\xefnx=\xf2\t\xba+\xa2\xdd\xb2'\xfe\xb4h*6\x19(\xad\xb8J\x143\xc6NR\xb7G\x82\x0c\x01\x0f\x05\xcfi`\xbfTU\n\xbcD?\xa3]\xd7\xc1\xa2`_lp\xab5\x9a", b'3\xf6\xf6\xec7$3\xa8It\xb0\xd3R\x07c\x83X\xf4\x8e\xf9<6b\xad\xe3\x90\xdf\x8b:,Z\xe2\xb7k\x07\x10K\x07\xca\x98rfvy\xbe\x00\t\x1eF\xb9\xa7{C,\xb0\x8c\x8dp9#\x9d#O/', b'\\\xc0\x0c\xb4\xfc0>\xc8\x96\xfb\x9a\xd5d\xe2p\x08+:=\xaa\x10\x94L\x00k\xdd\xf63Xn\xc6\xd9\x9aC\xb5\\&\x12\xca\x95j.p\x80\\2@\xd2\xcdY\\:[\x94\xe0\x19\xabEi7\x14\xb7\xf0\xaa', b'\x7f\x98\x87\xbe\xe2[%\x8e\x11\xa1I\xae\x17\x06\x92\xff\xd4\x01\xe9\x8f\x99#\xab9\xa9(\x0b\x8f\xad\x1dEG\r\xf1!\x1eJd\x8b\x0f\xfc\xc2P\x99(\x03<=P?a\xa7\xbeo\x1d\x86\xcf\xc4y\xe5\xf9\xf3\n\x0f', b')}O5\x8b\xc0\xa4>~\t\x95\xb4\xf3\x9c\x80\xe6\xbf\x8e\xacyER\xb4\x03V\xdd\x14\x19z\xc4\xf8\x82\xaf\xa4z vU\xa4\x84\xf2\x8d\xd7\x91\r\xf7v\x16\xa5[\xff\xd1o \xca\x91k\x90\xd7=j\x84\xfa\x12', b'\xad>\x87n\xf1\x04\x17\xb0\x89\xa6\x17\x02\xc9j\xc6\xffg\xcba)?\xfe\x9fryP\x82x\xf8A\x99\x86,\x05>Sy\xf8\xfc\xfa!z\x16\xe5\xc7m\x99\xdf>U\xd0-\xe7\xd3\xd1,\xf9\xe6@\xdfI\xc2\xde]', b'\xaeO\xb6\x17,\xfa\x80n\x01\xaf\x96\xe3\xafN\xa6_HCs<*\xbb\xa0\x0cj\x82\x9f\xdb\xdcr\x1c\x06\x8a:<\x15\x96\rF\xd50i\x8dV\xe1\x0e%&\xaaV\xbf\xa32\t\x1a\xc78\xae\x91M\xdc\\W?', b'\x8a\x17\xef\xf5\x9e\xb6z\x96\xc3\x87\xfc\x1f\xd6\x12>\x0f\x05\x8a\xe3\xa3\xeco\xe1TUs\xaa\xc7B\xf8\xd8l\xcb\x198\xd89\r\x8a\x91\x1e\xe0$\xae\xea\xacG\xa6\x9a\x14S\x0ff\xef\xc8\x90\x140\xfb\xb2\xd9\x8f)\xdc', b'\xa0M\xfd\x00\x1e\x8b\xa6\\\\+\x12x\xe3\xdf\xbf\xa5Bs\xc8\x92\xfe)5\x8eF\x06\x08[\xc0\xbb8g\xf8e\\\x03\xa7\xdat\xfe\xcf\xb9\xb2\x0b\x08\x00#\x8e\xf5J\x1e\xbc;3_\x05\xeaW.\x165)\xdc\x0e', b'\x80\x97Ya\xc4\xdf"T\x8f\xeb\x01\xebV\x01Xb\x03H\x8d\x9a\x96\xd9m\xe8\x8d\x02Y\x10\x15\x08\xc6\x02\xd7\x82`\x1c\x04\x80\xa4LeD\x8aR\xe9Dd\xb8py\x90\xff\xbdY\x14\xf4k\xa4,\x8a\xa8~?W', b'M2\xfb\x7f\x17\xebt\xd0\xa2\xdec\xf3\xab\x99K\xa2g\xadn\xabcRSH\xef\xcc\xce\xcb\xa7\xd7\xe8\xc3Sa\x83V\xdb\xf0O\xac\xc4\xd6\xdeE\xfa\xc6H\xba7<\xc2\xa0 ]a\xaeuQ\x7f\x98{\x97\xa4y', b"h\xca}!6\x88\xe0\x8b\\L\r\x13[h\xdd\x90\xd8&\xdbqm\xa9l)\xbd\xb3\x0b\xb0M\xba\xc3u}\x1a\xb8\x8d'\x88\x18\x91n\x8a\x88\xb6\xfazL\xa2\x1f\r\x9d\xa3R\r\xbe\xf6\xafEz\x89~\xc4\xd3]", b'\xd2\x91Z \xad$$\xfc\xce\xa0\x98\xd6$\xb3\x16\x891a\xc9\xb3\x98T\n\xb4{rhS\x01\xa7s\x83TgS.\xd6f\xe2\xda`\x93w%\r\xdeJ6s;\xe0\xa1\xd2\xc2D\xbdC\xae\xe1\x0e%;\x9d\xcb', b'i\xd5)\x16\xc27u\x16K\xc9;X\r\xac\xbb\xbd\xc0<b\xea\x97Zi\x95\x02\xf1\xf4\x05Kd\xed6F\xcf4\x19\x98^/O\x1b\xc9:\xe3A`\xadLH\xfeE\x87\x1a\xb1@6<5I\xf1\xcaCZ\x9e', b'k\xc3p\xd8\xfd\xa7\x03|\xed\x89|\xb0\xd8!\xeb4B%kzq\xa1\x94S\x98\xd3\x0b@\xa4\xbe\xe2-\xc5\xa3\x06aR\xf0\xe5\xbe5\x19\x8e\xccZ\xeb\xd2)\xc7*T\xe2\x14\xcfoH&\x88\xc0v\x92\xad\xd8r', b'\x7f\xad\x86X\x8e\xfa^c)*\x8d,&\x18\x16\xeez\x0e\x8e{%\th\xfe(v\xf11\x17\n\xf5\xfa6\xda\xab\xe3AJ\xd5\x16Y\xc9\xfd\xa9\xe9p\xd8\x94\xf2\x03UO\xa7\xb7\xe7`\x1e?_guu\n\x93', b"\xc4\x18\x04/\xe2\xfd./j\x03[P\xf2Rz\x89\xe7;5\xe9|\x1e\xed\x8b14\xfarL\xe5\xb7\x8e!\xf6\xdb:\x91Q\xea\xc4'<u\x01\x89\xb3\x9d\xdd\x96\x9c7\xce\xa8TR\xa9\n\x14\xedC\xe8w~\x90", b",OU#\x16\xa3\x97\xa2\xf5\xb4\x10*;\x8d\x0c\xf4C\x01U\xf4\x05\x81\xb47\xd0>q\xbc\xe1\xf0jQ\xd7f\x11\xfe\xa6V?.\r\xcb\x9aL<\x0fb\xab' \xe4\x15\xc7\xe0g\xa9T\xa6\xe8\xe6\x99n\x9b[", b'\xfcD\xea\xb2\xde\x01\xf3\xfc0>\x8f\xf0\xaeAW\x94\x191\xbe\x8b\x9c}\x16\xae1\xfb\x97H\x00Y\xe7q\x0cw2\xa7\xdb)\xb6nL|\xfd\t:\x84\x02\xf1R9t=_\x94\xee $\x81\x11\xe5/\x97\x7f\x97', b'[\x85\x8c\x10\xc0l\x0f\x96b\xa1\x94\xd0\t\x97\xa3K\xae#Y\xfa\x95\xbf\x18N\x83\xc4\x00\xab\xa6\x9b\xcd3\x02\xbe`\x05d:\x12\x08\xaf\x8eI\x98(\x10\xfb\xf2\xea\x9d\xbc\xd4\x11W~\xae\xe3\xa7\xe7E\x03\xaez\xde', b'\xb3\x83\x8a5[\x16t\xb1L|\x04\x9d\x83\xa2F\xf0\x7f\x8d\x1d\xaf\x9bx[\xe1\xd6e\x9e\x91\xbcCtLmw)\x00\x1b\xb7\xcf\xc0<\x92\xd2\xea\x05\xeb\x7fG(\x1ao\xc8\xb9k\x8b0\x1d\xc7lz\x00x\x81\xfc', b'\x0e\r1\x16\x0b\xd4\xda\x86\x9f\x8d\xbe\xb8L#[\x1cn\xe7\xa5/:\x19<\x08]\xe7\xf7\xc1\xbcj\xa2\xa5\xab\x01\xc5>\x98\xf9q-\x0cf\x96\xa4>Pc\xf8\xaeH\xe1x\xe3\xdaID@;\xed\xd7\xc4)\xaf\xe6', b'0\xf6\x87Pf&\x99r\xbdMGr7\xabg,a2\xdfc\x98\xcc;A\xa3\xcc\x9e\x0b\x9a\xf6w\xdb\xaf1\xb84&\x927rI\x1d\xab\xad\xf3-(T\xf8\xb1\xe0\x11\xd1\xfc\xccd\x9e\xbe{j\x83\xc4j\xa4', b'\x94\xc4\x15\xb0~-\x1c\xddq:\x08I\xdeA\x1f7\xf9\x81\xbc\x12\xbd\x90?3\xe3c\xa4\x8a\xb3m\xfe\x88\xbe\xd8\xb2\x83\x84\xea\\\x06D\x16\xa22\xde\xc0@\x80\xf4S\x0e\xd4\xd3%F\xb4S\xfd\x0e\xf3\x80\xf1V\xf4', b'\xcb\xb3\x91\x9d\xcd\xe0\xfb\xde\x84\x86\xfe\xb8u\xecX\xa4\xf6.mgi\x00\xb6\x9e\xcf\xfa\x8f\xc7]\xf9^\xd3\xc9\xb9f\x11\x1f\x9fb\x8f\xa6\xe8\xd9\x97\xeb\xa2q\xda\x1fS\xa5X\xa5F]\xd2*\xf6tD\xce|a\xdb', b"$\r\xa8\xa8i\x92\x05\x99\xe8\x1dt\x89\xf1U \xfc\x85F\xffx\xbfw@\xb5?\xe7\xf6\xb2\xc9\x90%\xe2w\x93\xb0Izb\x86B\xa1zN\xf6\xe0B\xbd \xcb\xcd\xac'\xa1u\xcb\x14\xc9\x01\xb4\xbag\xb2a\xee", b'\xd8Z\x8c\xe0\xdd\xad \xe79\x01:[\x8fR\xb9\x13\te4\xd0\xa4\xa82\x00\xc7\x07\xe23\xe2\xc6F\xe0\xb6\xef\x82\xca7\xe3*\xb7\xf2/\xba\x81\xd4i\xac\xa1\x01\xc6@c\xe7\xf8\x02\x9e\x01\x95}\x1cE\xd2\xf7\x16', b'O\x1dBF6L\x9eZ\x1b\xad\xcf\x08\'\xee\xb50\x9a s\xca\xa1\xb3\xbd\x02\x8d"\xcc\x82<|\xa4\x93\x03Ra\xb37FAN\xa0\x1e\xe68\xc8\xf6^\x15\xe6\xc4\xefk\xf9\x92]B\xceC\x10\xe1\xa2\xeam\x1f', b'\x1c\xdd\xb0\x0c\xb2\xffR\x01K\xde\xcan\xb9\xd50\x1b8\xbc\xac\xacN\xfd~1\x86\x9ai\x19\xa2\x08\x11\xefPat\x88\x0f\xe0\xd6\x8a\xc1gfY\xb6\x0f\xd0\x9f\xf0\xb8\x15\x1eXFv>\x80\xbcBB\x0f\xf4\xa7\xd4', b'\xdc\xc3*\xc2N\xe4\x103&;\x15\x7f\xd1h\x88\xa9O\x8d:\n\x91V\xcb<\xd4\xd1\xb5\x9b3\xf8\x88\xad\xdd\xccQ\xaa\x08\xef\xbe\x89>\xf0:\x1eW\x8e7\x11\xa4\xd2\xe6\xaa\x8a\x98\xd5\x89V\xb1\x08\xe7x\xe0\xa0\xe1', b"\xa8\x19\xeaK\xcde\x17\xc6\xbai\x93\xda\xe3\x7foF<\x9e+\x96@o\xe0\xf1r\xa5\xb1\xe5\xfbR\xa7.\xce\xef'\x91A\xe2\xf9\xb5p\x01\xf8\xbc\x08\x0c>\x92\xe0\xb4\xb2:*\xb82\xea&\x8e\x07#\xb0\x9f\xd9\x02", b'J\xa0\x8c\xf0\xa28AZ\xd2\xc1*!\xe2\xec\x0f\xfa\xda\xc3x\xf4\xed\xde\xb2\x89n\x05\xa7\x0c#)\x9d\xab\x16\xb6(\xa2|-6\xed\xda1\xd6HU\xaa\xa2nLA\xfda\x15\xe7\x9b\x8a\xa0F\xb3\x14\xf3\xcb\xdby', b'\x99\xbb"l_\x82\x9b\xa5\xb73\xf7\x99\xa5"ZH\x0f\xcc\x98\x99\x91\xd7\xa3M\x01\x1aQ\x9c\x1b\xaa\xfck\x0c\xff\x13^\xa5\x8a\x0c\xc7{6\xed\xc0\xe8\xed\xfcS\x0bN\'<\x1a\x04\xfe\xcbc\xe1\x07{\xb3\xe0u\x84', b'\xdf\x0f\xe7I\xb2Vt\xbf\xd1v\x1e\xe0Z\xaaK?\x8aR\xfe\xa7&\x9cu\xcei4\xe54\xd7\xeeG$V\xc4\x88\xa7\xb5\xe8\xd3\xfd\xec\x97\xd8DT\xf84\x9f5\t\x93\xdf\x1e\xf5\xa7\x03\xe0\xd9nA\xdb\x96f\x1a', b"Z\xbb\x9f\xa7\xeb\x1c\xd6e\xc1\xac\xd0\xe8X\xe0\x81\xc85\xab\xcc`\xa8\xd1\t\x10\xb7\x0eg\xe8\x97\xa9\x17\xc9O\x8d\xfa\xa2\x1b8\xfd'\x02\xe8l<\x98]\x886\xd43\xbe\n\x9b`\xe8g\xa9\xc4D\xb5\xa64j\xf5", b'\x0e\xba\xb7\xc3\xca\xc4n\xfc\na\xba\x08\x86\xab\xc5\x8e\x94\\\x15+:"\xbe\xef65\x1d\xb8\x14U\xfe\xaa\x85\x96 _JS\xcb\x8c\xad\xeb\x02\xef\xa1rVG\x13\xef/\xb9<\x15\xbc\xba`t\xe7\xb5\xcb\xa3\xe8\xe9', b"yR\x02\xe9\xe5\xe4\xf5'\xf8^\xca\x0b+t8\x81\xd8r\xda\xf2\xedd\x0c\xedT\n\xdf\x83\xcfI\x13\x9f\x97]p]\xc9\xd0]\x98\xbf\nP\xcf\xcd}\xd2m\xed!c\x8f\x03\x00\x90\x9b\x9cckr\x1d\xb1C\xe7", b'n\xe5\xf5\xafCZ\x06\x07x\x8ch\x8e\xa6%]uvx\xca\x07u\xdf\xbd\x9d\xdf\xb2\xe8\xb5Pa\xd3\xa4\x88?\xd1\xa7V\xd8\x19\xfd\xbb\xff}\x0e/\x01\\\xdf\x83\xab\xc7\x15\xbd1A\x8e\x18\xa5O\x99n\xa8\xe5\xcf', b"a\xc4\xad\x80\xc6\x98r\xde\x03E/\x02H\x90\x95P\x8d\x90T8\x05\x94s\x87\xc2'\xd3\x0e\x1aZ\xc8?WiB\xf1\xfa\x15^\xed\x93\x99G\xbe\x00b\xa0\xf7\xcc\x85|\xabB\xaf\xab\xd6|\xed\xaff\x87\xf1\x8cX", b'\xe6\x95\xb6\xda\xf4\xc4,\xd8\xeb\xa7\x89\x1a\xb69\x95\x1f\x00\x9e\x11\xe1\xa9\x16h\x96\xfaI\xda?X\xedI\xa1\xee\xed\xf5g\xaa\x18[J\xd6\xbb\xeex\x9ff\xac\x8cyf\xf3/\xa5\xad\xdd\xff\xa5\xd0@\x16[\x7f~\xe5', b"\x8bXZ\xeaJ\xdcW=A\x10H5\x17\x8av]\x1d\xec\xe3\xd0\xf7\x8c\x970\xcef\xe2h\xd1\x05\xfb\xf6\xdd\xf8-\x03\rQZ\xba\xe4\xbe\x00\xf8\xddG\xa9\xba\x1c'cGto\x83I\xe8\x0cJ\xa9X\xf7v\xed", b'\xef\x13E\xa4\xe5;n\xc4Z\x8b\xa1\xaa\xeb x~\xf9]\x98\xa63V\xf8v\x18+]\xc3\xdb\xda\x1c\xb6\xb8\xb9\xa9\xc6\xc1`\x11L\x19\xd4Z9\xb0\x81\x94\xf6\xc8m\x94\xe6T\x1d\x9eYSSwF3dU\x9d', b"\xd0\xa9m\xa3\xf4\x12]\x8e\xbe\xd8_\xffr\xd9~IP\xfau\xf5\\\xf0\xf6E\xca\xb3k\x16:\x15Z\x1e\xbb\xbd['\xba\xd0\xe9\t\xc24O9G\xc0\xe3\x16`W|\x876s\xf4\xff\xe7\xfe\xc99b\x0598", b'J\xffy\xceb BF\xac\xf3d\xe9\xa9Go A.@\xb0\xd8\xd07pD\xf5,vX\x14\xc3UY\xa6\x17\xb9\x84\xbe\xe6\x01/\x91\xadk\xc7\x1f\xc3\xc9\xf6\xbee\x03G\x1d\xc7\x89\xb5s\xe88\xe6q\xfa\x87', b':c5C\xcb\xb1\x88\x19\xa2\xf4\xf0;W\xc6\xad#\x00\xd2\xd4=\xfdF\xab\xa9\x1e\x1a`iZ\xeaG\xedt;\xc9\xf5\x9ag\x07f"\x91M\x18"*zY\x05\x94\xc9\x7f\xbc\x11\xce\xd5W\xde\xd9\xfax\x8eUQ', b"\xdf\xcdt\xbc\x9eRyLW\xc2\xcfre*'\x8cS \xbaLeN\x055\x0f5FU@\x9e\x85Z\xe16\xd7U'q\xcfv\xa3\x07}w<\x851\xf9N4\x9cP\xf9u&\xadN\xcf)\xb5\x00\xcc\xdc\xd2", b'\xbe\x82\t\x8b-\xc4\x07Uj\xdd\xefU\x1d\x13\x14\x0e,\xe4\x10\xddk\xfd\xc0Ww\xb6}\x1d\n\xa7\x03\xa4\xf4\x92\x9elF\xc9\x8c\x10\x0c\xbb\xc6\xe2\xd7,\x14\xfc\xa7P4\x80\x84d\xd8\xe09.R\xf0\xe7\x10\xea\n', b'\x98\xcde+\xb8:Dhm\xa4,\xa4\x9d\xee\x89~K\xec\x93\\\xbb[\x05\x10Z\xcf:\x02#L\xd1\x0f1\xafN\xec\xebJ\xfb\x13\x97Tg\xfc, \xb1N@nU\x14\xfa\xdc\x81\x91N\xe3\xb4\x91\x14.\x1c\t', b'\xd9o\x17\xdeE&b9\x06\xc49!*3\xf6P[\x17Y\xb2\x009\xdf\xa8sTS\xed\x82\xf3\x8d\xca\xc1\xff\xfd\r\xd1F\xb5\xcbS\x95\x8e\x10\xb2\xd2\x9bv\xd4\x86\xe8Sr\x8c|`\xf6=\xe0\xdd}\x18\x8c\xb8', b'\x97\xd4<\xea\xc0\xff=C\xaa\xfd\xde\xa4\x9c\x01\xae`\x0cv5\xa7\x92ug)\xe4\x93C\xec\x9a\xbb\x8c30\xab\xdd9\x16\xa2tI\xbd\xe0\xcd\x8d\xe4\xe4\xce\x12\xf9dix\xdeE\xba\\m#!\x175\x12\xe0\xd2', b'*\x11\xfd\x02\xff*Z|\xa2\x8e5 \xae_\x06\xd3\xa7_\x12\x92\x05*\xddG\x9f\x05\xceK\xadS\xe7a|\xda\xa6\x8b6r/\xcf\xe1\xef\x16\x90\x91\xc4~\xea\x9e\x1f\xd9y\x06-\xbe\xddJ\x02\xd6bh\xb9\\\x94', b'\xf3\xf4)\xef\x98wM\x85%\x98\x95\xe4\xa19\xcb\x08\xaf\x15M+\xee\xdcE\xad\xab\x1a\xbc\xe0\x15h\\|\x81\xbaq\xdd\x10\xe6\xc9\x80m~\xd5\xee\xe4\xb1\xdac\x96\x80)\x08\xcc\xbe#N\xea\x12\xfa\xb9\xb63X\x8d', b'>\x01\\\x96\xb3F#\xe2}\x8c=k,}\x1c\x94\x85J\xabx\xf7M@&\x0b\xf6\xf7\x16\xd4i\xdc0\xef\xc2\xdb\x8b$\xe0\x16\xd7\x9a\xbb-Z\xc8\xd1\xef\xbc(d[\xe9\x91\xd7\x18\x19\xf8\xa1~}\xa2\xc3\xb9L', b"\x07\x0b\x99\x87!)\x88\xa4\x9c\x07D\xe0\x19\xae;{\xf9\xc6nzb\x84\xc9%\\(\xfd\xc4P3L\xc3\x19B'\x16k\xfe\x13\xfa\xeb\xaf\xd7t\xf0Wg\xa5\x98=\xf3\xd3$\x15\xa7~\r\xc5\xd4*\x05\xe6r\x8e"]
P2 = [b'5\xc0\xeb$\xad\xeb\xc1\x81\xec\x1c\xea\x9f\xdc[\x0e\x92f\x17\xe59\x83\xb0\xa3\xdb\xe0\xbd\xf0p\xe0\xb0\xf7[6\x1c\x8f\x05\xa1m\xa8\x8e0>\xcf\xea\x81\x044-\xf6\xce\xdb\x1b?\xa7\xde\xef*\xee\xd3ZY X\xdf', b'|\x89\x91 \xe7&{\xbb\x87\xce\x8a\x93.^\xaf;\xa1\xc4\x03\x023_r\xf3\x08\x17\xa7}q\xdc\x1e\x1b\x0e\xbb\xda&\x1d\x0c\xd4\xb0H\xc4\x9b\xc8\x15\x8cLf\xf0?\x84\xfc\xa8\x17)\x1b\xa9v\xf3\x95\x86\x874\xb1', b"\x10\x88 \xabZ\xff9{Ls\xaf\xf6\xe7\xd7\x9c&\x15\xa3\xd6)F\xc0YWzw1M\xd6\xc9(dE\xae\xcd\x80\xc6z\x1f\x17\x05\x01*\xfe\xf6\xd5Da\x89ML\xe8)\x7fd\x14=\t\x0c\xc1'\xaf\xe9\xef", b'\x93<\x96\xc4\xda\xa75\xd2\x9drD\x08\xc4i y\x89\xe7\xa4\x88<+\x14\xdd#\x06\xf4TZ\xd2\xb4\n\xaa\\\xc04n\x89q\x14l\xbc\xa1\xea\xaa\xedF\xd9\x17B\xe1\x14Meu\xa5\xaf?\xb5{\x06\xb2\x1c\xd0', b'\xbdd\x11Ok\xb8\xb7p\x8a\x88*-dm{G\x9f\xc8E90pK\x8c\xfc\x0e\xe50\xb5\xbaDD\x19\x9f2 H/\xcd\xd6\xeb\x01-\xd4\x85\x9e\x90l\xa8y\r\x08\xca\xb1\xaaW\x8e\x0b\x84\xd3&\xc2&\x97', b"a\x93\x01n\x9fO\xa5\x13\xfeG\xfa\xeb'\xb2o\xcfAx\xa6\xf1\x8a\xc5\xc9\x1d\xe8\xa8\x8fb*O\x00\x9c\xcc\x93F\x12X\x15\xa4<\xe6\xbd\xe9\xde\xeb\xb5\x11\xe0\x18\x97Y\x1beD\xb3\xc4\xed\x01\x1aV\xcf\xe7p\x8f", b"a\xcc\x87l\xf2\xe2\xac\xa9\xf3zvG\xb0t\xb3X'\xbbX\xdd\x19J\xddv\x9f\x11s\x02\x1aAe\x98\xe4\xecj\xba\x05^o\xd3?\xae\xa9n4\xff\xa7w\xadMi$\x14}\xf9/\xe7\xf93\xd1\xfa\x04\xaa#", b"'\x05\t\xacbb\x01Dx\xf5\x03\xb4\xe6\xa6g\x89\x85\x81Hn7p\xc1\x0bO\xedqQ\x959Sf\x8b\xf7\xdc\xf4\xd1\xeaD\xbc\x07\xdc4P\xe1\xd1\x18y\x17<\x94\x0eJ\xfdO\xa3l\x17u\xba\xff\xa5+\xe4", b'\xf0r\x86\x1f\x08\xf1?\x97\xbc\x1d@\x82\x8d \xd9\xec\xf9|p\xbe~\xe5@\x81\xd7.8J\xbaA\xa6\xb65\x81FVkxs"\x88D;\x87\xab\xd2KJ~|\x8d\xa9\xe5[\xbb{\x12\x88Rz\xe8\xb1\xb9/', b'^to\x1f7\xac\xfe\xffg\xba\x0e\xfe\x05\xa9G\x1d\xce\xf0<\xff\xef\xbf\xb4\xd2\xa5\xdd,\xee\x1e\xae\xbfK,\xda\xc8vy\xaf\xf9N\xc4U\xa9@L\x13\xa7et#9\xfe\x9a\xa0\xcf\xb7f7\xe3\xa4\xfdR\xbc\xcb', b'\x7f\x1d\xc4<,`\xc4c\xa3\xe6<\xcb\x9b\xef[\x80\x19V\x17\x0bC\x99\x8eG\xd4\xbck0b\xb3\x8f<\xca\xebc\x17B\xe9[t\x1bXZH \xfa[\xe2o\xbc\xd60\x9e9\xf87\xb8\x13f\xcf\xdb\xf4J}', b'\xcb,\xeby\xbc\x848\xea\xce\xc5\xc7\x87\x0b\x18\xddY\xcf\xf1(H3j \xfe\x95\x8f\xc7\xd322\x7f\xef\xde\xa5\xb9\x01S,\xbdV\xd4\xe5\x9cK\xa3\xdf\xda]C\xb0\xae5x\x8c\xf6\x1aW\x10\xac\xf4e\xfb\x07\xc7', b'+\xfa\x9a\xb9\xa7\x02{\x99\xe9\x18\xed\x8a\x1bs[?\xf9\xb2\x8e\xec\xdc\xc3\xfa\r&\xeb\xa8e\xaf\xeat\xc3 \t>b4\xc2\xb8\x16\x1c\xb2\x86D\x8d\xf9\x0bd$\x18\xea\xd7/\xa7\xb9\xa3\xd4\x8aK\xe5\x81oG\xca', b'\x9bX\xcd\x95m\xafWP\x1eX\xa1\xea\xbd\xe8(xz\xfes-4\\S\x85\xdb\xa2u\x9f\r\x10 \x1e\xcfPa\x92\xf7\x82\xf4Wag F\xf0\x18\xcb\xb6\xb5\xb3\xc2\x7f\xef\xec\xe5\x9dA\x0cT\xd8\x0e\xad\xa8\xca', b"-\xf7'\xfe\xb6\x8crv\x00\xfebPe\xba\xfb\xb0\x15n\xad4Zj\xe7\x1b\xa5\x9eh\xf3\xbf\x88\xd7d(M\xe6\x1bs\xda\x1e\xbf\xcb\xd0\xeb\xbb\x80\xa71\xa9\xe8\xe5[;\xd5\r4\xb0|\x91\x98\xba\xf6t(\xf3", b'y\xa6\xf3, \xdd\xf0\x00\xdf\xb2UC3s\x14\x9a\x0c\xf7t\x97y\xd3\xeal\xe5\x1d&\x8e\xd9\\i\x8b\xea\xa8m\x1b\x98^\xdcs\x9b.\xd5\xb8\xfb\x86\xd4\x93\x80\xad\xf7G\r\x87\x1fl6+XV$\xb8\xe4\x11', b',\x05Et\x8b\x13c\x98^yl\xac\xaa\xe9\x8f\xd5A\xfcd\xb6\x02\x05\x8eg\xf3]o\xf3DTC\x0f4\xa2\xda\tX)r\xc9\x13\xd6\x8f\xb8\xcc\xeeV4K+\x8b\xa9\xadp\xc4\xc2=?\xb2\xf3\xdc\xc9\xa1\xec', b"\x85\x9bD\xe7\xc6'\xf6]\xb8\x0eE6\x85\xfc\x1ft\xb2*7w\xd8B\x9cW\x7f\xd2\xf9\x19\x16\xc8\x0cN\xdb_\xaf\xd6\xf0\x9f\xeab\xb2\xd2\x8c\xddt\xb9\xe8\xbb\x81\xf2t\xc8+\x8e@:+\xbe\xdf\xf2\x9f\x08%\xbc", b"2\xbb\xcdj\xcfo\x1d\xf9r$\xd4\xc7\xe7q\xa5z6\xd4\xd3\xa6'\x18\xff'e\xeb\x14\xd2\xe7\xc2\x9aXn:\xe0[\r\x86/q`\xeb\xdc1\xe1\xe6\x92T\x17\x98x\x85\x97\x9b[\n\xaf9\xc0\x0b\x05\x0c\x01\x8e", b'\x06+\x1e\xad\xc1\x06=LBO\xd0\xf4l\xaa$\x87\x8f6\x9e\x00\x9e\x98\xcb\xb3&\x19}\xb9\xaa:^\xcbM\xbd\x9a\xf3c\xbc\x84/\x9eF\xdf\xf2)\xa2\xbf\xdb\x17S\xbfS+\xf5\xf2\x9c\x90\x96\xcd\x13\xb0\x1a*\xe0', b'\x8e\x1d\x1a|=q\xfc\x95Z?\xc6`\xc9\xb6\xf1l\xf2\x99\xa2\xf2~V(\xcb2\x93\xd8\x0c\xbf\xec\xb8\xba~zjx\x1eg%\xf3jhC\xc54\xb1\x985\x9b\x98\xf9G\xea;\xab%\xbf\xc8<83g\xfd\x90', b'\x8b}M\x91\xd9yg\x8a4\x808\x01\xba\xb9\xa6\x19\xccr0\x8a\x1b\xf56\x13\xbf\xe1\xe7\xd4\xe7j^\xfbt\x18\xdc\x1b\x95yJ^\xb7\x1d\x8fk<\xa9-\xeaW\xa8\x17d\x9c#XN\xb0\xbf\xf4\xc9\x1ec\x91\xee', b'\xaau\xd1\xb1\xe2\xf8\xbf\x98\x00$5\xb5F\xac\x03\x94c>N\xa6[]\x8d\x1fKUh\xeeb\xa7\xf8\x1ag\x89\nUo\x81\xa5{\x9d\xe8I\x84_\x18\xa9\xe3\x15g>FT#\x1cD\x83aA\xa5312\xf0', b"\xed\x004\x18w\xc38+\xd9a\xc7p)<AFpf\x12O\xc4-f\xces(\x18\tuz\xe6(kx\x14K\xf4\xf4\xbb\x94\xd0\xeb@'t\x1c9\xb8\x00F-r4\x1a\x04\x08z\x81\x03\xb4\xc0\x0ey\x8b", b'O2\xea\xa3Z\xf5\xdf\xe9\x1f\x87[\xb3\xa0t\x84*\x13P\xf4 \x17r\x1a\x1e\x10u\xcd\xdb\xdd\xf0\xc4TiVg\xaf\xc6\x96\xc6t\x1d+\xaa\xe4\xe9\xa4;\xb7-\xaa\xd7\xf4\xe4\x80A\xc9kQ\xc1+\x0c\x0f\x8a\x9e', b"f\xe89#\x89\x1c\x96\xde#H-\xf7\xbfH\xa9\xe8\xef\x05\xd3\xda\xd3\xbc\t\xde\x8euo\xb1\x9e|\x91\x86\xa8|1*>\x85\x13vi(')pi\\4\x0e[YZl\xba\x15ru\xc4^\xb0\x81\xca\xdco", b'\xcc\xb7\x00\xb8\xa5\xea\xf4dF\x14g\x00n\xd7\xd8\xc9z\xd5\x08\x14\xcd9\xb8\x9ah\xc3B\x84\xd4\x1f4\x11\xe9\x13\xd2yk\xe9n\x1c\xd4\x8a\xab+$\xe4\xe0\n\xe43Q\xfc\x1c\x03\xb6\xdc\\SL\xc7\x93\xba\x19\xaf', b'7\xd0x`\xe7^v!\x87\xdas\xc1<\xea\x0ebqq\xeb\x8f\x9c9\xcam\x8c\xd4H\xda\x1c\xc2T \x90\xa7\xb5\x10\xa9/\xfaN7{\xd6xa\xe4F;\x82\xaeH\x9e\xd6{,\xc3\x81\x1aj\x08M~6\xbb', b'/\xc8s\xb0\t\x86\xd9\xfb\xe43=\xd6\xccA\xd6\x9b3\xc4\xdcSQ\x15\'@\xb9^8]\xdf\x8d\x00\xe8\x85\xde{o\x95\x83\xddE\xde"4U\xfb%\xa0H\xa7\xb2\\1\x19l\x81\x1d"\xac>*,H\xe9\xee', b'`\xbb\xdf\x8b\xf9\x16\x81\xe4\x00\xb5}T\x00\x06\xe9\xd9b\x19\x1bC\x12\x9c\xb4x\xdax\x14s\xcev[\xf4M\xc8"H\xa3w\x1a\xd4l\xeaVi\r46\xfe\xaag\'\x96\x06\xc3"\x8b\xc8\xe2\x84\xf1\xd2z\x97Q', b'\xbd\x0e\x96!\x87}5v\x9c?e\xfeZ}\xe8~w\xe6\xfbn @2\xdf\xe4\x9cH\x97\xd7\xdc\xd0\xaf\xef<\xce\xff\xad\xc7\xd42\xd47\x16T\x96\x0bx\nc\x05\xe6h\xb8A\x16\xd4\x00\xb40,k\xc0\xdd\x93', b'\x89\xae@.C\x99\x054\xd0\xf9*x\xe4\xa3\xfe\xec\xcfV\x85\x93\t\xd5K.\x98J;#\xc7\xde\xa7\xe3j\x1cs\x13c\xda\x01\x14\xeb\x17\x0f\xba2\x14\x08\xde{:\xe2\x14\xee\xca\x05\x93\x94\x1a\xf3y\xd8\x0e\xaf|', b'oEt]\xd7w\x8fmo\xcdf\x15\xe4e>\xf3\x0b\xaa\xf2~\x13\xa3g\xbc\xd1\xa8[O;\x88\xf32s=W\x80\x01\x03o\xb1/\x95\x04X\x8ce\x84}\n\x00\xd0|\xc0\xf5fZ\xef\xb2\xd2\xa7-p\xce\xc4', b'=\x9aO\xa7\xb3\x9f\x1e\xb9\xb4\xf3\xa1\x93U:\x0b\xe9\xff\xcfB\x8b\xc9\x95\x81\x8f\xb9\xa0\x8f\xd9\x01\xdf\xb8\x10\x1e\x19\x9f\x9f\xd4\x89\xcb\xf4\x9f\xac]\xc5j\xad\x9f\x02q\xb0\x17\xee\xa0|&\xd7\xd4\x9cH\x0b\x81\xde\xca\xec', b'\x15\xc2\x1d\xb8\xe9\x88\xa1,\xfed\xd6\\\xfa\x00\xd0Rj\xfa\x04\x9f4/2\xf6\xe5\xac\xba\xb2\\\xd8U\x9b\xaaE\xea\xa5|b2"\xd2wA\xe6=\xe7?\x06\xa2*\xd9]T\x80Gp\x15=\xb4\xe8\x99\xb0\xd1\xb7', b'\x84\xb1\xa5\xa2]\rR\xa1\xcb\x1bK\xc0\x80@\xa0wx0\x92\xac\x934\xae\xf1\x96\x8f\x8fG\x9a\x15mj\xe1\x96T\xbb[\xd2\x89L\x8c\xc9\xc3\x1d?\x16\xf6\x9b\xc3\x86\xf6aD?A\xc4\x84\x89\x01\xdd\x16/\xbe\x92', b'~}\xf7\xf5V?\x9du\xdb\x93\x99\x9b\xc5\\8\x1eh\x168\xe0D7\x93M $%\x8dF\xf5\x08\xf8\x953E\xa2\x88kt\xe3-\xcd\x86\xcce\xeeK\xc6+\xc2\x1e\xbc|\x11$!\xe0YK5\x8e\xdb\x82\xbc', b"\xe3bl?d6W\xe3\x8c\xd7(g\x95)V\x1dKFObm\xf7&u&/\x9d\xd4*R\xe2[\xd5K\x14\xad\x02YxH\xcb\x1d\x1b\xee\x81\xa5\x89~'\xd7\x1a\x19\xbcXv>\x1f\xef\\\x85\xd9b\xa5J", b'W`\xe8;\x8eKA\xe1\xd1X\xc1\xee\x1eE\x9d>>\n\xf0\xcb\x94\xddCm+{C\xe2\xf1\xb5\xe62\xa0\xa9/\xb5\x02\xe9l\xf7Y\x06\x9d\xa2Rcw\xd0!\xf3H\xb8\xcc\x14\xd0\x8d|\xba-\xf9\xb8\xfe\x94G', b'y?#\x11Y\x07&\xb1\xd3\x85\xbfO\x97\xca\xee\x0b?P\x18\xbf\xe3\x84\xbd\xa7\xc7\xee\x8d\xd1U\x92Y\xbf\xa9E$\x01.QbSi\x1b\xb0\x8f\xf1\x01y\xd8\xc7\xc8\xd1\x89\xf7\x19\xfa}\x9e\xfb\xd3\xd99\xfc\xedt', b'\t\xc4\xef\x94\xab^\xc2\x96+\x93\xfa\xb0\x82=\xb6"\xf5\xa8\xb3\xa9\xe1\x8c\xe2\x1e\x1e\xe2\x0b\xc5.0\x927\xfc\x9b"u\x12o\'P\x94\xb1\xe9\xc84\xff\x0e\x852\x1f%\x11\x0fv>)\xfc\xb88(\x85\x00\x10\xee', b'Mx\x180\xa5\x1b\nN\x1c\xc3X\x9d9\xd9.L2U\x94UAM\xe2\xd7N\x94f\xe2\xc2\xb1\xea\x95Q\xe57\xc4\xf8#\xfc)\x07i\xe2\xb2e\xc8R\xdb\x1f\xe3\x00e\xbe\r\xcaP\x0e\x9f\xda\xc8\x1fYe\xf7', b'U\x18\x00i\xa7\x1e\x96\x8a\xc8\xf3^\xc8\x08~\x96\xf8\xa3\x0fL&D\x94vDD\x86\n\xca\xc9\r\xe4\x13\x1cV\xa6\x99\xa2h#?c\xe1\x98\xe8\x10\xa8\xa2CF\xfa\xfct\xa3\x12\xd2Fm\xbb\xde5\xea\x93\xc4\xe9', b'\x14\x04m\x1e\x1bP\xf5\xe2\x14"\xc8e\xe1\xd5\x86\xd1\x97\xeb\x91\xdc\xcc\xf7\x8b\x1f;x}\xe7+\x8b0\x96\xad\x11\x95\xd5Zr\xaa\x16u\xcdu(\xd2;\xf2l\x03\xce\xeak\x10(\x8c\xbb\x91\x12\xa0\x82\r?\xc9\x84', b'\xe7h\xd0TG\x85"\xf9!\x11\x80\x0b\x9d\xefg%\x8a|\x19\xd0Fq/\xf9z\x1c\xd5\x10\xa7u\xde\xc7\xb5"\xed}1,z\xd4|~we]HJ\x17\xdf\xbb\x04\xe1L\xb5\xe6H\x1d\x84\xd5\x15\xc1\xfe\xa0\xc3', b'3BR\x9d(\xcaox\xce\xd4\xd0o\xa5\x17\xca|\xac>\x92f\xe5\x87\x89\xe1\xb5m_!\x8a\x02\xa2J\xca\xb2\xe3W\xd6\x15a\x0f$\xaa\x07\xa2|\xa5\x83\x15m\xc9b\xa2%\xacOr(\xbf\xefC}\x86\xa6\xfd', b'\x01!\xf2\x8f]\x13\xa7\xfd\t\x829\x85\x8c&\xa1~\x97\xb5\xe2QdM\xb1>\xaf\xa8\x86h]I\x13\x7f@\xfa\x0c6\x1a\x80\x19T\xb4)\x9d\x97j7\x95z\x97\xc9\x92\x8a\xd5\xc2Q\x86u\xf7\xd0\x83d+\x12\x94', b'\xe1;\xd2\x0c\x9d\xd5\xc4j\x87\xcb\x88\xb4v\xd6\xee\n\xaf\xdf\xe1\x1f\xe4\x9b\x86>\x0e\xf0\xa9\xab\xa9\xd4`\xee\xd0\xa7\xcd\xa7\x11J\xe57\xb6\xd5\x93\x00\x8b\xf9!\x81/Q[\xd4\xd6\x95`e3\xa0\xd5\x0e\xfa\\!\xcb', b'ST\xe9\xee\xbe\x1bn>+\x03\x01\xc0\x96\x07I\xe8q\x00\x94>(N\xd8\x84\x13\x8a\xff*+\x16%T\xb4\x12\x9a+\xf3\xec\xe6_u\x0cp\x18\x07cC"\x13C\x0b\r\x11\x03}\xebk\xe9\xf9\x8bZ\x87*\xde', b'\xe8\x8a\xaa\x86\x1b\xfco\xae\x16\xc7\xdb\x89\xd1\xa9p\xbf\x17\xe9\xe2\n[Dx\xc9e\x7f\xa5\x84w\xf0\n;Pjv\x0eW\xbaV\xff\xec\xcd(\xe6U\xec<\xeb\xb5|\x1f1\x00&\x029\x1c\xbfj\xd8\x1c?\xb5}', b'\x94\x95o\'\xe0\x97&\xc4\xe0\x88\x1eh\xf1\xf9\xfe\xaf;\x0cT-\x87 \x8c\xe8\x19GE(|\x10\xfbw\x00\xa3&\x03\xe4`2Z4s\xf6\xd4`\xd9#2#\x19\x14\xd4O ")X\xee\xbf\x9e\xb6}\xbb\xe6', b'\xbbH\x1ep7<Q\xd4\xed\x8d\xe6"\xb3\xa1\xf5EIM=\t1]\xa2\xdb\x7f$\xbb\xb1\x97u\xf7\x1b\x10\xf8\x82\xc7\x8ce\x84\x80-\xff\xb2)\xab\x87\x1c\xf2\xaf\x84\xa2JP\x91\x7fp\xd2\xe0\x11\xa4\x8f\x10{(', b'\xa1\x94C\xe2\x8c\x932w`x+t\xbe\x97\x1b\x89\xed*\xa9\xe81\x82\xae#\xfc\x87\xe3\xfb"&\xfc\xb4=I\xe3\xe0\xae\x99\xc9\xe5A\xfaw\xaaO\xf7G%\xab\xcc#\xb8\xa4\x1d\'\x1c\x0c7~\x03B\xbeJP', b'\x0bF:\x92LC\x97\xed\xdei8{\x1cn,\xd8\x8dWm\x08b\x08\xe1\xec\xbf\xb3\x85U\xa9$\xf4\xe6zL>\xe8\x0bs\x8a\xa4\x868\xc4\x05t\x94\xbe\t \xfe\xbd2gj\x11\x97\x00\x9f^d>\xbf\xa3!', b'\x876;\xc7x\xe3\xfd\xaa\x0brKkU\xaf\xce\xd0~\xad\x9f\x9bF}F\xcb>\x15\xdb\xfb\x7f\xf9\xc8?d\xe0\xfb\x92f\xbe\x02O\x99\x95\x08\xe4\x86cY\xc70\xebkhg)\xd2 \xc0w\xad\x8f\x1d\xb1\xf7\xb3', b'\xe0\xf8v(\xde\x85\x84"Wx\xd6\x00\xed\x15\x1c\x9a{\xb5\xab\x07\x07\xe4-\xbb\x82`\x80\x9ah\xc5\xe7\xdfTU\xa2\xe6\xa5\xc9U\xb6\xb8\x83f\xfeU^\x91\xa9\x83\x9cE\xc0\xa4\x19|"n\xfa4\\\xaf\xac\xf6s', b'\xd9\xba3\x8b\xdd\xd6\xba\xf9\xc4\xe7\xa3\x88\x9fx@\xbf\x91\xc7\xdb \x9cP\xa6\xa5\x91\xdc\x80\x12x\x9f\x88\x82\xb0\xab\xab\xf9\x02\xb0\xda\xb90#\x8a\xe6mO\xa0?H\x16D\xaf\xff\xeb\xbd\x94\xf9\xa0\xab!\x9e\xb0\xdf\x83', b'RN\xb6\x8c\x8c\xb1\xfbs:\xd1\t\x06sMs\xdf\xc5\x91wm\xbav\x95f\xdb\xbc\xc4\xa0\n\xc8\xbc\t\xbe5\x92\xbc\x08e\x88r)\x1b\xad\xe2\xa6<!\x1f%-9a7"hA\xb9?\x9f\x81}H.Z', b"\x88o\x85\xdd\xa7\x18$:7\xef\xce2\xeeS\xce\xa1C\xad\x0f\x85\x81\xc92K'\nm\xe6\xb6\x98\xb5Q\xc2\xea\xcdl9\x9c\\\xae\x1bu\x8c\x83\x15\x11\x9e \x80\x00y\xb8h\xce\xaa\x83\xf7\xd8\xf2\x12j&\xfb\xc0", b'\xd9As\x14\xbd\xbf\xf3\xaeu:\xce\xa9\x85^\x00\xe7\x9c\xde;\xef\xf6\xa56t\xa8Q\xc2\xbf\xfap\xd3\x82D\xe8\xdf\xbea\xf8V)\xa8\x80\x7f\x14\xe9\x9e\xef\t\xcby\xb5\xcb\xbcs\xb7\xa6\x7fj\x99\xbft\xee\xee\xcf', b'\xb8\xa8\x84\xf9\x9bFV"\xedk\xb3${\xcfDl\x19\xf12=\'p\xb3\xafd\xd5\xf2\x81$\x17$\x10\x92*\x8eyx\xa9r\xa2^\xd5\xa7\x8d\x1f"\xbb\xc1(\xf6\xa9\x00U\xe4\xbd\xa94\xe1\x94\xec\xb4\x0e\x01\xb3', b'\x1d\xff\xd9Uh/m\xdfOE\x0e\xaa\x04w\xccY\xbcLy\x1238\xf0\xd7\xd9~\xef\xfb;,\xad1s\x02\x8e\x7f%\x93\xce\xa22\x12\xef\xb3\x07\x1a\x965\xea\xbe\xcd7\xad\xbe\x0c\xcf\xab\x1f\xa1\xd3)\x82\x18<', b'9?\x95\x0f\xa2W\xe5\x97\xe5\x87\xdf\x08C\\\xd3(f\xd3k\xf5Ui\x7f-e\x9f]\xf2\xfacx\x16\xeb\xc5\xbe\xf5 \x0f#\xce\xb4\xbc\xbc=)W\x88Y\x94jh\xb5\x0f=\x9c\xber\x842\x9fo\x08K\xe3', b'\xfc\xc9\xeb\x87\xbbu\t8\xe1mC\xdd\x94\xabugGc\x04\xe2\xad\x0c1\x13\xf1\xaf0]\xfcnC-\xbf1%NW\xead*\xc6\x1dOC\x10\xef\xf3\x87\x93\xf2\xd4\xa8\x96\xd7vr\xec\xc1\xe8\xad!\xd6\x03Z']
L1 = [b'+\\\xf0/s\x86\xef\x91Zuk\x1d\x0b\x00\x8f\x07\x8a\x01\x97\x8a\x8b_\x99\r\xacc\xabT\xd2t\xa9\x8a\xc8\x92\x19~\xabl\x18\t\xd1[J$\x1bE\xd6~\x05\\\x90\x0b^:\x87[\xb4\xba!\x97\xa3\x8c\xe0V', b'JFZ\x0b\xab\xac\xd5\xa3IU\xe4\xd2\xb3\x97\x1c\x15*\xe9\xa1\x87\x01\xf9\xfd\xd7(z\x0c\x14\xf3{\xc8\xfa\r\xaa7M\xf8\x81U\x9a\xb9\xbf\xfe\x05\x99-`d/\xca\xdb\xbd\xc5C\x19YM\xe8\x1c\x04\xef\xb6<\xca', b'\x8a\xab\xf3W#\x93\xaa\xb00j\x8e\x8bI\xad\xcb&\x15\x0bj\xbf\x05\x1cn\x1e\xc4\xe6|\xe2\xbeo\x98\rHB\xee\xae7\x06\xe4\x80=\xfcK\x9c\xe4|*/@\x83\x1b\x84_\x0f\xf1x\xa3\xa0(]\xc9"z\xd7', b"\xc3\x1b\x91\xe3\xe04\x11\x93q\xa8/\x18\x19\xac\x95\x8a&fQ\x9e\xd6\xf7kf\x83\xb7\x90\xcdnt\x1b\x934\xe9\xdb\xf9\x04\xa9\xa2\xeeF\x95}`\x8a\x9d\xd7\xb5i\xa8'\x9aAQ\xac\xaa\x10\x85J9\x15\xbb\x85\xfa", b'>\x7fv\xc0@\x85\x05Kcf\xa8\xf2\x98!${O"\x87\xb8\xb7\x9bY\xb0\xca#Ri?\x8fKPi\x83\xe1\xa6\xff\xb4\xd8\xd9\x17\x83Oi[;\x84\xc9_\x7f\xd5m\x9aj:\x18\x0f\x9a\xc3\x12Y\xcb\x9aO', b'(\xbdp\x00-f\xfa&tG\xcc\xbb\x85\x90\xedZF\x08\xce\xbek\xabF\xaf\xa0\x98\x90\x8f\xbb\x9f[\x13\x01[\xa4\xe2\x80\xfb\xab\x15\x87\x1e\xb91_5(=Q\xcdw\x07Fa{\xd7\xf4\xd4\xde\x11\xc9_\xb4\xc8', b'\xbb\xb1D\xe6\x9c\x9b\x1e\xb1\x13\x17\x1e\x03\xf7R\t<LE\xccS\xd2\x1a\x9f\x97e6\xb2(8\xa9H\x01t\x86\x13\x05\x0c\x97\xb6\xd5\xa1_Xxm\xba\x00\xa5\xbc"\xd5\xc7\xe3\x17\x1d\xf5\xb1\xcf\\0\xff&\xfa\t', b'\t\xab\x10\xb4\x9e1\xa9T`\xaf\x10\xa1\xe4\x9c\xf7Q\xe5\xf5\x8e\xa8V\x82|\x18\x95\xad\xa1\xe1\xf9\x12vHm7 i\x19y\xa5\xe9s\xe9\x0c\xb5\xd20hC\xff6\xb3h\x98a\xfbW\xd0\x04\x96D\x17\x87\xee\xbd', b'\x82\xfb\xc6o9&}\xfa\x9f\xec s{\x80\xc5\xe32(\x0e)Ixr\xdf\xe5RF\xb5\xe8\x14\x8f\xd4\xd3\x06O\xc0<\xe37\x02\xfcc\xe5\xe1\x91\xc9\xf09\xf9\x9f$\x17\xe4{\xcb\xfce\x90Av\x1f\x81|2', b'\xf2=\x845\x9d]\n\x89c\xaeX\xa7Gb\xad}\x85\x0c\xab\x92\x89=\x0bx\xbb\x1a!\x8bB\xff\xf1\xb9\xb3\x9aU)$\x03/}+yJ\xd5\xb6#xK\xab:6\xaf\x18& 6f\xd6\x9d\xa6\x16\xab@\x1a', b'\x8e!\xe2\xb1\xa9l\x02\x9di\xd87\x7f\\\xfe1\x89n\xe5y\x07\xa4a\x93\xd5A\xae\x81N>\xdf\xf7(&\xe7\xf8)a\xbc\xb6\x00B\x82\x0eo\x87\x08\x8f\xe72\xc1\x18\x1e1"\x99(\x89\x90\x84\xec;\x1b\xeaW', b'k\xa1M5m\xce\xfc\xf4<=\xdak\xc1\x1b87\xd8l\xec\\h\x13\x95\xf7?\xa1\xd8\x8bgN\xf6\xfa\xc7\xe7d\xce\x9fF\xc2\xbfl\xbbY\xba\xcfc\x15\xc3^\xce)\xcc\x0f\xba\xe0"<\x88\n\xad\x12\xb3\xb7\x0b', b'\xa4;\xce\x97\x8b\x8a\xa0\x96\xcb\xbb\xaf\xb2\x93\xfd\xeb\xf8B\xf9\x0f\xe4\r\x06\xe7\x10$\xa2$\xe3\xc2\x06v\xd4\xd8\xab\x88\xd6\xe7\x00k\x82u\x19\x9d\xd1;\x0b\xafk!v_2y?\x99\xe8\x1a\xab\xb36\x0e\x1a\x9d\x0f', b'L\x82\xc8^\xb9\x85)^\xaaL\xe8y\x9c\xdcn1\x0c\x17\x10\xacV\xc1M3\r\xe4D$\x82\xb1H\x1a\xed\x98>A\xc9~P/\r\xd8\x07\x80W\xcd\xd1\'j", \x17\xfc\'\x1eu\xb1\n\xe0L\xaee\x9a', b'\xb8\x90\xe4\xa8.\x8a\xea\x05$~f\x16\xe5[\xe9\x80*\xcaY\xfcF\xd1\xf7\xddYq\tix\xa8\x86\xcb{\x9aK\x98\x1c\xcck\x00\x0f\xbf\xc3\xda\xc7\xa4J\xbd\x96\xec\x1e\xf7$\t\xb7s\xd6\xa0\xdc\xaa\xd7\x0b\x01O', b'\xdd$\xe2\xad\x9b\x12Z?\xcb7\xf1\xf9\xe1\xccg\x9at\xeb\x8bc\xcb\xac\xa4\x93\xa7\x88\xb4\xe9[\xb2\x8d\xd2\x94$;\\9V\xf9\xf4;\x88\xddYh\xe4kd\r\xd1\x8bvm\x0c\xbe\xc5\xe2\x1d\xe7\xb7\xb3\x96\x17\x01', b'\xfd\xf6 \x92\x84\x88\x1cy\xe7\xff\x13t3C\xf8\xd7\x97[I\x14=\xee\xc8\xcfp\x02\xa6\xbdm14\xce\xdbC\x95\xd6d\rJ\x12\xc8/\xde;\xc9\x0c$\xdb3\x08\x8f\x8d\x87\x1c\x07\xae\x87\xe5hB\xd1\x0cv\x82', b'\xaf:\xb0!1aK\xc9]\x9d\x08R\x15+\xc1"\xee-\x1b4.\x178\x9b\xd5\xd2\xe7\x9a\xdd\xa8\xcc\xbb\x8d\x0e9\xa07~\x89\x03Cy\xf3\xaft\xef\x82\xc2.\xfa\xe5\x8c\xce\xeeer\xdf{\xabw\xedQ\xca\xeb', b'\x85\xd4\xd7x\x80;\x80\x19!\xffHk\x0f\xa8ko\xe6\x040\xe9e\xb5\xfcx\x8bRQ\xc8\xcd\x85\xcau)\x10\xc4C\x18\x7f\xcdTm\xc0\x1c\x10\xa3Me\xd8:\x0e)\x94\xc7d\xc8\xcf\xc2\xca\xd5x\xefY\xed\x85', b'\xb3l\x90\xe0\x86`{\xd3\xa2\xca\xd2\xd8\x89\xe7\xdf\xf0\xf9\xec\x1d|qN\x8aM^w\x98\xf2W\xf9@\x7f\xc9{|\xf5V\xa0\xca\x83C*\x13X\x94\xc8\xaf\xdbzm\xa4\x1a\xd2 {,\x89\xae\x1f\x90\xf1Pk\xd0', b"\x07\n\x01\x19\x04=\x92\xac\xb1\xb6c\x0c\x16\x1cAK\x80\xe0RZ5\x03\xd7)h\x19\x9cF\xff\xf9u?\x88X\xb1\xd5\x97\x01AUh\xcf\x8ab\xb8\xba~SDP\xe1\xc8\x90\xba\xdf(!X\xe1\x11',\xf9\x98", b'\xb6\x9a\xfatj\x0b\r\xd1\xb9\x95\xc9\xbd\xefO\x87Z\xd2<1\xb0N\xd2hq\x0c\x1bl\xc9\x04\xb0\xbb\xe1,\x1e9\xf4\x936P\xdbz\xb7^\xfd\xd4Q\texV|\x9e P\x93\x05\x18\xd8:\x06\x83\xf7\x82<', b'\x0e2\x8f\xa7\xb0,\x04\xe1\xdf>\xdd"\xce\xa4\xf4\x90%\xbc>\x9f{\xecc]\xbcTD\x96[\x18d\x85\x8b\xcf\x7fV\x02\xc5\xb1M\x17d\x17\x91\xa0v2G,\xf1\xc5\xb9-O\x12\xd7(\xeee=\x0f\xe2\xb5\xae', b"\xb7\x89\x03q\xde\x93\x82\x15;\x0e\xcf\x95\x8a>V\x8f3\xb4\x1d\x94a6Bz\xe4#\r\xca\xf6\xd7\x18\xaa\xc9\x10\xc1b\xa4I'\x91F\xd9\x89%\nqh-Q$\x16\x0b\x14/\xe3F\x9c\x9a\x06G\x87\xffe\xb5", b'\x00\xf0\xe1\x99(O\x8e\xac\xb2\xd7s\xa0\xc7\x98<\x89\xc5\xfce\xa63\x94\xb2\x03\x03\\\x01\xca\x89^)(\x00F\xd0\x81a\xc4!\xa7\xa6\xbc\x16\x0ea(\x11\xb2\xb3;\xd7\x92\x13_,\x98\xedsa\x06\x85\xc3\x0b\xd7', b"\xe4l\x14\x97\x8f\xea\x06?\x8a\x0c\x87\xa8'f\x1e\xce\x05O\xc8\xedO\x9f\xa3h[9\x99\x1a\xb4\xbd\x8en\xd6\x81\x8c\xea\x1fx+r\x0bq!~\xff'\xefi\xc3\xf8\x11\xf1\x88+w\xec=\x12\xa9\xf9}\x87\x8aJ", b'\x8f\x9e-\x86\xc0\xbdp\xbd\xf8SW\xd3\xde\x9a\x9c\xa4/\xbcw\x99\xb2\x1f\xf1\x86\xc4\x91\x06;\x8f\x981\xb4\xef^\x9a\x87\xb8\x97/\xd1\x9c\xedc\xa01\n\x0b\xd9\x1f\xe2\x92\xb6V=\x1cc\x81\xb38\nG\\\xa0\xbb', b'w\xa5m3af\xad\xa6>>D\x1d\xa3j\xfd\xc4I\xea\x1d\x99\x85\xfcQ\xde\x07\xfc\x07\x16=}\xe2\xcc\xbaS\xa4\xe7\x81\x9b\xd6\x90s\x06\x01\xa1S\xd7\x01.M4\xfe\xaf\xb6\x0co\xe8C:\xa41L%0u', b'\xf5h N8\xb8eh\xb8\xffp8\x82\xbf\x9b\xde*\xd8[\xc2@\x18\x80\x87\x1a\xb0\xa8S|4\xac\xfe\xf5\xaaj\x89\x12X\xe0H\xf9\x08\x8f\xad\x1b\x7f\xfd\xf8q\x9e\x82\xc8\xeb\x9b\x84\xe0}\xc3\t\x17F\xad\x88\xc8', b'\xd7&K\xc2\x86A\xe5\n\x1da\x0e\x97\xe7\xdaL\xf5\xfe\x1862\xb8\xd1%n\xd3\xed\x19\xff\\\xff\xfbM\x1a\xdd\x8d\xaa\xaf\xb9\x14\xaa&Gf\xfa]!\xcc\xfa\xa37\xd46\xda\xc8\xe7\xc0E\xb9D`p\xc5\xb5\xf1', b'`\x0c\xb8{b}\xa7\xef@\xe1\xb2\x93\xabk\xdf\xb1\x12\xa0\xcd\xf9\nn1\xbc\xdfQE\x9dC\x08q\x94\x1e\x12oh\x96\x98\x9fT\x07\x8fJ\xbf\xe7])Z\xe7,\xa0\xb1\xbe\x1b\xf2\x01\x8b\x0c\x0c\xdc@\\\xd9J', b'\xb0\xfd\xb1\x08\xaf3\x11#\xfcW^\xaf\x1d\x15\xd3\x92\xc8&6y\x89\xa7\x0fo\xf8?\xa9\xccU\xac`\x89l\xf8:\xeb\xf6.(\xdd\xb8V"a\xf0=0!\xe3nr}\xb1\x92\xb1\x1b}[>\xaf\x1f\xc3\xa5Z', b'\x9a\xd6Ei%\xcd\xa0\xc0N9\x8f\xb3 \xe86;\xdf\x9f!yw\xbd\x87\x98\xa6\x8cgb\x17\x9b\x10\x1d\xdd\x96\x04<kK_\xe0\xa2\xe5Q-\xf1\xc6\x1dB\xcdK`cC\xdb\x1cIxU\xc9iG\x81\xd7\x92', b'9E\xe6\xf7\xdb\xcbRy\x10\x91\xce\xd2\xe1\xa9\x939\xa9#$\x11\x1c\xe7\x93\x84\xe2$?\x81\x1ft\xc9\x80\xad\xf6S$f\x06\x138\xa3\xeam\x82dC[\xc1\xf2R^}\xed\x1du{\r\x8cv\x94JZ\xd30', b'\x91Y=\r\xbd\xc2W\xe9\x17\x16\xd6M\xd4\xb1s\x86\xcc\xa3\x86\x04\xaa\t2~c\xae\nr\xad\xe0\xb6\xb6\x81\x01\x1d\xe2\x80\x81v\xbex&\x84\xa7\xfb\x83\x03\xa6\x84\xd7}\x8c\x85\x8e\xb4tN\x8a\xa6\x1a\xd1\xef%&', b'\xce\xc6\x87D\\\xe5\xd0\x97\xf2\x84c\x80D\x19\xe5\x97\xe5\xb1.~\xf7\xe6\x99\xac\xb9\xae:\xf0\xad\x00\x93o\xc4M\x17D 2\xd6\xa7\x9a>\xb1\x8e+\xd7\xa6\xa1\xb3\xa9\x0b|no\xfam\x9e\xd3I\xb0\xef\x86\x9aT', b"\x11iIT&5'>_\x0e\x7f7j\xad\x9f_\xfb\x95\xa1\xdf\xbc;\xc9\x96\x02d\x18]k;\xbd\x0e7L:8\x07\xed&\xf4\x10\x846s\xa0\xa4K\x0f\xcc\xc0\x8f\xafB\n2\xde\x015\x96\xc3\xe6\xcf\x1e\xf3", b"\xd8\x8d+?\x144\xfd%)B[\x04\xba\x81\xa3\xcat\xfeb\x83\xe5T\x11\n\xdb\xe8f,\xd0\x1bbZ\xcc\xf4\xa9\xc7\xa6\x8dN\xd1\xc0v\xe8\x84\r=l\xcf\x14&\x84\x0f\x00\x18'F\xca\x05\xcd\xab\xc1\xc0z\xaa", b'\xde\xd1q\xeeXU\x02\x1e\xf6\xe5\xf8\xf2\xc3\x14\x1dD\xcc\x07\xa7\x06\xd9l\xb7\x89\x1f\x85\x16l{\x02\x84\x9d\xb8\xceH[\x0c\xbfN|EE\t\xe6\x9dLC\xa9\xe3\xf1\xdc\xf52?\r4\x90\xe4\xad\xb4\x14x+\xaf', b'\xe9\xcc\xb6\xd8:l\x0f\xe8Qm\xdc\x02\x8a\x8d3S\xf0\xb8\xcb\xab\xdc\x1c\x1az\xcb\x87+\x95\xdd?P~j\xca\x94\xa2\xde\xd1Nq\t\xbe\xd4g\x02\xb8QZ\xc3L\xd5nb\x90\xbc\xeeWqJ\x8e\xc0\x81\x15\x06', b'\x04\xfe\x07\xed\xbb9\xf4\xb0bXT]\xe1\x8eTJvDH\xf4\'i"YZ\xfc\xee\x13\xb7p\xa4\x8a/\xeb\t\xea\xb1\x1b\xd5\xa7\xe1jH\xe6\xa4]\xdd\x8b\xf7\xf0\x84a\r$\x19\xaa\xd7\xd6\xdf@\xd2\x88mO', b'\x1d\x07i\xed\xdb\xb34\x83\xd0k\xaf\x88\x13\x8ag\xbf>\x0c\xaa\x8a\xca\xbb\xe4!/\xb1\xac\xed\xb7t\x9c\x992\xc5\x1d\x04\xbe\xe1\xb1\xf5b\xa5UM\xda\x19W\xe6\x86W\xcb#\x89\xd8]+\xc9\xe1F\xde\xbb\\\xaa\xf0', b'\xb2\x99\xa6\xcfv\x1a\xae~\x08w\xecl2;\x87\xed\xbc\xb5]\xec\xe7\'\x16p\xfe\xc3#\x8a\x1abt\x99`\xaa\x81\xc6\xae\xf1\x1eV\xe3\x10\xbc\x1542\xf4\x0c\\Kk\xd9\xb2y\x95|?w\xa9"\x02\xb3n\xcd', b"c\xfa&\xc5!\xd2\x8a,\x11\x93\xf0\xda\x9b\xb4kY\xe0\x15\x97\xc9\x16\xa6\x7fF\x7f\x9d\xb2\xa3R\xc1Os\xdeT\n\xe1\xc7G@\xaf\x94'<+\xb4\xa2\xe88\x00\x8d\x92\xc3\xa2\x01\x9fo\xef\x1e\xa4\x0eOi\x8b\x84", b'\x03hy\xac\x0b\trPP\xdd\xd8\x901A\x93\xe5\xa3\x04\x83[D\xc7\xb4\xde\xd1\xa2O\x11\xd7\x01X\xdad\xcd\xe9\x90\r\x88\x98lM\xa3\xd8\x08\x01\xa1\x96\x9e\xa3-F.\x05\xa9[~\x17\x8a\xf9o\xf7\x1c\x9eu', b'\xc8\xef\x11\x1a\xa0/\x8et\xc2\x16[\xcc\xca\xc5\x92P71R\x1b\xb0\x8b\xcfg\xb3\xad+1\\\x93b?\x9fn\xa8k^D\xaf\x0bV&7\xf0\xa0\xf3\xbf\x19*X\xa1\xde\xb7K\x8b\xf4b+\xb5\xdbC\xb5\x11\x8e', b'/X\x0b9f\xd0\xe3\x85\x1c\xa3f8\xe7^\x91\xbc\x1aA)(\xb6\x05\xfd?\xb9i\xa7\x0c\xf7\xc9\x17\x023\xe7^c]\x04jj\xfb\xa2\xa3\x88\x91\x89\xfbCi\xcd\x1b\x01=\x0bP\xb3l\x9f\x0b\xb0;B\xb0\xb5', b'K={\xd8\x9b\xd9\xf5\x92\x86=\xee65\xd3\x8fJ\x1c\x16\x89\x82\x80~\x7f\tI\xcc~\xceC\xf9\xce\xb9UI]\xffU\x92)v,$c\xf90f=\xe5\x07\xf5H?\xe9\x1c#\x99\xef\x08\x92t^\x80\xa7a', b'{g\xc0\xa8\xff\x0b\xb4\x8b2_\xdcF\xad\xf5\xd3\x97\xca\xd4MD\x9b\xba\x99>\x1d\xc48\n\xbb\x17H\x9dCJ\xc27\x17\xa9\xd6\x10,d\xd6\xbe\x03\x0b)@\xb1Q\x8cP\xbc\xe3\xe0\x8e[\x8c=bcR\xe0P', b'\xc8\x86\xef=`@*\xb0\xcdF/\x0eK\xeen\x06\x11\xfcXmeW\xe4\xe4\rG";\xf6\x01[\xc7\x0c\x8dk\xa8\xd3\xe5\x14\x85\xd539\xd1\xd3\xf3k\xdb\x91%$ax\xda\xf5\xa3.\x0b\xe7\xe4\x18\xcb\xcc\xdd', b'\xaa\xf1\x8a\xf0\xf0^u\xb2x\x95\xf8\xbf<R\x90\x97\x88\x15U#:o\xac\xe5\xceF\xd4\xec4\x1fSS\x04\x01\xc0\x82Q\x9a\x8b\x83\xcb\xe7\xf6\x14\x8c\xe4CG?\xd7\xb3?\xa4\xae\xbeN\xbb\xbd\x8d\xd1J\xb5\r3', b'\xdb\xf2u\r\x9f\x9a\xb3\x86\xedG\x11Y\xbe\xe6*]\xec6\xd8i\x98J\xe22j\xa7Y\x8d\x8d|3\xcb^\xb3\xa8\xe75G\x04hm\xea\xb7\x00\xdfk\xfdf;\x05\xd8\xee\xccRr\xe9O\xad\x83\xff\x01O\x15\xbc', b'^9j\xdeX\xed\xc6\x8c\xc5\xccp\r\xa0\x87[\x08z\xc20\xbb\xa1P\x92b\xca>\xea$\xff\xdf\xea`\x95 ?A/\xb8\x03|B\xd8H\x04\xc9\xfc\xba\xa7\x81\xbe\x92\xdc\xa8`\xab(\xee\naF\xa8\xe1\xa4\xe5', b"b\xd2\xb8\\\xe0\x88\xb8lV\xba0>\xc3\xd6I$\xcbT\xd1\x99\x8b\xd7\x86\xe3\xf3=/\x80\xfc=\xc2\x91\xf5\x10\x9aE\x9b\xa6\xd3\xa8K\x82\xd3'4\xdb\xdb\xf7=\x92\xaa\xb4\xdb\x05\x81V#\x91\xb3\xa3\x80J\xbc\x96", b'=\xb9@:YW\x9b\xd3\x11\xae9#Q\xcf20e\xf5\x16\x04\xc6),\xb4\xc4`\x11\xd3\x8a<\x8eD\xc6\x97\x1c\x1c\x0f\xb2#\xe3.\xc3\x9d7\xc5\xad\x16\xb7\xd0f\x19!\xe1\xfdnc\x19\x07[\xe3\x93\xae\xad\x87', b'\xad%\x17\xa4\xaa\x16\x06\x0f\x9a\xdeZ\xdd\xa2`\x84\xe7\xf1\xd3\xed\xf2\xb04\x9f\x01\x10d\xf9\xa0g%\xf9a\xe4\xa39\xdf\xbe\x04\xec\xd9\x1e.4\x8dq]\xe0\x11\x05\xa7\x8c\xfar\x8cz\xd5\x05\xbc*\xb7\xf3\xb4\x9b\x8f', b'V\xa4\x05n\xd0=\x1eb\\%\xc8\x08\t\xebh\x12\x19xG\xee{\x97\x13\x94:o\xe4\x80\xffL\xf4(\x83\x937St\xdc\xb6\xd8\x96]5\x18\xf9\xdb\x98.\xb5\xd8h\x1cY\x9d\x9cP\x00\x96\x00\xcf\xca&\x98\xd0', b'\xe6T\xddtp\xc7\xdd\xda\xb3\x0e\x88\xea\x12\xcf\xbf\xd3\xfbA\x84\xd4\xa9\xa5\n$<JUMqr\xd2\xc4n\x10d\x8d\xf7g\xf4\x84}~\x8b\xfet\n\xdb\xff\x10\xa3\xd28w\xdc4~s\xa1\xa4\xec(\xf6\xadi', b'\xabw\xb7|\x86\x02\x10\xb4\x08\xff5\xce"\x05\xd7>7"\xc3\xce\xd3\x11\xc6W5Ou\xf5\xc9/\x86\xb5\xec\xe4w\x1bs\xf7\x84\xc6\x0b`\x8d\xcc\x80\xa6\xbe\x87\x96\xd8[!\x1e\xe98\xf0\\\xda\xc9*\xb5\xdc\xb4\xff', b'\xa7K\xd37+\x0b\xd3\x81\x9c4\x8a\xbd\x90f\x92\xc2DQX\r\xb9\x8b4\\\xe9\x94\x1d\xb5\xde\x93\xc4\xfa\x9d\x1cR\xc8\x9b\xc6\xde\x98\x03\x93\xc12\xa8\xcb\x1a[\xf1\xd8\xd1\x915\x82\xdbi\xd6\x94\xc95\xdd\xf3\xf4;', b'\xb8\x9c\xbd-\rm\xb8dP\x1e[\x9b\xfbT\xf7q\xe7-\xaf\xa0\xf7\xfc\x1b\xd7\x16\xf2\xf4\xd8\x7f\xcfm\xa8\x95\x85\xfa Z1{I\x07\x85E\xf8\xdd\xfb\xe6M\xaa\x04\x97BS\xd0\xb8\xec\xc3\xc4\xa3\xfe\xaf5\x84`', b'\x02q\xb5\xf5\x88a@\xd7\x8b\x8f\xc3C\x08F\x9f\xfds\x9b\x99G\x8d\xd1\x15\xc5Z.G\xeb^3\x06\x8f\n\xe6w\x8b\xa4\x86\xd3b \x9cs\xfey\x0eQj\xddT\x12{\x90]K\x17\x7f\x83\xf0kZ\xc97\xb1', b'\xfb\xd8\xc5\x92\x90\xef\xa1-\x97|\xba,\xbd,W\x01$j\xbc\xa0\x10\xfc0\xc5\xebx\xf7\xf6 \xe5\x12^\xaf$\x82\x1d\x03\xfd\xac\x1c\rA[F\xf5,p\xd7\xdcu\x03)\x92\xc4\xb9\xe1\x17\xe7\xa8\xba:\xe3r/', b'\x97;\xb1#\xaf\xad\xb7\xc9.\xfb\xfa\x8fZ\x8a\xe9C\xe7\xc1\xa726~X|((p\xa8\xa8\x9eX\xd2\xa0\x15\x12\xf1-Il\x86g\xe8d#D\x03\x83\xe6\xafx\xe5h\xa0\xfd\xdenlj\x1e\x9f\xab\xd3\xc4Z']
s2 = [b'\xa9s\x9e\xdbE^\xab\xef\xf0\x96p}\xd3M\x00\xad\xa5\xb2\x90AyE\xe4,$\x8e\r\x7f\xf2\xecM\x11', b'\xab\xfbE\t\xd8b%\xab\x0e\xaaf\xc6\x11\x85H\xf7!\xbe\x90\xd5z\xfe\xc3I\x95\xde\xbe\xd4\xd0<\xb7`', b'f\x97\xc6; \x16\xedB\xea\x9f\xbeM8\xe8\x86\xd9\x17\xa2y#\xfa\x971\xcdH\x92\x1c\xc1\\w\xe5U', b'jf\x8c\xb0P\xeb}:A\xeez\xbc\xaf8-\x08X\xebi\xca\xe2.\xe3@\xde\xfc\xc7\xd7\xa0d\x99k', b'r>V)\x81\x96|\x87\x99z\xd0E$<\x02\x1ao\x19\x1aV\xa4"\xf7\x1c5\x92<m5\x89\xea\'', b"Ouk\xb9\xb9,\xe1!_\xe3'k\xf8:v\xdfhZ\x85k\xc2@\xd8\xcba\xaf\xae\xd1v\xb4Z\xa8", b'|\x8e\xa2y\xc1\x91\xea\xab2\x89\x15q"\x89q?\xb3\xc8\xb1\xe6<\xbb\x0e\xb6\xf0=\xc8\xf2\xea\xb5\x08\xf6', b'\x1aa\x81\x80\xaa\xc2}\x9f\xf3\x9c\xbd\xc5\xeca\xbf`\xe2\xf1\x0eL\xab\x8aq\x82\x8ekkZ:\x91\xa5\xe1', b"\x94\x9a\xd4\xf6\xdf2\xb5\xff\x0fR\xeb0\xdc\xfd\xb1pl\x08B\xcf7\xa7\xc6\xf1\xfc\x8f'\xe5\xf4\x00\x8e$", b'OK\xbc\xa6+\xb1\x89(M&(\xa7\xa2\xbah\xf0Tu\xbb\xe62P\xb0Gd^l6\x1e\xe3Ym', b'\xde)\xa5c\xd0\x17=xw\xda\xe2n\xb8{pFVa\xdahg\xd5\xa0\xf7\x802_6\xc9\xcd\xb0\xf4', b'\xd6MM\x91\x1fU\xde8\xd2\x02\xe1?\xf8*\xc2\x15+\xfe\x10\xea\xbaA\x03\xc7r\x1b]Y\x85\xff\xa9\x1b', b'K\xbfR+P\xfb\xdf\x93\xa6n\x8f\xe0\xf4`\x88\xe0\xc6E;\xb7\x8a\xa5\xb5\xff"t\x082\xa37\xd1\x12', b'U\xfd.th\xba\xd8\x1a\xf3\xc4Y\xeb\xfa#3$\xc0\xda\xa8\x90\xa7\x9a\x10E\xc3\xf3\xb3\x04\xd6\x06\xcf\xe9', b'\x83\xed\xf7`\n\xfc\r\xdd\x8a\x0f\x9b\x87m\x07\x02\xab"\x9e\xc5j\xf2EP\x82r\xa5\xa5\xb6=\x0f\x14\xa3', b'\xfb\x90\xf0\xb0\xe8)C\xffnS/|\x85\xf2j\xa7ur\x05\xdd\xe8HFW`2\x80O\x0e4\x91\xdc', b'\x98\xf4_\xe9?\xa8t \xcaH k\x1e\xa6\x0c7\xb3w\xec\x14\xed[\xbf\xbf\xb5\xe8\xfeUS\x89o\x8c', b"+\x10\x90aS\x06\xeb\x98?V\xd7\x92Z^\r\x93sB\xba'\xe0\xafi\x80\xf4\xe3\xdbLu\x82\xf2\x96", b'o\n\x1c\x92\xc8w\xc5j\xbbGnI7\x0c\xc2&<\xebL[\x1e9H@c\xff8h7M\xb0P', b' \x91PAo\x8c\xcb\xc3IH\xc6\xbc,!\x10\xf0c\x05\x94\x9en\xa8B\xdbkm\xaf\xb5\xbf\xc8\xcd\xeb', b'5\xc54n \xda\x95h\xe4\xbd\xad\tm\xe7\x80jfr\x1ej\xedO\xb5\xc1 \x83\xb5\xc3\xc8\xbbHV', b'X\xe3\xda\x97[\xf2]\xf6gwa\xa2\xb5\xa9\x90\rL)\x17XA6\xf8n\x7f\xb0R\xdf\x8a\x9b\xe1*', b'\xc1\x9b"U;)\xea\x85L\xeeC\xc6\xa6\xc8a+\xf8n\x00\x01L\xd9i\xd3R\xc1\xf5\xd1\xa7j\xf35', b'G*\xce\xf7\xf2\xdd\xac\xd8\xa6)u\xd6\xf5oj\x9d\xee\xd7\x89\x86/h\x90QI\x1b\xd3\xeeH\xcf\xbd\xa5', b'\xa7\xa5\xe9\x1e+1\x0fx\xd4U\xfc\x92\r\x17\xae\x13\xee\x0f\xb5I\xc9S\xff~\x94\xbeZ\xc8[\x14\xa2\xb5', b'%K\t\x80\x0b\x13(\xf9y_\x8d\xa5Up\xbeeFW\xe1\xd9D\x88\xdd\xe7SV\xf3\xf1\x87Q\xe3\xb4', b'\x9ai0zJx\xa2\xb4\xff\xe5|\xf9vO\xc2\x96FY)1\x92\xfb\xe7\xfd[1\x96d\xa2\x88\xa0\x97', b'\xc6\xdd\xfb\xc2T\xe4E\xd8\xbe\xf6\xe3ef\xa5\xc9\xe2\x0e\xcc\xb719\x94Ay05\xa6\xdci$\xec\xb7', b'\x99Z\x8f-\xc8\x87\xda^O\x0f\x19\x88. S\x8f?\x008\xff?S~\xcf*\xd8[H\xc56\xa5W', b'\x97\x01\x9e\xea\x84\xbdVR\x9b{\xbd\x9a\xd3\x07\x16M\x95AX\x83\xbe\xe1j\x1f\xe3\xdf/u!\xd8}b', b'ba\x18\xbd\\t\x8bc\x9esW\x13q\xeeX\x01\xa9\xf7\xbc\xb9\xa5\x01\xfd\xa4\xeb\xfa*\xe8_\xdc\x9d@', b'\xb1)8\x0f(\x89fD\x05;\xb3\xf2\x1b\x9da\x0b\xe1\x9d\x8d\x8c\xache},\xcay\xec\xf0\xd2\xfb\x11', b'\xaf\t\x0c\x84\x1b\x14,\x04.\\\xcd\xde\xfd\xb9\x16j\x02O\xd6\x7f\x87\xab[!\xa8\x8e\xb2qH\xe6\xc1)', b"\xd0\xa6 \xcf\xddUNN\x99\x1aQ\xf3?\x1bL\xba\xd3r\x1e\x81\x04F\x90o\xecm'uc:F\xb7", b'aR\x00\x8a~\x1cZ(\x18\x01\xdf}\x9b;\xd82\xb1y\xbdN\xdb\xb4tC)\xfd(k\x8c\x8a\xacJ', b'\t\xf83t\xee\x1dB\x89p\x9c\xd8t_>\xae\x84\x1c\xdb\xdbrm\xf1\xder\xf5j\xf2\xc8|d\x03\xbb', b'\x9b\x04CA\r\xaf\xb1\xd9\x84n\x1f\xd0\x04\xa5u\xea\xee\x99\xac\x898\x19\x9a\xf7\xd4\x1aB"\xf6\xec\xa0"', b'\xe0\xe7r\xfd\xab)s\xd3\xa0\xc5-\x93\xf8\x92\xb4\xaef\x86\xfflI\xd1\xa3\xd66\xcf\x18\xcd\xe7\x10A\x1f', b'\xf3_D\x8d\x04\xcb:\xb7J&[&Q\x92\xbc\xa6zF\x13\xf6z\x82\xe13\xc2\xeb\x13\x1e\xd8{\xd1q', b'RW\xe2\xb3i\x8e\xbe\x81\x17gN\xdex\x15\xdf(\xcc\xcf!J\x16\xf3~\xdf\xc8z\xdc\xca\xa8\x0f\xc3\x15', b'\xfe\x1a\xe0\x05`S\xca\x88\xe2\xb1k\xbf-\xf5\xe0c\xec%0\xf7Qt\x8d\x19)\x7f\xf8\x1b\x91\x7fM\xc2', b'I$\xeb\xc7\\@)\xdd"\xe9\x91\x8c#5\x8d\xa0x\x12\xb4K\xdcU\xb9\xf6\x0e\xaa\x07<g\x06H\x97', b'\xa4$\x7f`\x9e\x83s\xcb\xfc\xbc\xba\xb4\x18\xd4sh\xf2DO!\xf8u\xef\xe0\x90\xc7\x12\x9f;K\xb1\xc9', b'\xdd`\xa4Hh\xbdk/\xb6\xc0~\xe6\xe4\x8eql\x93\xd11*h\x00\xdc\xc5\xee}\xd1\x19\x06h\x80\x92', b'\x91\xc7\x0e\x07\x8aV\x11c\xbar\x10\x04vxDHP\xe8{\xecZ\x17l\xcb\x98=\xe6\x0c\xa0\xca\x8c\xb4', b"\xc1\xc0]QB\xa3z'\xf8dY\x904wr\xa316\xe7\xaf\x14l\xd58IVjh\xfb\xb8\xd01", b"\xffB$#\x82\xcc\xa4\x9a\xb7\x0b\x15^4 \x9dK\x19m\xde>\x9bvK<\xb6\xfa'\x15\xdd1N$", b'\xfc8\xafS\x85$\xd2\xb5\x95\xb4\x0c\x83\x86\xd0\xa5\xe1S=\xb8Q>\xd8\n\x9c\xe1;X\xafuo\xdd6', b'\x11\x93\x1a\xf5\xe5{"\xf4H\xea5?~\x9dY\xc4\x00\n\xba\xc5\x9f`\x84`\xd8\x94\xff\\\xbdU\x89W', b'\xf1\xd73X\xe8\xc77Ale\'\xe9\x8e\x96"\xb2*\xcf\xad=\x02\xc0\xdc\xa4\xe1\x96}q\xf2-\x8c\xaf', b'f\xef\xa0TI\xed9\xd5\n\xa0#\xef\x9a\xcev\x88T\x1e\xd3Q\x9b\xbf\xc6\xebWul\xa3l\xa6\xd9\xe2', b'\x81SV(vo\xbf}Q7\ty\xf3\x04FB~4A\xaa#\x8fO\x92ta\x1e>2\x02\xd6U', b'g\x94\x04h\x97u\x00\xb6\\b\x84\x91/\xc2\x8b\x10\xd7\xd1=M=M\xc3s\xe9\xb3\x8a\xdc\xcc\xde\xf8\xda', b'\x10\x15B\x83\x05\xf2iA+\xc7.\xa3\x9fI\x81\xcdgv\x04\xbe\xb9\x89\x90v\xa5/\xce\xda\xd5\x9e`\xe2', b'\xab^\xc3\x06\xf0E\x90\x8cz\xc0\xb3\x07\xdb\xeef\xcb)p\x12\xec\x80\x06\xd98\xecx\xf8{\x0f\x8a\xbdJ', b'\x82\xe9\xe4\x1d:\xd08Xc\xeb\xdb|\x1c5\xc3\xee\xdf\xaa\x06\xf3\xd0\xde&\x1f\x12\x010_\xa5\xa3\xa2F', b'y\rp\xb5LX\xf1\xfd X\xd2\x07\xbb\x18\x90\xc2\xa2\xef\xdb"@\x0f\xb1\xdb\x1cGhA\x99\x11[\x0f', b'1M\x00\x18L\xd0QB\xaf\xdekI\xe5rW\x96\x0fji)\xaf\xd0\x0e(\xfdb\x8fhO\x8bf\xcb', b'\xef|H\xca\xd9\xab\xcc\xce\xfe\xe9%\xe4\xa3\xd8\xbb\x02\x8c\xe4vC\x83\xd0\xb3\x80~\xddU\xe8\xd2Q\xce\xec', b'\x11\x12\xf6{(\x14\xcd\xe1\xfa\xee\xf5\xb78a\xb5\xb6\x87"\xb3\x17\x9c\x00\x0e\xec9W\xf6\xe5a\xc4\x16\xff', b'C\xf9\xc3u\xa3\xcf\x1f\x01\x92U,q\xbc\x19q\x1b\xe4\x96\xe7>\x87a\xaf?\xb8\x16\x93\xd6\x8c\x80\x1eW', b'\x93\x94\x06X\t\xb3\xdeb\n\xba\x11*af\x98\xcf\xb6=\xcd\xee\xdc,\xbf\x87\xeb\xe6gE\x86\x1fKU', b'\x0c\xd9\xd5\xa2S0\xac\xd5\xb8\x7f|P\xeb\x08\x9d\xdc~\x03c\xe1:\xc4\xf3$N\x02\xb9\xec\x121\xca\x82', b'\xb5\xdb3N0@V%]\xfa\xf1\xf9?\xe7\xef\xee\xe8\xde\xdcq*\x82\x9c\xc0\xcdq\xe9\xe1\xa6 ~\xd9']
s = b'\xab\x066\xe0~\x9d7\x16\x94\x17\xf9\x10a&\xc6T\xb5\x89K\x8a\x95T?\xf7\xc6\x02\xacr\xfaf\xd8\xb3'

# VerASNL(P1, P2, L1, s2, s);


sendVerRang(P1, L1, s2, s)
sendASNL(P1, P2, L1, s2, s)

# # test()