from secp256k1 import * 
import struct
import random
import hashlib
import sha3
import binascii
import ecdsa
from ecdsa import SigningKey, VerifyingKey
from six import b
from ecdsa.ellipticcurve import CurveFp, INFINITY, Point
import time


from ethjsonrpc import EthJsonRpc
from ethjsonrpc.constants import BLOCK_TAGS, BLOCK_TAG_EARLIEST, BLOCK_TAG_LATEST

timeTo = 2600
debug = True
rangSigBool = True
MAX_AMOUNT = 2**64;
MAX_MIXIN = 10; 
crv=ecdsa.SECP256k1
g = SigningKey.generate(curve=crv)
P = 2**256 - 2**32 - 2**9 - 2**8 - 2**7 - 2**6 - 2**4 - 1
G = "0479BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8"
curveOrder = "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141"

connection = EthJsonRpc('localhost', 8545)
cb = connection.eth_coinbase()
# contractAddress = "0xa7b1800d46dd564278053eeb06cbdfdce3798c98" 
ATOMS = 64

def hash_to_point(pubK):
    return g.from_string(hashlib.sha256(pubK).digest(), curve=crv).verifying_key

def hash_to_point_special(pubK):
    p = VerifyingKey.from_string(pubK).pubkey.point
    return hash_to_point(to_32_bytes_number(p.x())+ to_32_bytes_number(p.y()))

def to_32_bytes_number (val, endianness='big'):
    # see https://stackoverflow.com/questions/8730927/convert-python-long-int-to-fixed-size-byte-array/28057222
    fmt = '%%0%dx' % 64
    s = binascii.unhexlify(fmt % val)
    if endianness == 'little':
        # see http://stackoverflow.com/a/931095/309233
        s = s[::-1]
    return s

def to_int_from_bytes(val, endianness= 'big'):
    return int.from_bytes(val, byteorder=endianness)

def add_2_32b(a, b):
    return to_32_bytes_number((to_int_from_bytes(a) + to_int_from_bytes(b)) % crv.order)

def sub_2_32b(a, b):
    return to_32_bytes_number((to_int_from_bytes(a) - to_int_from_bytes(b)) % crv.order)

# def create_contract():
#     compiled = "60606040527f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f817986000557f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b860015560406040519081016040528060005481526020016001548152506002906002610076929190610120565b5060206040519081016040528060026002806020026040519081016040528092919082600280156100bc576020028201915b8154815260200190600101908083116100a8575b505050505081525060046000820151816000019060026100dd929190610160565b5050507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f600655600560075560066008556007600955341561011b57fe5b6101c5565b826002810192821561014f579160200282015b8281111561014e578251825591602001919060010190610133565b5b50905061015c91906101a0565b5090565b826002810192821561018f579160200282015b8281111561018e578251825591602001919060010190610173565b5b50905061019c91906101a0565b5090565b6101c291905b808211156101be5760008160009055506001016101a6565b5090565b90565b610890806101d46000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637422d36414610046578063ecd31f60146102e9575bfe5b341561004e57fe5b610166600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020016000905b82821015610158578484839050604002016002806020026040519081016040528092919082600260200280828437820191505050505081526020019060010190610113565b5050505050919050506104b5565b604051808060200180602001858152602001806020018481038452888181518152602001915080519060200190808383600083146101c3575b8051825260208311156101c35760208201915060208101905060208303925061019f565b505050905090810190601f1680156101ef5780820380516001836020036101000a031916815260200191505b50848103835287818151815260200191508051906020019080838360008314610237575b80518252602083111561023757602082019150602081019050602083039250610213565b505050905090810190601f1680156102635780820380516001836020036101000a031916815260200191505b508481038252858181518152602001915080516000925b818410156102d3578284906020019060200201516002602002808383600083146102c3575b8051825260208311156102c35760208201915060208101905060208303925061029f565b505050905001926001019261027a565b9250505097505050505050505060405180910390f35b34156102f157fe5b6104b3600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919080359060200190919080359060200190919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020016000905b828210156103c157848483905060400201600280602002604051908101604052809291908260026020028082843782019150505050508152602001906001019061037c565b50505050509190803560001916906020019091908035906020019091908035906020019091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020016000905b828210156104a5578484839050604002016002806020026040519081016040528092919082600260200280828437820191505050505081526020019060010190610460565b5050505050919050506106c9565b005b6104bd61083c565b6104c561083c565b60006104cf610850565b7f551303dd5f39cbfe6daba6b3e27754b8a7d72f519756a2cde2b92c2bbde159a76040518080602001828103825260138152602001807f2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d0000000000000000000000000081525060200191505060405180910390a17f43123f7005ece31cd2478fa2cd0bec5ea2e353c1c3fe9ca390a6de2ab917eac96040518080602001828103825260168152602001807f576520676f742061206e696365206d6573736167653a0000000000000000000081525060200191505060405180910390a17f43123f7005ece31cd2478fa2cd0bec5ea2e353c1c3fe9ca390a6de2ab917eac9886040518080602001828103825283818151815260200191508051906020019080838360008314610610575b805182526020831115610610576020820191506020810190506020830392506105ec565b505050905090810190601f16801561063c5780820380516001836020036101000a031916815260200191505b509250505060405180910390a17f43123f7005ece31cd2478fa2cd0bec5ea2e353c1c3fe9ca390a6de2ab917eac96040518080602001828103825260138152602001807f2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d0000000000000000000000000081525060200191505060405180910390a18787878793509350935093505b945094509450949050565b6000600088518a8c02141515610768577f551303dd5f39cbfe6daba6b3e27754b8a7d72f519756a2cde2b92c2bbde159a760405180806020018281038252602b8152602001807f4d69736d6174636820696e207468652064696d656e73696f6e206f662074686581526020017f206b6579206d617472697800000000000000000000000000000000000000000081525060400191505060405180910390a15b7f43123f7005ece31cd2478fa2cd0bec5ea2e353c1c3fe9ca390a6de2ab917eac98c60405180806020018281038252838181518152602001915080519060200190808383600083146107d9575b8051825260208311156107d9576020820191506020810190506020830392506107b5565b505050905090810190601f1680156108055780820380516001836020036101000a031916815260200191505b509250505060405180910390a1600090505b8381101561082d575b8080600101915050610817565b5b505050505050505050505050565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a72305820a5fa078f0f18cb8426d0c3bc94628d48f90145b19b0de014beb6764f4c00e7ca0029"
#     blockNumber = connection.eth_blockNumber()
#     contract_tx = connection.create_contract(connection.eth_coinbase(), compiled, gas=300000)
#     print("tx " + contract_tx)
#     contract_addr = connection.eth_getTransactionReceipt(contract_tx)
#     while(contract_addr == None):
#         print("waiting")
#         time.sleep(0.5)
#         contract_addr = connection.eth_getTransactionReceipt(contract_tx)
#     global contractAddress
#     contractAddress = connection.get_contract_address(contract_tx)
#     print("addre" + contractAddress)


def ecdhEncode(mask, amount, receiverPk): 
    # mask: the mask to hide (32 bytes number)
    # amount: the amount to hide (32 bytes number)
    # receiverPk: the receiver pk (sec format)
    ## return: newMask: hidden mask (32 bytes number)
    ##         newAmount: hidden amount (32 bytes number)
    ##         senderPk: the public key genereated by the sender to encode this amount (sec format)

    secret = to_32_bytes_number(random.randrange(crv.order))
    senderSk= g.from_string(secret, curve=crv)
    senderPk = senderSk.verifying_key
    recvPubKey = VerifyingKey.from_string(receiverPk, curve=crv)
    to_hash = VerifyingKey.from_public_point(recvPubKey.pubkey.point * to_int_from_bytes(secret), curve=crv).to_string()
    sharedSecretInt = to_int_from_bytes(hashlib.sha256((to_hash)).digest())
    newMask = (to_int_from_bytes(mask) + sharedSecretInt) % crv.order
    newAmount = (to_int_from_bytes(amount) + sharedSecretInt) % crv.order
    return  to_32_bytes_number(newMask), to_32_bytes_number(newAmount), senderPk.to_string()

def ecdhDecode(mask, amount, senderPk, receiverSk): 
    # counter method to ecdh encode
    # mask: the hidden mask (32 bytes number)
    # amount: the hidden amount (32 bytes number)
    # senderPk: the public key genereated by the sender to encode this amount (sec format)
    # receiverSk: the receiver sk (32 bytes number)
    ## return: newMask: unhidden mask (32 bytes number)
    ##         newAmount: unhidden amount (32 bytes number)

    sendPubKey = VerifyingKey.from_string(senderPk, curve=crv)
    to_hash = VerifyingKey.from_public_point(sendPubKey.pubkey.point * to_int_from_bytes(receiverSk), curve=crv).to_string()
    sharedSecretInt = to_int_from_bytes(hashlib.sha256((to_hash)).digest())
    newMask = (to_int_from_bytes(mask) - sharedSecretInt) % crv.order
    newAmount = (to_int_from_bytes(amount) - sharedSecretInt) % crv.order
    return to_32_bytes_number(newMask), to_32_bytes_number(newAmount)

def createTransaction(message, inPk, inSk, inAmounts, destinations, outAmounts, mixin):
    # inPk: vector of public keys corresponding to the owner inputs(sec format)
    # inSk: vector of private keys corresponding to the public keys (format 32bytes number)
    # inAmounts: vector of number corresponding to the amount coming from corresponding public key
    # destinations: vector of public keys (sec format)
    # outAmounts: vector of the different amounts going to the respective destinations public keys (int)
    # mixin: the number of pk to get involved in the rings (int)
    ## return: destinations: a vector of destinations public keys as received (sec format)
    ##         destinationsCommitment: a vector of commitment assigned to each destinations public keys (32 bytes numbers)
    ##         I: part of MLSAG, a vector of pk in sec format corresponding the the sha256 hash of the sender pk 
    ##         c_0: part of MLSAG, first sha3_256 (keccak) of the consecutive series of the MLSAG 
    ##         ss: part of MLSAG, a matrix of "random" 32 bytes number
    ##         infos: an array of ecdhEncode result containing the amount paid to the corresponding output pk
    ##         rangeSig: vector of rangeSig (format TODO)

    print("------ Let's create a the transaction -------")
    assert mixin < MAX_MIXIN and mixin > 0, "The number of ring participant should be between 0 and " + str(MAX_MIXIN) + "\n Aborting..."
    assert len(inSk) == len(inPk) and len(inAmounts) == len(inPk), \
        "The number of private key doesn't match the number of public key or the number of input amounts.\n\
        Aborting..."
    assert len(destinations) == len(outAmounts), \
        "The number of outputs addresses should match the number of outputs amounts.\n\
        Aborting..."
    m = len(inSk)
    for i in range(0, m):
        assert inAmounts[i] > 0 and inAmounts[i] < MAX_AMOUNT, \
            "The ingoing amount #" + str(i) + " should be between 0 and " + str(MAX_AMOUNT) + "\n\
            Aborting..."
    outNum = len(destinations)
    for i in range (0, outNum):
        assert outAmounts[i] > 0 and outAmounts[i] < MAX_AMOUNT, \
            "The outgoing amount #" + str(i) + " should be between 0 and " + str(MAX_AMOUNT) + "\n\
            Aborting..."

    for i in range(0, m):
        assert g.from_string(inSk[i], curve=crv).verifying_key.to_string() == inPk[i], \
            "One secret key doesn't match the corresponding public key.\n\
            Aborting..."

    print("------ All arguments are good, next ! -------")

    inSkMasks = [] 
    inPkMasks = [] 
    for i in range(0, m):
        skMask = to_32_bytes_number(random.randrange(crv.order))
        inSkMasks.append(skMask)
        pkMask = g.from_string(skMask, curve=crv).verifying_key
        aH = hash_to_point(to_32_bytes_number(1)).pubkey.point * inAmounts[i]
        pkMaskPoint = pkMask.pubkey.point + aH
        inPkMasks.append(VerifyingKey.from_public_point(pkMaskPoint).to_string())

    destinationsCommitment = []
    infos = []
    rangeSig = []
    outSkMasks = []
    for i in range(0, outNum):
        print("------Creating rangeproof for amount#" + str(i+1) + "-------")
        outCommit, outSkMask, rg = proveRange(outAmounts[i])
        destinationsCommitment.append(outCommit)
        outSkMasks.append(outSkMask)
        rangeSig.append(rg)
        hiddenMask, hiddenAmount, senderPk = ecdhEncode(outSkMask, to_32_bytes_number(outAmounts[i]), destinations[i])
        infos.append([hiddenMask, hiddenAmount, senderPk])

    print("------  Rangeproofs are valid. Next   -------")

    pkMatrix, pkMasksMatrix, index = populateFromBlockchain(inPk, inPkMasks, mixin)

    print("------Matrix populated, going further!-------")

    if debug:
        (newMatrix, (I, c_0, ss)) = prepareMG(message, pkMatrix, pkMasksMatrix, inSk, inSkMasks, destinationsCommitment, outSkMasks, index)
        print("------Transaction created with succes!-------")
        return newMatrix, destinations, destinationsCommitment, I, c_0, ss, infos, rangeSig
    else:
        (newMatrix, (I, c_0, ss)) = prepareMG(message, pkMatrix, pkMasksMatrix, inSk, inSkMasks, destinationsCommitment, outSkMasks, index)
        print("------Transaction created with succes!-------")
        return newMatrix, destinations, destinationsCommitment, I, c_0, ss, infos, rangeSig

def verTransaction(message, newMatrix, I, c_0, ss, infos, rangeSig):
    for rg in rangeSig:
        verRangeProofs(rg)
    verifyMG(message, newMatrix, I, c_0, ss)

def prepareMG(message, pubsK, pubsC, inSk, inSkMask, outC, outSkMasks, index):
    # pubsK: matrix of public key (size: qxm, sec format)
    # pubsC: matrix of commitment for pk (size: qxm, 32bytes)
    # inSk: vector of private key (size: m, bytes32 format)
    # inSkMask: vector of mask for the corresponding sk (size: m, 32bytes)
    # outC: vector of commitment for pk (hidden amount) (size: outPKsize, 32bytes)
    # outSkMasks: vector mask for out public keys (bytes32)
    # index: index of where in the pubsK matrix our pks are located
    ## returns: same a genMG

    print("------ Preparing the matrix for the MG-------")

    rowsQ = len(pubsK)
    if debug:
        assert len(pubsK) == len(pubsC) and len(pubsK) > 0, "\
            Mismatch in the number of public commitment and keys.\nAborting..."
    colsM = len(pubsK[0])
    if debug:
        assert len(inSk) == len(inSkMask) and len(inSk) == colsM, \
            "Mismatch in the number of private keys or private key masks.\nAborting..."
        for i in range(0, rowsQ): 
            assert len(pubsK[i]) == len(pubsC[i]) and len(pubsK[i]) == colsM, \
                "Mismatch in the number of public commitment and keys.\nAborting..."
        assert index >= 0 and index < rowsQ, "index: " + str(index) + " should be between 0 and "\
            + str(rowsQ) + " (the number of public key).\nAborting..."
        assert len(outC) == len(outSkMasks) and len(outC) > 0, \
            "Mismatch in the number of private commitment and keys.\nAborting..."

    matrix = [[None for x in range(colsM + 1)] for y in range(rowsQ)]
    sk = [None for x in range(colsM + 1)]
    for i in range(colsM):
        sk[i] = inSk[i]
        if i == 0:
            sk[colsM] = inSkMask[i]
        else:
            sk[colsM] = add_2_32b(sk[colsM], inSkMask[i])
        for j in range(rowsQ):
            matrix[j][i] = pubsK[j][i]
            if i == 0:
                matrix[j][colsM] = VerifyingKey.from_string(pubsC[j][i]).pubkey.point
            else:
                matrix[j][colsM] = matrix[j][colsM] + VerifyingKey.from_string(pubsC[j][i]).pubkey.point

    for i in range(len(outC)):
        sk[colsM] = sub_2_32b(sk[colsM], outSkMasks[i])
    for i in range(rowsQ):
        for j in range(len(outC)):
            point = VerifyingKey.from_string(outC[j]).pubkey.point
            matrix[i][colsM] = matrix[i][colsM] + VerifyingKey.from_public_point(Point(crv.curve, point.x(), (-point.y()) % crv.curve.p(), crv.order)).pubkey.point

    for j in range(rowsQ):
        matrix[j][colsM] = VerifyingKey.from_public_point(matrix[j][colsM]).to_string()

    print("------ Done with the matrix for the MG-------")

    #TODO message
    return (matrix, genMG(message, matrix, sk, index))



def list_to_bytes(list):
    # [[None, None] for x in range(m)]
    ret = to_32_bytes_number(list[0][0]) + to_32_bytes_number(list[0][1])
    for x in range(1, len(list)):
        ret += to_32_bytes_number(list[x][0]) + to_32_bytes_number(list[x][1])
    return ret

def genMG(message, matrix, sk, index):

    n = len(matrix)
    if debug:
        assert n > 0, "No public key received.\nAborting..."
    m = len(matrix[0])
    if debug:
        assert m == len(sk), "The number of secret key doesn't match the number of public key.\nAborting..."
        for i in range(0, n):
            assert len(matrix[i]) == m, "Public key array is not rectangular.\nAborting..."
        assert m > 0, "No public key in the array.\nAborting..."
        assert index >= 0 and index < m, "Not a valid index.\nAborting..."
        for i in range(0, m):
            assert g.from_string(sk[i], curve=crv).verifying_key.to_string() == matrix[index][i], \
                "One secret key doesn't match the public key. Index: " + str(i) + "\n\
                Aborting..."

    message_bytes = bytes(message, 'UTF-8')

    alpha = [None for x in range(m)]
    I = [None for x in range(m)]
    ss = [[None for x in range(m)] for y in range(n)]
    
    L = [[[None, None] for x in range(m)] for y in range(n)] 
    R = [[[None, None] for x in range(m)] for y in range(n)] 

    for j in range(0, m):
        skJHashPub_point = hash_to_point(matrix[index][j]).pubkey.point * to_int_from_bytes(sk[j])
        I[j] = VerifyingKey.from_public_point(skJHashPub_point, curve=crv).to_string()
 
        alpha[j] = to_32_bytes_number(random.randrange(crv.order))
        LPoint = g.from_string(alpha[j], curve=crv).verifying_key.pubkey.point
        L[index][j] = [LPoint.x(), LPoint.y()]

        alphaHashPub_point = hash_to_point_special(matrix[index][j]).pubkey.point * to_int_from_bytes(alpha[j])
        R[index][j] = [alphaHashPub_point.x(), alphaHashPub_point.y()]

    c_idx_1 = sha3.keccak_256(message_bytes + list_to_bytes(L[index]) + list_to_bytes(R[index])).digest()



    c = c_idx_1
    c_0 = None
    for i in range(1, n): 
        idx = (index + i) % n
        for j in range(0, m):
            # assert ss[idx][j] == None, "Hmm sounds bad"
            ss[idx][j] = to_32_bytes_number(random.randrange(crv.order))

            c_PubK = VerifyingKey.from_string(matrix[idx][j], curve=crv).pubkey.point * to_int_from_bytes(c)
            sj_G = g.from_string(ss[idx][j], curve=crv)
            L_point = c_PubK + sj_G.verifying_key.pubkey.point
            L[idx][j] = [L_point.x(), L_point.y()]


            c_I = VerifyingKey.from_string(I[j], curve=crv).pubkey.point * to_int_from_bytes(c)
            R_point = hash_to_point_special(matrix[idx][j]).pubkey.point * to_int_from_bytes(ss[idx][j]) + c_I
            R[idx][j] = [R_point.x(), R_point.y()]

        c = sha3.keccak_256(message_bytes + list_to_bytes(L[idx]) + list_to_bytes(R[idx])).digest();
        if idx == n-1:
            c_0 = c

    print("------ Done with generating the MLSAG -------")

    if debug:
        # sanity check:
        L_tmp = [[None, None] for x in range(m)]
        R_tmp = [[None, None] for x in range(m)]

        for j in range(0, m):
            ss[index][j] = to_32_bytes_number((to_int_from_bytes(alpha[j]) - to_int_from_bytes(c) * to_int_from_bytes(sk[j])) % crv.order)

            c_PubK = VerifyingKey.from_string(matrix[index][j], curve=crv).pubkey.point * to_int_from_bytes(c)
            sj_G = g.from_string(ss[index][j], curve=crv)
            L_point = c_PubK + sj_G.verifying_key.pubkey.point
            L_tmp[j] = [L_point.x(), L_point.y()]

            c_I = VerifyingKey.from_string(I[j], curve=crv).pubkey.point * to_int_from_bytes(c)
            R_point = hash_to_point_special(matrix[index][j]).pubkey.point * to_int_from_bytes(ss[index][j]) + c_I
            R_tmp[j] = [R_point.x(), R_point.y()]

        c_tmp = sha3.keccak_256(message_bytes + list_to_bytes(L_tmp) + list_to_bytes(R_tmp)).digest()
        assert L_tmp == L[index] and R_tmp == R[index], "Sanity check for computing ss[index] failed.\nAborting..."

    if debug:
        assert verifyMG(message, matrix, I, c_0, ss), "Ring verification failed.\nAborting..."
        print("--------- Done with verifying the MLSAG  -------")
        return I, c_0, ss
    else:
        return I, c_0, ss

def verifyMG(message, matrix, I, c_0, ss):
    n = len(ss)
    assert n > 0, "No ss in the ring signature. Length = 0."
    assert len(matrix) == n, "Mismatch"
    m = len(ss[0])
    for i in range(0, n):
        assert len(ss[i]) == m, "Non rectangular ss in the ring signature."
    assert m > 0, "No ss in the ring siganture. Length ss[0] = 0"
    assert len(I) == len(ss[0]), "Not the same number of pubkey hash (I) as of secret (ss)."

    message_bytes = bytes(message, 'UTF-8')

    L = [[[None, None] for x in range(m)] for y in range(n)] 
    R = [[[None, None] for x in range(m)] for y in range(n)] 

    c = c_0
    for idx in range(0, n): 
        for j in range(0, m):
            # print("----- " + str(idx * m + j) + "")
            c_PubK = VerifyingKey.from_string(matrix[idx][j], curve=crv).pubkey.point * to_int_from_bytes(c)
            sj_G = g.from_string(ss[idx][j], curve=crv)
            L_point = c_PubK + sj_G.verifying_key.pubkey.point
            L[idx][j] = [L_point.x(), L_point.y()]
            # print(sj_G.verifying_key.pubkey.point.x())
            # print(sj_G.verifying_key.pubkey.point.y())
            # print("^^^^^^^")
            # print(c_PubK.x())
            # print(c_PubK.y())
            # print("++++++")
            
            c_I = VerifyingKey.from_string(I[j], curve=crv).pubkey.point * to_int_from_bytes(c)
            p = hash_to_point_special(matrix[idx][j]).pubkey.point * to_int_from_bytes(ss[idx][j])
            # opo = VerifyingKey.from_string(matrix[idx][j]).pubkey.point
            # print(opo.x())
            # print(opo.y())
            # opo2 = hashlib.sha256(to_32_bytes_number(opo.x())+to_32_bytes_number(opo.y())).digest()
            # print(int.from_bytes(opo2, 'big'))
            # print(g.from_string(opo2).verifying_key.pubkey.point.x())
            # print(g.from_string(opo2).verifying_key.pubkey.point.y())
            # print("^^^^^^^")
            # print(g.from_secret_exponent(int.from_bytes(opo2, 'big')).verifying_key.pubkey.point.x())
            # print(g.from_secret_exponent(int.from_bytes(opo2, 'big')).verifying_key.pubkey.point.y())
            # print("++++++")
            # print(str(p.x()))
            # print(str(p.y()))
            # print("......")
            # print(str(c_I.x()))
            # print(str(c_I.y()))
            # print("******")
            R_point = p + c_I
            R[idx][j] = [R_point.x(), R_point.y()]

        # print(L[idx])
        # print(R[idx])

        c = sha3.keccak_256(message_bytes + list_to_bytes(L[idx]) + list_to_bytes(R[idx])).digest();
        # print("CCCCCCCC = ", end="")
        # print(str(int.from_bytes(c, 'big')))

    return c == c_0

def populateFromBlockchain(publicKey, inPkMasks, mixin):
    # publicKey: vector of pk, sec format
    # inPkMasks: vector of bytes32 (format from verifyingkey.to_string())
    # mixin: number of other pk involved, int
    ## return: pk matrix (format sec), 
    ##         coressponding masks matrix, 
    ##         index of our pks in the matrix

    if debug:
        assert len(publicKey) == len(inPkMasks), \
            "Mismatch in the number of public key and their corresponding mask\n\
            Aborting..."
    m = len(publicKey)
    index = random.randrange(mixin - 1)
    pkMatrix = []
    maskMatrix = []
    for i in range(0, mixin):
        if i != index:
            pkMatrix.append([getKeyFromBlockchain() for i in range(0, m)])
            maskMatrix.append([hash_to_point(to_32_bytes_number(random.randrange(crv.order))).to_string() for i in range(0, m)])
        else: 
            pkMatrix.append(publicKey)
            maskMatrix.append(inPkMasks)
    return pkMatrix, maskMatrix, index

def getKeyFromBlockchain():
    #TODO
    ## return: a public key "from the blockchain" in the to_string format
    x = to_32_bytes_number(random.randrange(crv.order))
    return g.from_string(x).verifying_key.to_string()

def GenSchnorrNonLinkable(x, P1, P2, index):
    # x: bytes32 number
    # P1: pubkey in to string format bytes32
    # P2: pubkey in to string format bytes32

    if index == 0:
        a = to_32_bytes_number(random.randrange(crv.order))
        L1Point = g.from_string(a).verifying_key.pubkey.point
        s2 = to_32_bytes_number(random.randrange(crv.order))
        c2 = hashlib.sha256(to_32_bytes_number(L1Point.x()) + to_32_bytes_number(L1Point.y())).digest()
        L2Point = g.from_string(s2).verifying_key.pubkey.point + (VerifyingKey.from_string(P2).pubkey.point * to_int_from_bytes(c2))
        c1 = hashlib.sha256(to_32_bytes_number(L2Point.x()) + to_32_bytes_number(L2Point.y())).digest()
        s1 = to_32_bytes_number((to_int_from_bytes(a) -  to_int_from_bytes(x) * to_int_from_bytes(c1)) % crv.order)

        # sanity check
        if(debug):
            L1p = g.from_string(s1).verifying_key.pubkey.point + (VerifyingKey.from_string(P1).pubkey.point * to_int_from_bytes(c1))
            assert VerifyingKey.from_public_point(L1p).to_string() == VerifyingKey.from_public_point(L1Point).to_string(), \
                "Sanity check failed in GenSchnorr 1\nAborting..."
    if index == 1:
        a = to_32_bytes_number(random.randrange(crv.order))
        L2Point = g.from_string(a).verifying_key.pubkey.point
        s1 = to_32_bytes_number(random.randrange(crv.order))
        c1 = hashlib.sha256(to_32_bytes_number(L2Point.x()) + to_32_bytes_number(L2Point.y())).digest()
        L1Point = g.from_string(s1).verifying_key.pubkey.point + (VerifyingKey.from_string(P1).pubkey.point * to_int_from_bytes(c1))
        c2 = hashlib.sha256(to_32_bytes_number(L1Point.x()) + to_32_bytes_number(L1Point.y())).digest()
        s2 = to_32_bytes_number((to_int_from_bytes(a) - (to_int_from_bytes(x) * to_int_from_bytes(c2))) % crv.order)
        # sanity check
        if(debug):
            L2p = g.from_string(s2).verifying_key.pubkey.point + (VerifyingKey.from_string(P2).pubkey.point * to_int_from_bytes(c2))
            assert VerifyingKey.from_public_point(L2p).to_string() == VerifyingKey.from_public_point(L2Point).to_string(), \
                "Sanity check failed in GenSchnorr 2\nAborting..."
    L1 = VerifyingKey.from_public_point(L1Point).to_string()
    return L1, s1, s2

def VerSchnorrNonLinkable(P1, P2, L1, s1, s2):
    # P1: Pubkey in from_string format (32 bytes)
    # P2: Pubkey in from_string format (32 bytes)
    # L1: output of GenSchnorr, pubkey in from_string format (32 bytes)
    # s1: output of GenSchnorr, number (32 bytes)
    # s2: output of GenSchnorr, number (32 bytes)
    L1Point = VerifyingKey.from_string(L1).pubkey.point
    c2 = hashlib.sha256(to_32_bytes_number(L1Point.x()) + to_32_bytes_number(L1Point.y())).digest()
    L2PointA = g.from_string(s2).verifying_key.pubkey.point
    L2Point = g.from_string(s2).verifying_key.pubkey.point + (VerifyingKey.from_string(P2).pubkey.point * to_int_from_bytes(c2))
    c1 = hashlib.sha256(to_32_bytes_number(L2Point.x()) + to_32_bytes_number(L2Point.y())).digest()
    L1p = VerifyingKey.from_public_point(g.from_string(s1).verifying_key.pubkey.point + (VerifyingKey.from_string(P1).pubkey.point * to_int_from_bytes(c1))).to_string()
    assert L1 == L1p, "GenSchnorrNonLinkable failed to generate a valid signature.\nAborting..."

def GenASNL(x, P1, P2, indices):
    # x: vector of 32bytes number serving as mask
    # P1: Public key 1, from_string format (32bytes)
    # P2: Public key 2, from_string format (32bytes)
    # indices: vector of number (1 and 0 in our case) to specify which public key will be used to close the ring
    ## returns: L1: vector of public key (to_string format, 32bytes)
    ##          s2: vector of 32 bytes number
    ##          s: 32 bytes number, aggregate of s1
    n = len(x)
    L1 = [None] * n
    s1 = [None] * n
    s2 = [None] * n
    s = to_32_bytes_number(0)
    print("Generating the per bit signature of the amount")
    for j in range(0, n):
        if j % (n//10) == 0:
            print("[", end='')
            for u in range(0, 10):
                if u < (j*10)/n:
                    print("#", end='')
                else:
                    print(" ", end='')
            print("]")
        L1[j], s1[j], s2[j] = GenSchnorrNonLinkable(x[j], P1[j], P2[j], indices[j])
        if debug:
            VerSchnorrNonLinkable(P1[j], P2[j], L1[j], s1[j], s2[j])
        s = add_2_32b(s, s1[j])
    return L1, s2, s

def VerASNL(P1, P2, L1, s2, s):
    # P1: Public key 1, from_string format (32bytes)
    # P2: Public key 2, from_string format (32bytes)
    # L1: vector of public key (to_string format, 32bytes)
    # s2: vector of 32 bytes number
    # s: 32 bytes number, aggregate of s1
    n = len(P1)
    LHS = to_32_bytes_number(0)
    RHS = g.from_string(s).verifying_key.pubkey.point
    # print(RHS.x())
    for j in range(0, n):
        c2 = hashlib.sha256(L1[j]).digest()
        # print(to_int_from_bytes(c2))
        L2Point = g.from_string(s2[j]).verifying_key.pubkey.point + (VerifyingKey.from_string(P2[j]).pubkey.point * to_int_from_bytes(c2))
        # print(L2Point.x())
        L2 = VerifyingKey.from_public_point(L2Point).to_string()
        if j == 0:
            LHS = VerifyingKey.from_string(L1[j]).pubkey.point
        else:
            LHS = LHS + VerifyingKey.from_string(L1[j]).pubkey.point
        c1 = hashlib.sha256(L2).digest()
        # print(to_int_from_bytes(c1))
        RHS = RHS + (VerifyingKey.from_string(P1[j]).pubkey.point * to_int_from_bytes(c1))
    assert VerifyingKey.from_public_point(LHS).to_string() == VerifyingKey.from_public_point(RHS).to_string(), \
        "GenASNL failed to generate a valid signature.\nAborting..."
    # print(LHS.x())
    # print(RHS.x())
    # print(LHS.y())
    # print(RHS.y())

def proveRange(amount):
    # amount: the amount to prove range from, in int
    ## returns: C_pk: output commitment serving as a public key (to_string 32bytes format)
    ##          mask: part of the private key for C_pk. mask * G + amount * H == C_pk, 32 bytes number format
    ##          rg: vector of range proofs, each entry contain a vector of public key Ci and a aggregate signature.
    ##              The aggregate signature itself contains L1: vector of public key (to_string format, 32bytes)
    ##                                                      s2: vector of 32 bytes number
    ##                                                      s: 32 bytes number, aggregate of s1
    ##              For more infos on asig, see GenASNL(...)

    HPow2 = hash_to_point(to_32_bytes_number(1)).pubkey.point
    H2 = []
    for i in range(0, ATOMS):
        H2.append(VerifyingKey.from_public_point(HPow2).to_string())
        HPow2 = HPow2 * 2

    def d2b(n, digits):
        b = [0] * digits
        i = 0
        while n:
            b[i] = n & 1
            i = i + 1
            n >>= 1
        return b 

    bb = d2b(amount, ATOMS) #gives binary form of bb in "digits" binary digits
    mask = to_32_bytes_number(0)
    
    C = to_32_bytes_number(0)
    ai = []
    Ci = []
    CiH = []

    print("------  Preparing different elements  -------")
    for i in range(0, ATOMS):
        ai.append(to_32_bytes_number(random.randrange(crv.order)))
        mask = add_2_32b(mask, ai[i]) #creating the total mask since you have to pass this to receiver...
        if bb[i] == 0:
            Ci.append(g.from_string(ai[i]).verifying_key.to_string())
        if bb[i] == 1:
            Ci.append(VerifyingKey.from_public_point(\
                g.from_string(ai[i]).verifying_key.pubkey.point + \
                VerifyingKey.from_string(H2[i]).pubkey.point\
                ).to_string())


        negateH2 = Point(crv.curve, VerifyingKey.from_string(H2[i]).pubkey.point.x(), (-VerifyingKey.from_string(H2[i]).pubkey.point.y()) , crv.order)
        CiH.append(VerifyingKey.from_public_point(VerifyingKey.from_string(Ci[i]).pubkey.point + negateH2).to_string()) 
        
        if debug and bb[i] == 1:
            #Sanity check A + h2 - h2 == A
            assert g.from_string(ai[i]).verifying_key.to_string() == CiH[i], \
                "Sanity check failed in proveRange !" + bytes.hex(g.from_string(ai[i]).verifying_key.to_string()) +\
                " ---- " + bytes.hex(CiH[i])
    if rangSigBool == True:
        L1, s2, s = GenASNL(ai, Ci, CiH, bb)
        if debug:
            VerASNL(Ci, CiH, L1, s2, s)

        asig = [L1, s2, s]
        rg = [Ci, asig]
    else:
        rg = 1

    C_point = VerifyingKey.from_string(Ci[0]).pubkey.point
    for i in range(1, len(Ci)):
        C_point = C_point + VerifyingKey.from_string(Ci[i]).pubkey.point

    C = to_32_bytes_number(0)
    for i in range(0, len(Ci)):
        C = add_2_32b(C, Ci[i])


    C_pk = VerifyingKey.from_public_point(C_point)
    if debug:
        x = hash_to_point(to_32_bytes_number(1)).pubkey.point * amount + g.from_string(mask).verifying_key.pubkey.point
        assert C_pk.to_string() == VerifyingKey.from_public_point(x).to_string(), \
            "Something went wrong in the genreation of the commitment! " +\
            bytes.hex(C_pk.to_string()) + " should equal " + bytes.hex(VerifyingKey.from_public_point(x).to_string())

    return C_pk.to_string(), mask, rg


def verRangeProofs(rg):
    HPow2 = hash_to_point(to_32_bytes_number(1)).pubkey.point
    H2 = []
    for i in range(0, ATOMS):
        H2.append(VerifyingKey.from_public_point(HPow2).to_string())
        HPow2 = HPow2 * 2
    CiH = []
    Ci = rg[0]
    [L1, s2, s] = rg[1]
    for i in range(0, ATOMS):
        negateH2 = Point(crv.curve, VerifyingKey.from_string(H2[i]).pubkey.point.x(), (-VerifyingKey.from_string(H2[i]).pubkey.point.y()) , crv.order)
        CiH.append(VerifyingKey.from_public_point(VerifyingKey.from_string(Ci[i]).pubkey.point + negateH2).to_string()) 
    VerASNL(Ci, CiH, L1, s2, s)



def prepare_arguments_to_send_ring(pubkey, c0, ss, II):
    # Prepare arguments for sending to the contract. 
    # Since solidity doesn't accept 2dim array so easily we have to adapt some of our arguments. C0 is untouched. 
    ##
    pubkeysAlligned = []
    for i in range(0, len(pubkey)):
        for j in range(0, len(pubkey[0])):
            pk = VerifyingKey.from_string(pubkey[i][j]).pubkey.point
            pubkeysAlligned.append([to_32_bytes_number(pk.x()), to_32_bytes_number(pk.y())])

    ssAlligned = []
    for i in range(0, len(ss)):
        for j in range(0, len(ss[0])):
            ssAlligned.append(ss[i][j])

    IIAlligned = []
    for i in range(0, len(II)):
        I = VerifyingKey.from_string(II[i]).pubkey.point
        IIAlligned.append([to_32_bytes_number(I.x()), to_32_bytes_number(I.y())])
    return pubkeysAlligned, c0, ssAlligned, IIAlligned

def prepare_arguments_to_send_rg(rangeSig):
    # Prepare arguments for sending to the contract. 
    # Since solidity doesn't accept 2dim array so easily we have to adapt some of our arguments. C0 is untouched. 
    ##
    n = len(rangeSig)
    m = len(rangeSig[0][0])
    CiArray = []
    L1Array = []
    s2Array = []
    sArray = []
    for i in range(0, n):
        sArray.append(to_int_from_bytes(rangeSig[i][1][2]))
        for j in range(0, len(rangeSig[i][0])):
            CiP = VerifyingKey.from_string(rangeSig[i][0][j]).pubkey.point
            CiArray.append([CiP.x(), CiP.y()])
            L1P = VerifyingKey.from_string(rangeSig[i][1][0][j]).pubkey.point
            L1Array.append([L1P.x(), L1P.y()])
            s2Array.append(to_int_from_bytes(rangeSig[i][1][1][j]))
    return CiArray, L1Array, s2Array, sArray


def displayFilters():
    for i in range(0, timeTo):
        time.sleep(1);
        if i%10== 0:
            print(i)
    for i in range(0, len(filter)):
        change = connection.eth_getFilterChanges(filter[i])
        if len(change) > 0:
            for j in range(0, len(change)):
                if filterNames[i] == "Print uint256":
                    print(filterNames[i] + " result " + str(j) + ":\n" + str(to_int_from_bytes(bytes.fromhex(change[j]["data"][2:]))))
                else:
                    print(filterNames[i] + " result " + str(j) + ":\n" + str(bytes.fromhex(change[j]["data"][2:])))

    print("------ All events have been displayed -------")

def send(sig, args):
    # send a function call to the contract
    ## sig: string of the signature of the fucntion, no space, no variable name
    ## args: arguments in an array. In the order of the function signature. 

    # debug
    # sig = 'test(uint256)'
    # args = [1]

    results = connection.call_with_transaction(cb, contractAddress, 
        sig,\
        args, gas=99999999999, gas_price=1)
    bashCommand = 'curl -X POST 127.0.0.1:8545 -m 3 --data ' + results.replace(" ", "")
    import subprocess
    process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()
    print(output)
    print("ERROR: ",error)
    print("------Transaction sent, waiting events-------")
    displayFilters();

def sendTransaction(message, matrix, I, c, ss, infos, rangeSig):
    #
    ## infos are not used yet
    ## 
    print("------ Preparing to send Transaction  -------")
    pubkeysAlligned, c0, ssAlligned, IIAlligned = prepare_arguments_to_send_ring(matrix, c, ss, I)
    CiArray, L1Array, s2Array, sArray = prepare_arguments_to_send_rg(rangeSig)

    # verify(string message, string infos, uint256[2] pkDim, bytes32[2][] pkB, bytes32 c0, uint256[2] ssDim, bytes32[] ssB, uint256 IIX, bytes32[2][] IIB, uint256[2] Cdim, uint256[2][] CiArray, uint256[2][] L1Array, uint256[] s2Array, uint256[] sArray)
    sig = 'verify(string,string,uint256[2],bytes32[2][],bytes32,uint256[2],bytes32[],uint256,bytes32[2][],uint256[2],uint256[2][],uint256[2][],uint256[],uint256[])'
    args = [message,infos,\
        [len(matrix), len(matrix[0])], pubkeysAlligned,\
        c0,\
        [len(ss), len(ss[0])], ssAlligned,\
        len(I), IIAlligned,\
        [len(rangeSig), len(rangeSig[0][0])], CiArray,\
        L1Array,\
        s2Array,\
        sArray]
    print(args)
    send(sig, args)



def send_ring(message, pubkey, c0, ss, II):
    print("------ Preparing to send transaction  -------")
    pubkeysAlligned, c0, ssAlligned, IIAlligned = prepare_arguments_to_send_ring(pubkey, c0, ss, II)

    sig = 'verifySignature(string,uint256,uint256,bytes32[2][],bytes32,uint256,uint256,bytes32[],uint256,bytes32[2][])'
    args = [message,\
        len(pubkey), len(pubkey[0]), pubkeysAlligned,\
        c0,\
        len(ss), len(ss[0]), ssAlligned,\
        len(II), IIAlligned]
    send(sig, args)

def send_rg(rangeSig):
    print("------ Preparing to send Transaction  -------")
    CiArray, L1Array, s2Array, sArray = prepare_arguments_to_send_rg(rangeSig)
    # verifyRangeProofs(uint256 Cx, uint256 Cy, uint256[2][] CiArray, uint256[2][] L1Array, uint256[] s2Array, uint256[] sArray)
    sig = 'verifyRangeProofs(uint256,uint256,uint256[2][],uint256[2][],uint256[],uint256[])'
    args = [len(rangeSig), len(rangeSig[0][0]), CiArray,\
        L1Array,\
        s2Array,\
        sArray]
    send(sig, args)


def sendASNL(P1, P2, L1, s2, s):
    print("------ Preparing to send ASNL  -------")
    P1x = len(P1)
    P1A = [[VerifyingKey.from_string(x).pubkey.point.x(), VerifyingKey.from_string(x).pubkey.point.y()] for x in P1]
    P2A = [[VerifyingKey.from_string(x).pubkey.point.x(), VerifyingKey.from_string(x).pubkey.point.y()] for x in P2]
    L1A = [[VerifyingKey.from_string(x).pubkey.point.x(), VerifyingKey.from_string(x).pubkey.point.y()] for x in L1]
    s2a = [to_int_from_bytes(x) for x in s2]

    sig = 'VerASNL(uint256,uint256[2][],uint256[2][],uint256[2][],uint256[],uint256)'
    args =[P1x, P1A, P2A, L1A, s2a, to_int_from_bytes(s)]
    send(sig, args)

def sendVerRang(P1, L1, s2, s):
    print("------ Preparing to send VerRang  -------")
    P1A = [[VerifyingKey.from_string(x).pubkey.point.x(), VerifyingKey.from_string(x).pubkey.point.y()] for x in P1]
    L1A = [[VerifyingKey.from_string(x).pubkey.point.x(), VerifyingKey.from_string(x).pubkey.point.y()] for x in L1]
    s2A = [to_int_from_bytes(x) for x in s2]
    print(P1A)
    print(L1A)
    print(s2A)
    print(to_int_from_bytes(s))
    sig = 'verRangeProofs(uint256[2][],uint256[2][],uint256[],uint256)'
    args =[P1A, L1A, s2A, to_int_from_bytes(s)]
    send(sig, args)




def test():
    print("------  Entering the first test case. -------")

    for i in range(0, 10):
        x = random.randrange(2**256)
        assert x == to_int_from_bytes(to_32_bytes_number(x)), "bytes <-> int conversion failed, x = %d" % (x)
    
    print("------ Entering the second test case. -------")

    for i in range(0, 10):
        x = random.randrange(crv.order)
        y = random.randrange(crv.order)
        newMask, newAmount, sendPubKey = ecdhEncode(to_32_bytes_number(x), to_32_bytes_number(y), bytes.fromhex(pub))
        newX, newY = ecdhDecode(newMask, newAmount, sendPubKey, bytes.fromhex(pri))
        assert to_int_from_bytes(newX) == x and to_int_from_bytes(newY) == y, "ECDH failed, x = %d, y = %d" % (x, y)

    print("------  All test passed. Well done !  -------")



with open("contractAddress.txt") as f:
    content = f.readlines()
# you may also want to remove whitespace characters like `\n` at the end of each line
content = [x.strip() for x in content]
found = False
i = 0
while not found and i < len(content):
    if content[i][0:7] == 'RingCT:':
        found = True
        contractAddress = content[i][8:50]
    i += 1
if not found:
    sys.exit("Error message")
filterNames = ['Log Error', 'Print string', 'Print bool', 'Print address', 'Print uint256', 'PrintStringAndUint(string,uint256)']
to_keccack = ["LogErrorString(string)", "PrintString(string)", "PrintBool(bool)", "PrintAddress(address)", "PrintUint(uint256)", "PrintStringAndUint(string,uint256)"]
keccack = []
for i in range(0, len(to_keccack)):
    keccack.append(connection.web3_sha3(to_keccack[i]))
filter = []
for i in range(0, len(keccack)):
    filter.append(connection.eth_newFilter(from_block='earliest', address=contractAddress, topics=[keccack[i]]))




upu = 0
pri = "07ca500a843616b48db3618aea3e9e1174dede9b4e94b95b2170182f632ad47c"
pri4 = "79d3372ffd4278affd69313355d38c6d90d489e4ab0bbbef9589d7cc9559ab6d"
pri5 = "00dff8928e99bda9bb83a377e09c8bf5d110c414fa65d771b7b84797709c7dd0b1"
pub = "0462abcca39e6dbe30ade7be2949239311162792bdb257f408ccd9eab65e18bc5bbcf8a3f08675bd792251a23d09a48a870644ba3923996cc5b5ec2d68043f3df3"
pub2 = "040ccad48919d8f6a206a1ac7113c22db62aa744a0700762b70aa0284d474c00203029637ce8e84f6551fd92a0db8e1f964ff13aa992e4cbfd1fb8fa33c6e6c53c"
pub3 = "049f742f925b554e2dc02e2da5cb9663ef810e9eefb30818b3c12bc26afb8dd7ba3461c0f7d2b997bf455973af308a71ed34ae415cfc946de84db3961db522e5d2"
pub4 = "04ef36c6d140e7970cc54c08e0e5d3173059ee6276dd0de99e09d10c49bd49e63c44e0a2e7180fff5e3e8a549027b8a37bc3a9437374ef1b7a05040b244a7bccc5"
pub5 = "04da11a42320ae495014dd9c1c51d43d6c55ca51b7fe9ae3e1258e927e97f48be4e7a4474c067154fdaa1c5b26dee555c3e649337605510cf9e1d5c1e657352e9c"
# createTransaction(bytes.fromhex(pri), bytes.fromhex(pub), [bytes.fromhex(pub2), bytes.fromhex(pub3)], [1, 2], 2)




# helloashjdagfghfhgjhjgjdlas = []
# inAmounts = [3,4]
# inSk = []
# inPk = []
# for i in range(0, len(inAmounts)):
#     sk = to_32_bytes_number(random.randrange(crv.order))
#     inSk.append(sk)
#     inPk.append(g.from_string(sk, curve=crv).verifying_key.to_string())

# outAmount = [1, 6]
message = "hello"
# outputPub = [VerifyingKey.from_sec(bytes.fromhex(pub)).to_string(), VerifyingKey.from_sec(bytes.fromhex(pub5)).to_string()]
# matrix, destinations, destinationsCommitment, I, c, ss, infos, rangeSig =  createTransaction(message, inPk, inSk, inAmounts, outputPub, outAmount, 2)
# # verTransaction(message, matrix, I, c, ss, infos, rangeSig)



# 
# # send_rg(rangeSig)

# # upu = 1;

# print("rangeSig = ", end='')
# print(rangeSig)
# print("I = ", end='')
# print(I)
# print("c = ", end='')
# print(c)
# print("ss = ", end='')
# print(ss)
# print("matrix = ", end='')
# print(matrix)

# if(upu == 0):
#     I = [b'q\xc0\x8bc2\x80\x80\xfb\xb7r2 \xf46\x0f\xbb\xed\x0e\xd6,\xe3\xd9S\x8e\xe7\xed@\xcc\x81\x0c8\x1c\xfd\xf2va3TR\x90m\x9c\n\n\xd8\x12\xd9,\xbc\xf5\x11\xef7ipg\xe8N0Y\x8ee\xdf%', b"\x8a\x85\xacWF_RG'2\x9bz\xf5\x15w\x01R\xf0Q(u\xbf\x18d\xc6\x04\x90\x91\n\xdf\x9c\x0b\x91\x02\x07\xc1\xfc\xb6\xc0D^S\x1b\xf0Q\xa3\x19Li\x9a\xed\x10\\\xdd\x9d\xac\xabqj\x13-4C\xfb", b'\x99y\xc9m\xefX\x1d\xebK\x1f\x0e`\x11d\xaaN\x9d*u\x87\x05}\x02\xc8\xcc@\x96\xfc\xbd\xa9v5l^\xb6(\x1a\x9f\xf7\xde\x84\x98\xfdyp\x0c\x9a\xb6\xdb1\xc6\x0c\x03@,\x0e\xb9k\xdaS\xc7\xb6\xff\xa9']
#     c = b"'\xf5V\xc5\xf2\x82)\x0f\x05\x9eA\xa2\x0f\xb9\x81\xe0\\\x12\xd4{\x15E\x8e\xfc\x12\xcb\x8ee)\x08\xabM"
#     ss = [[b'\xf4\xb1\xb9\x01\xe5\xe2lM\x0f\x8d\xf0\xbf\x7f\xdfy\xa8\xb0_\x0b\xe0\x0f\xf94\x16E\xf2V\xf2\xce\xd4[_', b'\xeag\xd84\xa3mg\xae\n\xdb2\xbc\xd3\xd8\xe4\xe9~W\x98\x1b\xe5\xa7\x96\x17\x0c\xb9\x1d\xc3\x85\xa7\x85\xb3', b',!\xdf\xf6\xa5\x92\x0e\x92\xeb]b{\xc4E\x80tA\xea\x0b\xd4\xfb9Y\xa1\x91{}\x01\x01\xd2\\\xe8'], [b'\x96:\xaa\xa1\xfd\xbaGb?\xa1@n^n~\xaadk\xd0L\xb0^GG\\\x01\x89\xfaq\xc8<u', b'\xf4\x0c\xd3\x1b,\xdf\n\x8cb}\xe5\x1cE\xe4\x00\xc4\xbc\xd1s\xc6\x89\x080%\x15x8`\xc6\x1an,', b'E\xbax\xba\xf9\x94\xff\r\xe3v\xa2i\x93\x05n\xdbv2\x9bd\x1a6\xcc\xaf\xc4\x1e\x8f,\xca\x07\x01\x1e']]
#     matrix = [[b'\x91%\xe8\xaf\xb0i\xfbh\xee9\x89&\x82\xa2\x0f\x15*\x92\x07\x9e\xf1\xc3\x84\xa5\xaa\xb6\xff_\x0c?a<j.?\x10x:F\xd8E\xd9\xad\x08t\x07\x8e|\x19\xf3\x87\xa7\x89\xe9\xaf~_\x00_b%;\x93\xd3', b"R\xa0\xc9_Z\x13\xbe\xb5\xe3r\xe4\xb7\na&\x9aQ\x8e>;A\x8b\xf3jg{\xf9Gg('\xdcf?\xbeY\x8e\xd7)\xd2W\xc4\x1bZI3-7\x9d\x1a\x19\xc6$>\xc8\xb5\xc0\x03F\x95\xef`y:", b'\x1a\x0f=\xc1\xa2\x90\xdb\n\xec\x1fVg5\xaf\xcf\xd9\xadTr\xdd\x03Z\x88-h\x12D\x06\xd6L\xfd@\x97\x15\xf3\x84uB\xd8\x18\xd1\xde\x18Z\x03\x9c\xf8+\xc2\x95\xb8OQc\x03>\xf0\xd6\xca/\x95\xd1b\xc0'], [b'\xd0\xa3\x91f\x80\xb6\x1dq\x1e\xefm\xbf\x08\x9f\xd6\xf0\xae\x86\xb7\xd8\xcc\xcd\xb4\x19\xd2\x82\xa4B\x9d\x8e\xe5\xd9\xe96H\x8b\r\x1d\xbeG\x14L0\xe4\x96\xf5\xef\xa1\xea\x89\xb5\xc3\x17\x84\xf7\xa9\x9fL\xe9\xfd?\xcc\xa4\x8d', b"~\xc0\x1d\xcdS+_\r\xec\xb6Ew\xac\n\xae;kyf\xcd\x00r\x11Mv \xc1`\xf5\x05f\x84\xb5\xf2)\xd8\x89~\xe7\x89\x8a\rIb\x15\x14#\x886e>\x03\x9d\xc6Y'\xaf\xb9\x96\x15\xcc\xaa\xeda", b'\x84\x90\x1f\xf9\x83\xdf\xdd\xc6\x91VE\x99\xe4[w\xe4\x04\x03,g@\xbb>F\xfb}\xf8\x9d\xff5&\xb3\x10.B\xb0\xe2\xde\x85\xbf\xe6R\xcb5\x99-\\\xe14\x92]l\x10\xf8\xe8\xfaB\xcf0\x84\x11\xe8\xf8N']]
#     L = [[[67568219278872063116858731286494094426526800021979047794231976327118747170869, 4124190802190768737775677903319986613278382390222016340637316022983215513951], [46641593214569842105539997646855453721704848548863602426668361867957162535410, 83491591937706361677055271494614659440509889704610681787481198916046399631745], [14173759417892718798002834245712052388429749841269886368695202810622651152182, 31373863148647571773452438583396577846309280139036828349113307581326624191833]], [[78801145352555159339513583962704496235407556387744775751375136652795140956258, 101092838777187931716179914931287066081957677419110531383717730505680516974757], [111448400435557596065604471457935035895276183210779941806004156927440360105758, 21255117225304034008510093823957577381882000064380536491866085372943723083579], [59361044430883609720657060515938544433618933260609749420965371432909223799009, 41554280199625242679513783979921334403875139778410686312899620239877156442268]]]
#     R = [[[88166592521677660875561116612873821404620222753600492098689398187623435611129, 34949305312588355594419135378409933446493941130282977849679070377922577585333], [79378051287249561629292263540481953767796307454786187664433011406507282425540, 49821777734207903760215127861024368170082158648811869920196480226167766133973], [38148449668158749289165377848720927370910678745245024081894245399513925718061, 74342531632521422242417623596467069192469074355442350577403624877306094188903]], [[5905088600175110656211302465017808401270270836803172573975504241952061909806, 57276724663561780559826149283786925648514763815542425453754812051511526033383], [30394712966506654142445613665813849351445412212753691625890997522176565299714, 66992915390068631033660621189564147531739819295224793360169282471566346754438], [101827451213677863453391062100079656748656651418103194190418965897085850185119, 14909169240030856436378977082027046791714731199379557039640355049357007351253]]]
# send_ring(message, matrix, c, ss, I)
# P1 = b"\xaddEd'\x9f\xef\xe1?&J\xc3\xb3CpT\x99\xeey\xd6\xfc\xf5\xb9\xcd\x0f,/\x06g\xe4\xa9\x83\xde\xca?X/\xab\x17\x16\xaco0S\xbe\xad<Hu\x00f8\x19\xcd\x00\xfd\x82O;Ic\xe0\x1e\x90"
# P2 = b"\xd2n\x1c4n\x14\xc6\xd2i\x9c\xa1\x08\xf0\x04'G\xfd\x9b$\xc5\xf5\xf6\xf4\xe9\x94D\x99*o\x89P\x98\xc4\xd3Y\xd6E\xc8\x04\x9f\xc3\xde\x1d\x81\x82\xcd\x8f\x03)\x14\x1f\r\x08d\xfco\x83si7g;\xe1\xb4"
# L1 = b"i\x90N\xc5\x1aYO*.F\xb71\x92V\xffCvT\x98\xb6C\xfaa#g\x14[\x13[\xab\x83\x99\xe6\x91{ \xee\xc8\\\xb4\xfd\x84}\xedG\x02\x126\xa0\x10\xb6\x11'|\xdf\xe3\xec\xbcw\xc26\xa3\x99\xee"
# s1 = b'b\xdf0\xbe,\x1d\xdaj\x19Q\xa2\xdf\xee\xf6\x95\x0e\x80\xdc\xa2\xf8o\xe3$\xb89\x96j\xaf\xfa>\xce\xe6'
# s2 = b'\x99ti\x8eO\xf1\xd6V\xcb\x1b6\xfe\x81\x97\r\xd9\xa3\x0ea\xc5t\x1d\x1ca[k\x8fD\x1a\x7f\x97;'
# VerSchnorrNonLinkable(P1, P2, L1, s1, s2)


# P1 = [b'\xadX\xc5\x19\x9ev\x0f\xe1_9\x91\xb2\x19F\x04}qYB\xfa\xbd\xbc)\xd5\xb6\x9e\xb3\xablC\xc8C\xfd\xdf\xb2\x8faW\xbarzN\x0f$\x83\x1b\xed\xc6Fw\xfd\x0cZ\x13\xb7CD\xc5rIxt\xa4d', b'\x92\x11\x8e\xeb\x10t\x17\r"e\xfa\xe8\x89\x9ct;\x06}q\xf7\x82\xa8\xfd\x8as9\xf8\x15\x8b\x02\x9f\x93\xa8\x04\xed\xd1H+I\xfc\xd1\x99\x12p\x85\xa4\xe0\xfa\x9c\xe6\xc8y\xf2\xa6\xb2\x11\x15\xff\x9d\x1b\xd2\xd3{\x86', b's\xcb\x85\xcd]\x1c\xdf\xc4\xeb\xb5\\J\xdc6\x15\xac\xff\xd7"l\xba\xa3e\xfdL\x05\xad\x19\xde=*\xce\xf9pMA\xf3\x0c\xe2\xe0\x93\xd4\xb4\xc0\x13$\xc1\xd2\xedTGC\xc9\xe6\xdf.\x01\xf3\xe3\xcb\xc1\x8b\x84O', b'\xbfX\x9c\xd5\x06\xe8\xdeO\xab\x1f\xd4\xbf\x8f \xba\xa4\xcca\x98h\xdf\xd9\xa3\xa3M&\xeb|\x91\x8e_\x01\xdc*\x99\xed\xf6\xb6\xa1\xfb=Q\xf4\x0f\x06\x17\xdb\x1f-\xe0)6m\xcf\xb4J\xbe\xc7\x86X\xa0JR\xed', b'\x8a\x08OS\xb2\r\xc3\x8dF\x12*\nA\xc5\xbd\xc7#LGI\x84\x82\xd8\xa8/\x9eS\xec\xbd\xa5d\xf9\xd0\xf1yi\xf2\r\xc0\x9c\x1b&\x16\x92\xd46\xae\xe7\xa8\t\x02z\xbd\x96vm\xf8/j\x9c\xe3\xbc\xff\xf1', b'\x1ed2\xf3.(\xb7\xf9@m\xb6\x0e3v\xb1\x81\xb8%\x8eR\xed\x1d\x8a\xcc\x932"T"\x17z\xda\n\x8c^\xd8\x19\x81I\xd8\x1d\xcf\xa1\xe6\xb1#SuY\xa0.\xcd\xc4\r\x1b$N\xf8SjAo\xbd\xe9', b'\x8f!Z\x80\x89\xf6\xfa\x93t\xed\x90\xa2\xbc\xbd\xc6\x86\x1a\xf2\x00\x7fg&\x04\x1c"\xb0\x0e\xd3\\\x1e}\xb7b\xc8\x94j_%g\xa5\xcb\xd0l\n4 LV\xb0\xf7!\xde\xc3\x1b\x95o=]7\t\xd7\x87\r\xbf', b'!\xf9\x80\xffa\xac\xa6\xf6\xe2h\xe4\xf6E2\xccE^\xc8\xa3\x1b\xeb\\\x19\x13\x1e\xf7T\xc3d\xd6\xd8F\x18y)\xa9\x91eh\xb8\x99\xcby\x0b\xa92\xb4\xaa\xee\xfc\xc6\x8d$\xe6Z\x11$\xd2\x02\xfex\x84\xa0\xf0', b'rM\xd8$\x02v\xe5\x18\x93\xa3\x1f<>\x0c0Tt\x114\xcb\x0f\xf8L\x839\x08M\xf3K\xeb\xc3\x06f%\xa0$\x12X1&\xac\xaa\xf9f\xc4W#\x95\r\xc0\xf9\xe3s/b*\xbe\x8fT\x8aZ\xec\x038', b'\xa5\xe4\xf2M1\xa3\xe9\xb3P\xa5*\xc9\x93s5S\x89\xde\xc04\xb8Y\xaeFTZ\xb93\x10\x15\xae\xec\xa7\x01\xe6\x8d\x04\xeb\xbf\xf3\x03|}\x12\xdf\xf6\xeb\x95\xa7S\xe9\xf0k\xed\t\x0f\xc2\xd9\\\x8f\xadO\xd7\xdc', b"\x8a\x9f\x032\xe4$\xb1U\xefnx=\xf2\t\xba+\xa2\xdd\xb2'\xfe\xb4h*6\x19(\xad\xb8J\x143\xc6NR\xb7G\x82\x0c\x01\x0f\x05\xcfi`\xbfTU\n\xbcD?\xa3]\xd7\xc1\xa2`_lp\xab5\x9a", b'3\xf6\xf6\xec7$3\xa8It\xb0\xd3R\x07c\x83X\xf4\x8e\xf9<6b\xad\xe3\x90\xdf\x8b:,Z\xe2\xb7k\x07\x10K\x07\xca\x98rfvy\xbe\x00\t\x1eF\xb9\xa7{C,\xb0\x8c\x8dp9#\x9d#O/', b'\\\xc0\x0c\xb4\xfc0>\xc8\x96\xfb\x9a\xd5d\xe2p\x08+:=\xaa\x10\x94L\x00k\xdd\xf63Xn\xc6\xd9\x9aC\xb5\\&\x12\xca\x95j.p\x80\\2@\xd2\xcdY\\:[\x94\xe0\x19\xabEi7\x14\xb7\xf0\xaa', b'\x7f\x98\x87\xbe\xe2[%\x8e\x11\xa1I\xae\x17\x06\x92\xff\xd4\x01\xe9\x8f\x99#\xab9\xa9(\x0b\x8f\xad\x1dEG\r\xf1!\x1eJd\x8b\x0f\xfc\xc2P\x99(\x03<=P?a\xa7\xbeo\x1d\x86\xcf\xc4y\xe5\xf9\xf3\n\x0f', b')}O5\x8b\xc0\xa4>~\t\x95\xb4\xf3\x9c\x80\xe6\xbf\x8e\xacyER\xb4\x03V\xdd\x14\x19z\xc4\xf8\x82\xaf\xa4z vU\xa4\x84\xf2\x8d\xd7\x91\r\xf7v\x16\xa5[\xff\xd1o \xca\x91k\x90\xd7=j\x84\xfa\x12', b'\xad>\x87n\xf1\x04\x17\xb0\x89\xa6\x17\x02\xc9j\xc6\xffg\xcba)?\xfe\x9fryP\x82x\xf8A\x99\x86,\x05>Sy\xf8\xfc\xfa!z\x16\xe5\xc7m\x99\xdf>U\xd0-\xe7\xd3\xd1,\xf9\xe6@\xdfI\xc2\xde]', b'\xaeO\xb6\x17,\xfa\x80n\x01\xaf\x96\xe3\xafN\xa6_HCs<*\xbb\xa0\x0cj\x82\x9f\xdb\xdcr\x1c\x06\x8a:<\x15\x96\rF\xd50i\x8dV\xe1\x0e%&\xaaV\xbf\xa32\t\x1a\xc78\xae\x91M\xdc\\W?', b'\x8a\x17\xef\xf5\x9e\xb6z\x96\xc3\x87\xfc\x1f\xd6\x12>\x0f\x05\x8a\xe3\xa3\xeco\xe1TUs\xaa\xc7B\xf8\xd8l\xcb\x198\xd89\r\x8a\x91\x1e\xe0$\xae\xea\xacG\xa6\x9a\x14S\x0ff\xef\xc8\x90\x140\xfb\xb2\xd9\x8f)\xdc', b'\xa0M\xfd\x00\x1e\x8b\xa6\\\\+\x12x\xe3\xdf\xbf\xa5Bs\xc8\x92\xfe)5\x8eF\x06\x08[\xc0\xbb8g\xf8e\\\x03\xa7\xdat\xfe\xcf\xb9\xb2\x0b\x08\x00#\x8e\xf5J\x1e\xbc;3_\x05\xeaW.\x165)\xdc\x0e', b'\x80\x97Ya\xc4\xdf"T\x8f\xeb\x01\xebV\x01Xb\x03H\x8d\x9a\x96\xd9m\xe8\x8d\x02Y\x10\x15\x08\xc6\x02\xd7\x82`\x1c\x04\x80\xa4LeD\x8aR\xe9Dd\xb8py\x90\xff\xbdY\x14\xf4k\xa4,\x8a\xa8~?W', b'M2\xfb\x7f\x17\xebt\xd0\xa2\xdec\xf3\xab\x99K\xa2g\xadn\xabcRSH\xef\xcc\xce\xcb\xa7\xd7\xe8\xc3Sa\x83V\xdb\xf0O\xac\xc4\xd6\xdeE\xfa\xc6H\xba7<\xc2\xa0 ]a\xaeuQ\x7f\x98{\x97\xa4y', b"h\xca}!6\x88\xe0\x8b\\L\r\x13[h\xdd\x90\xd8&\xdbqm\xa9l)\xbd\xb3\x0b\xb0M\xba\xc3u}\x1a\xb8\x8d'\x88\x18\x91n\x8a\x88\xb6\xfazL\xa2\x1f\r\x9d\xa3R\r\xbe\xf6\xafEz\x89~\xc4\xd3]", b'\xd2\x91Z \xad$$\xfc\xce\xa0\x98\xd6$\xb3\x16\x891a\xc9\xb3\x98T\n\xb4{rhS\x01\xa7s\x83TgS.\xd6f\xe2\xda`\x93w%\r\xdeJ6s;\xe0\xa1\xd2\xc2D\xbdC\xae\xe1\x0e%;\x9d\xcb', b'i\xd5)\x16\xc27u\x16K\xc9;X\r\xac\xbb\xbd\xc0<b\xea\x97Zi\x95\x02\xf1\xf4\x05Kd\xed6F\xcf4\x19\x98^/O\x1b\xc9:\xe3A`\xadLH\xfeE\x87\x1a\xb1@6<5I\xf1\xcaCZ\x9e', b'k\xc3p\xd8\xfd\xa7\x03|\xed\x89|\xb0\xd8!\xeb4B%kzq\xa1\x94S\x98\xd3\x0b@\xa4\xbe\xe2-\xc5\xa3\x06aR\xf0\xe5\xbe5\x19\x8e\xccZ\xeb\xd2)\xc7*T\xe2\x14\xcfoH&\x88\xc0v\x92\xad\xd8r', b'\x7f\xad\x86X\x8e\xfa^c)*\x8d,&\x18\x16\xeez\x0e\x8e{%\th\xfe(v\xf11\x17\n\xf5\xfa6\xda\xab\xe3AJ\xd5\x16Y\xc9\xfd\xa9\xe9p\xd8\x94\xf2\x03UO\xa7\xb7\xe7`\x1e?_guu\n\x93', b"\xc4\x18\x04/\xe2\xfd./j\x03[P\xf2Rz\x89\xe7;5\xe9|\x1e\xed\x8b14\xfarL\xe5\xb7\x8e!\xf6\xdb:\x91Q\xea\xc4'<u\x01\x89\xb3\x9d\xdd\x96\x9c7\xce\xa8TR\xa9\n\x14\xedC\xe8w~\x90", b",OU#\x16\xa3\x97\xa2\xf5\xb4\x10*;\x8d\x0c\xf4C\x01U\xf4\x05\x81\xb47\xd0>q\xbc\xe1\xf0jQ\xd7f\x11\xfe\xa6V?.\r\xcb\x9aL<\x0fb\xab' \xe4\x15\xc7\xe0g\xa9T\xa6\xe8\xe6\x99n\x9b[", b'\xfcD\xea\xb2\xde\x01\xf3\xfc0>\x8f\xf0\xaeAW\x94\x191\xbe\x8b\x9c}\x16\xae1\xfb\x97H\x00Y\xe7q\x0cw2\xa7\xdb)\xb6nL|\xfd\t:\x84\x02\xf1R9t=_\x94\xee $\x81\x11\xe5/\x97\x7f\x97', b'[\x85\x8c\x10\xc0l\x0f\x96b\xa1\x94\xd0\t\x97\xa3K\xae#Y\xfa\x95\xbf\x18N\x83\xc4\x00\xab\xa6\x9b\xcd3\x02\xbe`\x05d:\x12\x08\xaf\x8eI\x98(\x10\xfb\xf2\xea\x9d\xbc\xd4\x11W~\xae\xe3\xa7\xe7E\x03\xaez\xde', b'\xb3\x83\x8a5[\x16t\xb1L|\x04\x9d\x83\xa2F\xf0\x7f\x8d\x1d\xaf\x9bx[\xe1\xd6e\x9e\x91\xbcCtLmw)\x00\x1b\xb7\xcf\xc0<\x92\xd2\xea\x05\xeb\x7fG(\x1ao\xc8\xb9k\x8b0\x1d\xc7lz\x00x\x81\xfc', b'\x0e\r1\x16\x0b\xd4\xda\x86\x9f\x8d\xbe\xb8L#[\x1cn\xe7\xa5/:\x19<\x08]\xe7\xf7\xc1\xbcj\xa2\xa5\xab\x01\xc5>\x98\xf9q-\x0cf\x96\xa4>Pc\xf8\xaeH\xe1x\xe3\xdaID@;\xed\xd7\xc4)\xaf\xe6', b'0\xf6\x87Pf&\x99r\xbdMGr7\xabg,a2\xdfc\x98\xcc;A\xa3\xcc\x9e\x0b\x9a\xf6w\xdb\xaf1\xb84&\x927rI\x1d\xab\xad\xf3-(T\xf8\xb1\xe0\x11\xd1\xfc\xccd\x9e\xbe{j\x83\xc4j\xa4', b'\x94\xc4\x15\xb0~-\x1c\xddq:\x08I\xdeA\x1f7\xf9\x81\xbc\x12\xbd\x90?3\xe3c\xa4\x8a\xb3m\xfe\x88\xbe\xd8\xb2\x83\x84\xea\\\x06D\x16\xa22\xde\xc0@\x80\xf4S\x0e\xd4\xd3%F\xb4S\xfd\x0e\xf3\x80\xf1V\xf4', b'\xcb\xb3\x91\x9d\xcd\xe0\xfb\xde\x84\x86\xfe\xb8u\xecX\xa4\xf6.mgi\x00\xb6\x9e\xcf\xfa\x8f\xc7]\xf9^\xd3\xc9\xb9f\x11\x1f\x9fb\x8f\xa6\xe8\xd9\x97\xeb\xa2q\xda\x1fS\xa5X\xa5F]\xd2*\xf6tD\xce|a\xdb', b"$\r\xa8\xa8i\x92\x05\x99\xe8\x1dt\x89\xf1U \xfc\x85F\xffx\xbfw@\xb5?\xe7\xf6\xb2\xc9\x90%\xe2w\x93\xb0Izb\x86B\xa1zN\xf6\xe0B\xbd \xcb\xcd\xac'\xa1u\xcb\x14\xc9\x01\xb4\xbag\xb2a\xee", b'\xd8Z\x8c\xe0\xdd\xad \xe79\x01:[\x8fR\xb9\x13\te4\xd0\xa4\xa82\x00\xc7\x07\xe23\xe2\xc6F\xe0\xb6\xef\x82\xca7\xe3*\xb7\xf2/\xba\x81\xd4i\xac\xa1\x01\xc6@c\xe7\xf8\x02\x9e\x01\x95}\x1cE\xd2\xf7\x16', b'O\x1dBF6L\x9eZ\x1b\xad\xcf\x08\'\xee\xb50\x9a s\xca\xa1\xb3\xbd\x02\x8d"\xcc\x82<|\xa4\x93\x03Ra\xb37FAN\xa0\x1e\xe68\xc8\xf6^\x15\xe6\xc4\xefk\xf9\x92]B\xceC\x10\xe1\xa2\xeam\x1f', b'\x1c\xdd\xb0\x0c\xb2\xffR\x01K\xde\xcan\xb9\xd50\x1b8\xbc\xac\xacN\xfd~1\x86\x9ai\x19\xa2\x08\x11\xefPat\x88\x0f\xe0\xd6\x8a\xc1gfY\xb6\x0f\xd0\x9f\xf0\xb8\x15\x1eXFv>\x80\xbcBB\x0f\xf4\xa7\xd4', b'\xdc\xc3*\xc2N\xe4\x103&;\x15\x7f\xd1h\x88\xa9O\x8d:\n\x91V\xcb<\xd4\xd1\xb5\x9b3\xf8\x88\xad\xdd\xccQ\xaa\x08\xef\xbe\x89>\xf0:\x1eW\x8e7\x11\xa4\xd2\xe6\xaa\x8a\x98\xd5\x89V\xb1\x08\xe7x\xe0\xa0\xe1', b"\xa8\x19\xeaK\xcde\x17\xc6\xbai\x93\xda\xe3\x7foF<\x9e+\x96@o\xe0\xf1r\xa5\xb1\xe5\xfbR\xa7.\xce\xef'\x91A\xe2\xf9\xb5p\x01\xf8\xbc\x08\x0c>\x92\xe0\xb4\xb2:*\xb82\xea&\x8e\x07#\xb0\x9f\xd9\x02", b'J\xa0\x8c\xf0\xa28AZ\xd2\xc1*!\xe2\xec\x0f\xfa\xda\xc3x\xf4\xed\xde\xb2\x89n\x05\xa7\x0c#)\x9d\xab\x16\xb6(\xa2|-6\xed\xda1\xd6HU\xaa\xa2nLA\xfda\x15\xe7\x9b\x8a\xa0F\xb3\x14\xf3\xcb\xdby', b'\x99\xbb"l_\x82\x9b\xa5\xb73\xf7\x99\xa5"ZH\x0f\xcc\x98\x99\x91\xd7\xa3M\x01\x1aQ\x9c\x1b\xaa\xfck\x0c\xff\x13^\xa5\x8a\x0c\xc7{6\xed\xc0\xe8\xed\xfcS\x0bN\'<\x1a\x04\xfe\xcbc\xe1\x07{\xb3\xe0u\x84', b'\xdf\x0f\xe7I\xb2Vt\xbf\xd1v\x1e\xe0Z\xaaK?\x8aR\xfe\xa7&\x9cu\xcei4\xe54\xd7\xeeG$V\xc4\x88\xa7\xb5\xe8\xd3\xfd\xec\x97\xd8DT\xf84\x9f5\t\x93\xdf\x1e\xf5\xa7\x03\xe0\xd9nA\xdb\x96f\x1a', b"Z\xbb\x9f\xa7\xeb\x1c\xd6e\xc1\xac\xd0\xe8X\xe0\x81\xc85\xab\xcc`\xa8\xd1\t\x10\xb7\x0eg\xe8\x97\xa9\x17\xc9O\x8d\xfa\xa2\x1b8\xfd'\x02\xe8l<\x98]\x886\xd43\xbe\n\x9b`\xe8g\xa9\xc4D\xb5\xa64j\xf5", b'\x0e\xba\xb7\xc3\xca\xc4n\xfc\na\xba\x08\x86\xab\xc5\x8e\x94\\\x15+:"\xbe\xef65\x1d\xb8\x14U\xfe\xaa\x85\x96 _JS\xcb\x8c\xad\xeb\x02\xef\xa1rVG\x13\xef/\xb9<\x15\xbc\xba`t\xe7\xb5\xcb\xa3\xe8\xe9', b"yR\x02\xe9\xe5\xe4\xf5'\xf8^\xca\x0b+t8\x81\xd8r\xda\xf2\xedd\x0c\xedT\n\xdf\x83\xcfI\x13\x9f\x97]p]\xc9\xd0]\x98\xbf\nP\xcf\xcd}\xd2m\xed!c\x8f\x03\x00\x90\x9b\x9cckr\x1d\xb1C\xe7", b'n\xe5\xf5\xafCZ\x06\x07x\x8ch\x8e\xa6%]uvx\xca\x07u\xdf\xbd\x9d\xdf\xb2\xe8\xb5Pa\xd3\xa4\x88?\xd1\xa7V\xd8\x19\xfd\xbb\xff}\x0e/\x01\\\xdf\x83\xab\xc7\x15\xbd1A\x8e\x18\xa5O\x99n\xa8\xe5\xcf', b"a\xc4\xad\x80\xc6\x98r\xde\x03E/\x02H\x90\x95P\x8d\x90T8\x05\x94s\x87\xc2'\xd3\x0e\x1aZ\xc8?WiB\xf1\xfa\x15^\xed\x93\x99G\xbe\x00b\xa0\xf7\xcc\x85|\xabB\xaf\xab\xd6|\xed\xaff\x87\xf1\x8cX", b'\xe6\x95\xb6\xda\xf4\xc4,\xd8\xeb\xa7\x89\x1a\xb69\x95\x1f\x00\x9e\x11\xe1\xa9\x16h\x96\xfaI\xda?X\xedI\xa1\xee\xed\xf5g\xaa\x18[J\xd6\xbb\xeex\x9ff\xac\x8cyf\xf3/\xa5\xad\xdd\xff\xa5\xd0@\x16[\x7f~\xe5', b"\x8bXZ\xeaJ\xdcW=A\x10H5\x17\x8av]\x1d\xec\xe3\xd0\xf7\x8c\x970\xcef\xe2h\xd1\x05\xfb\xf6\xdd\xf8-\x03\rQZ\xba\xe4\xbe\x00\xf8\xddG\xa9\xba\x1c'cGto\x83I\xe8\x0cJ\xa9X\xf7v\xed", b'\xef\x13E\xa4\xe5;n\xc4Z\x8b\xa1\xaa\xeb x~\xf9]\x98\xa63V\xf8v\x18+]\xc3\xdb\xda\x1c\xb6\xb8\xb9\xa9\xc6\xc1`\x11L\x19\xd4Z9\xb0\x81\x94\xf6\xc8m\x94\xe6T\x1d\x9eYSSwF3dU\x9d', b"\xd0\xa9m\xa3\xf4\x12]\x8e\xbe\xd8_\xffr\xd9~IP\xfau\xf5\\\xf0\xf6E\xca\xb3k\x16:\x15Z\x1e\xbb\xbd['\xba\xd0\xe9\t\xc24O9G\xc0\xe3\x16`W|\x876s\xf4\xff\xe7\xfe\xc99b\x0598", b'J\xffy\xceb BF\xac\xf3d\xe9\xa9Go A.@\xb0\xd8\xd07pD\xf5,vX\x14\xc3UY\xa6\x17\xb9\x84\xbe\xe6\x01/\x91\xadk\xc7\x1f\xc3\xc9\xf6\xbee\x03G\x1d\xc7\x89\xb5s\xe88\xe6q\xfa\x87', b':c5C\xcb\xb1\x88\x19\xa2\xf4\xf0;W\xc6\xad#\x00\xd2\xd4=\xfdF\xab\xa9\x1e\x1a`iZ\xeaG\xedt;\xc9\xf5\x9ag\x07f"\x91M\x18"*zY\x05\x94\xc9\x7f\xbc\x11\xce\xd5W\xde\xd9\xfax\x8eUQ', b"\xdf\xcdt\xbc\x9eRyLW\xc2\xcfre*'\x8cS \xbaLeN\x055\x0f5FU@\x9e\x85Z\xe16\xd7U'q\xcfv\xa3\x07}w<\x851\xf9N4\x9cP\xf9u&\xadN\xcf)\xb5\x00\xcc\xdc\xd2", b'\xbe\x82\t\x8b-\xc4\x07Uj\xdd\xefU\x1d\x13\x14\x0e,\xe4\x10\xddk\xfd\xc0Ww\xb6}\x1d\n\xa7\x03\xa4\xf4\x92\x9elF\xc9\x8c\x10\x0c\xbb\xc6\xe2\xd7,\x14\xfc\xa7P4\x80\x84d\xd8\xe09.R\xf0\xe7\x10\xea\n', b'\x98\xcde+\xb8:Dhm\xa4,\xa4\x9d\xee\x89~K\xec\x93\\\xbb[\x05\x10Z\xcf:\x02#L\xd1\x0f1\xafN\xec\xebJ\xfb\x13\x97Tg\xfc, \xb1N@nU\x14\xfa\xdc\x81\x91N\xe3\xb4\x91\x14.\x1c\t', b'\xd9o\x17\xdeE&b9\x06\xc49!*3\xf6P[\x17Y\xb2\x009\xdf\xa8sTS\xed\x82\xf3\x8d\xca\xc1\xff\xfd\r\xd1F\xb5\xcbS\x95\x8e\x10\xb2\xd2\x9bv\xd4\x86\xe8Sr\x8c|`\xf6=\xe0\xdd}\x18\x8c\xb8', b'\x97\xd4<\xea\xc0\xff=C\xaa\xfd\xde\xa4\x9c\x01\xae`\x0cv5\xa7\x92ug)\xe4\x93C\xec\x9a\xbb\x8c30\xab\xdd9\x16\xa2tI\xbd\xe0\xcd\x8d\xe4\xe4\xce\x12\xf9dix\xdeE\xba\\m#!\x175\x12\xe0\xd2', b'*\x11\xfd\x02\xff*Z|\xa2\x8e5 \xae_\x06\xd3\xa7_\x12\x92\x05*\xddG\x9f\x05\xceK\xadS\xe7a|\xda\xa6\x8b6r/\xcf\xe1\xef\x16\x90\x91\xc4~\xea\x9e\x1f\xd9y\x06-\xbe\xddJ\x02\xd6bh\xb9\\\x94', b'\xf3\xf4)\xef\x98wM\x85%\x98\x95\xe4\xa19\xcb\x08\xaf\x15M+\xee\xdcE\xad\xab\x1a\xbc\xe0\x15h\\|\x81\xbaq\xdd\x10\xe6\xc9\x80m~\xd5\xee\xe4\xb1\xdac\x96\x80)\x08\xcc\xbe#N\xea\x12\xfa\xb9\xb63X\x8d', b'>\x01\\\x96\xb3F#\xe2}\x8c=k,}\x1c\x94\x85J\xabx\xf7M@&\x0b\xf6\xf7\x16\xd4i\xdc0\xef\xc2\xdb\x8b$\xe0\x16\xd7\x9a\xbb-Z\xc8\xd1\xef\xbc(d[\xe9\x91\xd7\x18\x19\xf8\xa1~}\xa2\xc3\xb9L', b"\x07\x0b\x99\x87!)\x88\xa4\x9c\x07D\xe0\x19\xae;{\xf9\xc6nzb\x84\xc9%\\(\xfd\xc4P3L\xc3\x19B'\x16k\xfe\x13\xfa\xeb\xaf\xd7t\xf0Wg\xa5\x98=\xf3\xd3$\x15\xa7~\r\xc5\xd4*\x05\xe6r\x8e"]
# P2 = [b'5\xc0\xeb$\xad\xeb\xc1\x81\xec\x1c\xea\x9f\xdc[\x0e\x92f\x17\xe59\x83\xb0\xa3\xdb\xe0\xbd\xf0p\xe0\xb0\xf7[6\x1c\x8f\x05\xa1m\xa8\x8e0>\xcf\xea\x81\x044-\xf6\xce\xdb\x1b?\xa7\xde\xef*\xee\xd3ZY X\xdf', b'|\x89\x91 \xe7&{\xbb\x87\xce\x8a\x93.^\xaf;\xa1\xc4\x03\x023_r\xf3\x08\x17\xa7}q\xdc\x1e\x1b\x0e\xbb\xda&\x1d\x0c\xd4\xb0H\xc4\x9b\xc8\x15\x8cLf\xf0?\x84\xfc\xa8\x17)\x1b\xa9v\xf3\x95\x86\x874\xb1', b"\x10\x88 \xabZ\xff9{Ls\xaf\xf6\xe7\xd7\x9c&\x15\xa3\xd6)F\xc0YWzw1M\xd6\xc9(dE\xae\xcd\x80\xc6z\x1f\x17\x05\x01*\xfe\xf6\xd5Da\x89ML\xe8)\x7fd\x14=\t\x0c\xc1'\xaf\xe9\xef", b'\x93<\x96\xc4\xda\xa75\xd2\x9drD\x08\xc4i y\x89\xe7\xa4\x88<+\x14\xdd#\x06\xf4TZ\xd2\xb4\n\xaa\\\xc04n\x89q\x14l\xbc\xa1\xea\xaa\xedF\xd9\x17B\xe1\x14Meu\xa5\xaf?\xb5{\x06\xb2\x1c\xd0', b'\xbdd\x11Ok\xb8\xb7p\x8a\x88*-dm{G\x9f\xc8E90pK\x8c\xfc\x0e\xe50\xb5\xbaDD\x19\x9f2 H/\xcd\xd6\xeb\x01-\xd4\x85\x9e\x90l\xa8y\r\x08\xca\xb1\xaaW\x8e\x0b\x84\xd3&\xc2&\x97', b"a\x93\x01n\x9fO\xa5\x13\xfeG\xfa\xeb'\xb2o\xcfAx\xa6\xf1\x8a\xc5\xc9\x1d\xe8\xa8\x8fb*O\x00\x9c\xcc\x93F\x12X\x15\xa4<\xe6\xbd\xe9\xde\xeb\xb5\x11\xe0\x18\x97Y\x1beD\xb3\xc4\xed\x01\x1aV\xcf\xe7p\x8f", b"a\xcc\x87l\xf2\xe2\xac\xa9\xf3zvG\xb0t\xb3X'\xbbX\xdd\x19J\xddv\x9f\x11s\x02\x1aAe\x98\xe4\xecj\xba\x05^o\xd3?\xae\xa9n4\xff\xa7w\xadMi$\x14}\xf9/\xe7\xf93\xd1\xfa\x04\xaa#", b"'\x05\t\xacbb\x01Dx\xf5\x03\xb4\xe6\xa6g\x89\x85\x81Hn7p\xc1\x0bO\xedqQ\x959Sf\x8b\xf7\xdc\xf4\xd1\xeaD\xbc\x07\xdc4P\xe1\xd1\x18y\x17<\x94\x0eJ\xfdO\xa3l\x17u\xba\xff\xa5+\xe4", b'\xf0r\x86\x1f\x08\xf1?\x97\xbc\x1d@\x82\x8d \xd9\xec\xf9|p\xbe~\xe5@\x81\xd7.8J\xbaA\xa6\xb65\x81FVkxs"\x88D;\x87\xab\xd2KJ~|\x8d\xa9\xe5[\xbb{\x12\x88Rz\xe8\xb1\xb9/', b'^to\x1f7\xac\xfe\xffg\xba\x0e\xfe\x05\xa9G\x1d\xce\xf0<\xff\xef\xbf\xb4\xd2\xa5\xdd,\xee\x1e\xae\xbfK,\xda\xc8vy\xaf\xf9N\xc4U\xa9@L\x13\xa7et#9\xfe\x9a\xa0\xcf\xb7f7\xe3\xa4\xfdR\xbc\xcb', b'\x7f\x1d\xc4<,`\xc4c\xa3\xe6<\xcb\x9b\xef[\x80\x19V\x17\x0bC\x99\x8eG\xd4\xbck0b\xb3\x8f<\xca\xebc\x17B\xe9[t\x1bXZH \xfa[\xe2o\xbc\xd60\x9e9\xf87\xb8\x13f\xcf\xdb\xf4J}', b'\xcb,\xeby\xbc\x848\xea\xce\xc5\xc7\x87\x0b\x18\xddY\xcf\xf1(H3j \xfe\x95\x8f\xc7\xd322\x7f\xef\xde\xa5\xb9\x01S,\xbdV\xd4\xe5\x9cK\xa3\xdf\xda]C\xb0\xae5x\x8c\xf6\x1aW\x10\xac\xf4e\xfb\x07\xc7', b'+\xfa\x9a\xb9\xa7\x02{\x99\xe9\x18\xed\x8a\x1bs[?\xf9\xb2\x8e\xec\xdc\xc3\xfa\r&\xeb\xa8e\xaf\xeat\xc3 \t>b4\xc2\xb8\x16\x1c\xb2\x86D\x8d\xf9\x0bd$\x18\xea\xd7/\xa7\xb9\xa3\xd4\x8aK\xe5\x81oG\xca', b'\x9bX\xcd\x95m\xafWP\x1eX\xa1\xea\xbd\xe8(xz\xfes-4\\S\x85\xdb\xa2u\x9f\r\x10 \x1e\xcfPa\x92\xf7\x82\xf4Wag F\xf0\x18\xcb\xb6\xb5\xb3\xc2\x7f\xef\xec\xe5\x9dA\x0cT\xd8\x0e\xad\xa8\xca', b"-\xf7'\xfe\xb6\x8crv\x00\xfebPe\xba\xfb\xb0\x15n\xad4Zj\xe7\x1b\xa5\x9eh\xf3\xbf\x88\xd7d(M\xe6\x1bs\xda\x1e\xbf\xcb\xd0\xeb\xbb\x80\xa71\xa9\xe8\xe5[;\xd5\r4\xb0|\x91\x98\xba\xf6t(\xf3", b'y\xa6\xf3, \xdd\xf0\x00\xdf\xb2UC3s\x14\x9a\x0c\xf7t\x97y\xd3\xeal\xe5\x1d&\x8e\xd9\\i\x8b\xea\xa8m\x1b\x98^\xdcs\x9b.\xd5\xb8\xfb\x86\xd4\x93\x80\xad\xf7G\r\x87\x1fl6+XV$\xb8\xe4\x11', b',\x05Et\x8b\x13c\x98^yl\xac\xaa\xe9\x8f\xd5A\xfcd\xb6\x02\x05\x8eg\xf3]o\xf3DTC\x0f4\xa2\xda\tX)r\xc9\x13\xd6\x8f\xb8\xcc\xeeV4K+\x8b\xa9\xadp\xc4\xc2=?\xb2\xf3\xdc\xc9\xa1\xec', b"\x85\x9bD\xe7\xc6'\xf6]\xb8\x0eE6\x85\xfc\x1ft\xb2*7w\xd8B\x9cW\x7f\xd2\xf9\x19\x16\xc8\x0cN\xdb_\xaf\xd6\xf0\x9f\xeab\xb2\xd2\x8c\xddt\xb9\xe8\xbb\x81\xf2t\xc8+\x8e@:+\xbe\xdf\xf2\x9f\x08%\xbc", b"2\xbb\xcdj\xcfo\x1d\xf9r$\xd4\xc7\xe7q\xa5z6\xd4\xd3\xa6'\x18\xff'e\xeb\x14\xd2\xe7\xc2\x9aXn:\xe0[\r\x86/q`\xeb\xdc1\xe1\xe6\x92T\x17\x98x\x85\x97\x9b[\n\xaf9\xc0\x0b\x05\x0c\x01\x8e", b'\x06+\x1e\xad\xc1\x06=LBO\xd0\xf4l\xaa$\x87\x8f6\x9e\x00\x9e\x98\xcb\xb3&\x19}\xb9\xaa:^\xcbM\xbd\x9a\xf3c\xbc\x84/\x9eF\xdf\xf2)\xa2\xbf\xdb\x17S\xbfS+\xf5\xf2\x9c\x90\x96\xcd\x13\xb0\x1a*\xe0', b'\x8e\x1d\x1a|=q\xfc\x95Z?\xc6`\xc9\xb6\xf1l\xf2\x99\xa2\xf2~V(\xcb2\x93\xd8\x0c\xbf\xec\xb8\xba~zjx\x1eg%\xf3jhC\xc54\xb1\x985\x9b\x98\xf9G\xea;\xab%\xbf\xc8<83g\xfd\x90', b'\x8b}M\x91\xd9yg\x8a4\x808\x01\xba\xb9\xa6\x19\xccr0\x8a\x1b\xf56\x13\xbf\xe1\xe7\xd4\xe7j^\xfbt\x18\xdc\x1b\x95yJ^\xb7\x1d\x8fk<\xa9-\xeaW\xa8\x17d\x9c#XN\xb0\xbf\xf4\xc9\x1ec\x91\xee', b'\xaau\xd1\xb1\xe2\xf8\xbf\x98\x00$5\xb5F\xac\x03\x94c>N\xa6[]\x8d\x1fKUh\xeeb\xa7\xf8\x1ag\x89\nUo\x81\xa5{\x9d\xe8I\x84_\x18\xa9\xe3\x15g>FT#\x1cD\x83aA\xa5312\xf0', b"\xed\x004\x18w\xc38+\xd9a\xc7p)<AFpf\x12O\xc4-f\xces(\x18\tuz\xe6(kx\x14K\xf4\xf4\xbb\x94\xd0\xeb@'t\x1c9\xb8\x00F-r4\x1a\x04\x08z\x81\x03\xb4\xc0\x0ey\x8b", b'O2\xea\xa3Z\xf5\xdf\xe9\x1f\x87[\xb3\xa0t\x84*\x13P\xf4 \x17r\x1a\x1e\x10u\xcd\xdb\xdd\xf0\xc4TiVg\xaf\xc6\x96\xc6t\x1d+\xaa\xe4\xe9\xa4;\xb7-\xaa\xd7\xf4\xe4\x80A\xc9kQ\xc1+\x0c\x0f\x8a\x9e', b"f\xe89#\x89\x1c\x96\xde#H-\xf7\xbfH\xa9\xe8\xef\x05\xd3\xda\xd3\xbc\t\xde\x8euo\xb1\x9e|\x91\x86\xa8|1*>\x85\x13vi(')pi\\4\x0e[YZl\xba\x15ru\xc4^\xb0\x81\xca\xdco", b'\xcc\xb7\x00\xb8\xa5\xea\xf4dF\x14g\x00n\xd7\xd8\xc9z\xd5\x08\x14\xcd9\xb8\x9ah\xc3B\x84\xd4\x1f4\x11\xe9\x13\xd2yk\xe9n\x1c\xd4\x8a\xab+$\xe4\xe0\n\xe43Q\xfc\x1c\x03\xb6\xdc\\SL\xc7\x93\xba\x19\xaf', b'7\xd0x`\xe7^v!\x87\xdas\xc1<\xea\x0ebqq\xeb\x8f\x9c9\xcam\x8c\xd4H\xda\x1c\xc2T \x90\xa7\xb5\x10\xa9/\xfaN7{\xd6xa\xe4F;\x82\xaeH\x9e\xd6{,\xc3\x81\x1aj\x08M~6\xbb', b'/\xc8s\xb0\t\x86\xd9\xfb\xe43=\xd6\xccA\xd6\x9b3\xc4\xdcSQ\x15\'@\xb9^8]\xdf\x8d\x00\xe8\x85\xde{o\x95\x83\xddE\xde"4U\xfb%\xa0H\xa7\xb2\\1\x19l\x81\x1d"\xac>*,H\xe9\xee', b'`\xbb\xdf\x8b\xf9\x16\x81\xe4\x00\xb5}T\x00\x06\xe9\xd9b\x19\x1bC\x12\x9c\xb4x\xdax\x14s\xcev[\xf4M\xc8"H\xa3w\x1a\xd4l\xeaVi\r46\xfe\xaag\'\x96\x06\xc3"\x8b\xc8\xe2\x84\xf1\xd2z\x97Q', b'\xbd\x0e\x96!\x87}5v\x9c?e\xfeZ}\xe8~w\xe6\xfbn @2\xdf\xe4\x9cH\x97\xd7\xdc\xd0\xaf\xef<\xce\xff\xad\xc7\xd42\xd47\x16T\x96\x0bx\nc\x05\xe6h\xb8A\x16\xd4\x00\xb40,k\xc0\xdd\x93', b'\x89\xae@.C\x99\x054\xd0\xf9*x\xe4\xa3\xfe\xec\xcfV\x85\x93\t\xd5K.\x98J;#\xc7\xde\xa7\xe3j\x1cs\x13c\xda\x01\x14\xeb\x17\x0f\xba2\x14\x08\xde{:\xe2\x14\xee\xca\x05\x93\x94\x1a\xf3y\xd8\x0e\xaf|', b'oEt]\xd7w\x8fmo\xcdf\x15\xe4e>\xf3\x0b\xaa\xf2~\x13\xa3g\xbc\xd1\xa8[O;\x88\xf32s=W\x80\x01\x03o\xb1/\x95\x04X\x8ce\x84}\n\x00\xd0|\xc0\xf5fZ\xef\xb2\xd2\xa7-p\xce\xc4', b'=\x9aO\xa7\xb3\x9f\x1e\xb9\xb4\xf3\xa1\x93U:\x0b\xe9\xff\xcfB\x8b\xc9\x95\x81\x8f\xb9\xa0\x8f\xd9\x01\xdf\xb8\x10\x1e\x19\x9f\x9f\xd4\x89\xcb\xf4\x9f\xac]\xc5j\xad\x9f\x02q\xb0\x17\xee\xa0|&\xd7\xd4\x9cH\x0b\x81\xde\xca\xec', b'\x15\xc2\x1d\xb8\xe9\x88\xa1,\xfed\xd6\\\xfa\x00\xd0Rj\xfa\x04\x9f4/2\xf6\xe5\xac\xba\xb2\\\xd8U\x9b\xaaE\xea\xa5|b2"\xd2wA\xe6=\xe7?\x06\xa2*\xd9]T\x80Gp\x15=\xb4\xe8\x99\xb0\xd1\xb7', b'\x84\xb1\xa5\xa2]\rR\xa1\xcb\x1bK\xc0\x80@\xa0wx0\x92\xac\x934\xae\xf1\x96\x8f\x8fG\x9a\x15mj\xe1\x96T\xbb[\xd2\x89L\x8c\xc9\xc3\x1d?\x16\xf6\x9b\xc3\x86\xf6aD?A\xc4\x84\x89\x01\xdd\x16/\xbe\x92', b'~}\xf7\xf5V?\x9du\xdb\x93\x99\x9b\xc5\\8\x1eh\x168\xe0D7\x93M $%\x8dF\xf5\x08\xf8\x953E\xa2\x88kt\xe3-\xcd\x86\xcce\xeeK\xc6+\xc2\x1e\xbc|\x11$!\xe0YK5\x8e\xdb\x82\xbc', b"\xe3bl?d6W\xe3\x8c\xd7(g\x95)V\x1dKFObm\xf7&u&/\x9d\xd4*R\xe2[\xd5K\x14\xad\x02YxH\xcb\x1d\x1b\xee\x81\xa5\x89~'\xd7\x1a\x19\xbcXv>\x1f\xef\\\x85\xd9b\xa5J", b'W`\xe8;\x8eKA\xe1\xd1X\xc1\xee\x1eE\x9d>>\n\xf0\xcb\x94\xddCm+{C\xe2\xf1\xb5\xe62\xa0\xa9/\xb5\x02\xe9l\xf7Y\x06\x9d\xa2Rcw\xd0!\xf3H\xb8\xcc\x14\xd0\x8d|\xba-\xf9\xb8\xfe\x94G', b'y?#\x11Y\x07&\xb1\xd3\x85\xbfO\x97\xca\xee\x0b?P\x18\xbf\xe3\x84\xbd\xa7\xc7\xee\x8d\xd1U\x92Y\xbf\xa9E$\x01.QbSi\x1b\xb0\x8f\xf1\x01y\xd8\xc7\xc8\xd1\x89\xf7\x19\xfa}\x9e\xfb\xd3\xd99\xfc\xedt', b'\t\xc4\xef\x94\xab^\xc2\x96+\x93\xfa\xb0\x82=\xb6"\xf5\xa8\xb3\xa9\xe1\x8c\xe2\x1e\x1e\xe2\x0b\xc5.0\x927\xfc\x9b"u\x12o\'P\x94\xb1\xe9\xc84\xff\x0e\x852\x1f%\x11\x0fv>)\xfc\xb88(\x85\x00\x10\xee', b'Mx\x180\xa5\x1b\nN\x1c\xc3X\x9d9\xd9.L2U\x94UAM\xe2\xd7N\x94f\xe2\xc2\xb1\xea\x95Q\xe57\xc4\xf8#\xfc)\x07i\xe2\xb2e\xc8R\xdb\x1f\xe3\x00e\xbe\r\xcaP\x0e\x9f\xda\xc8\x1fYe\xf7', b'U\x18\x00i\xa7\x1e\x96\x8a\xc8\xf3^\xc8\x08~\x96\xf8\xa3\x0fL&D\x94vDD\x86\n\xca\xc9\r\xe4\x13\x1cV\xa6\x99\xa2h#?c\xe1\x98\xe8\x10\xa8\xa2CF\xfa\xfct\xa3\x12\xd2Fm\xbb\xde5\xea\x93\xc4\xe9', b'\x14\x04m\x1e\x1bP\xf5\xe2\x14"\xc8e\xe1\xd5\x86\xd1\x97\xeb\x91\xdc\xcc\xf7\x8b\x1f;x}\xe7+\x8b0\x96\xad\x11\x95\xd5Zr\xaa\x16u\xcdu(\xd2;\xf2l\x03\xce\xeak\x10(\x8c\xbb\x91\x12\xa0\x82\r?\xc9\x84', b'\xe7h\xd0TG\x85"\xf9!\x11\x80\x0b\x9d\xefg%\x8a|\x19\xd0Fq/\xf9z\x1c\xd5\x10\xa7u\xde\xc7\xb5"\xed}1,z\xd4|~we]HJ\x17\xdf\xbb\x04\xe1L\xb5\xe6H\x1d\x84\xd5\x15\xc1\xfe\xa0\xc3', b'3BR\x9d(\xcaox\xce\xd4\xd0o\xa5\x17\xca|\xac>\x92f\xe5\x87\x89\xe1\xb5m_!\x8a\x02\xa2J\xca\xb2\xe3W\xd6\x15a\x0f$\xaa\x07\xa2|\xa5\x83\x15m\xc9b\xa2%\xacOr(\xbf\xefC}\x86\xa6\xfd', b'\x01!\xf2\x8f]\x13\xa7\xfd\t\x829\x85\x8c&\xa1~\x97\xb5\xe2QdM\xb1>\xaf\xa8\x86h]I\x13\x7f@\xfa\x0c6\x1a\x80\x19T\xb4)\x9d\x97j7\x95z\x97\xc9\x92\x8a\xd5\xc2Q\x86u\xf7\xd0\x83d+\x12\x94', b'\xe1;\xd2\x0c\x9d\xd5\xc4j\x87\xcb\x88\xb4v\xd6\xee\n\xaf\xdf\xe1\x1f\xe4\x9b\x86>\x0e\xf0\xa9\xab\xa9\xd4`\xee\xd0\xa7\xcd\xa7\x11J\xe57\xb6\xd5\x93\x00\x8b\xf9!\x81/Q[\xd4\xd6\x95`e3\xa0\xd5\x0e\xfa\\!\xcb', b'ST\xe9\xee\xbe\x1bn>+\x03\x01\xc0\x96\x07I\xe8q\x00\x94>(N\xd8\x84\x13\x8a\xff*+\x16%T\xb4\x12\x9a+\xf3\xec\xe6_u\x0cp\x18\x07cC"\x13C\x0b\r\x11\x03}\xebk\xe9\xf9\x8bZ\x87*\xde', b'\xe8\x8a\xaa\x86\x1b\xfco\xae\x16\xc7\xdb\x89\xd1\xa9p\xbf\x17\xe9\xe2\n[Dx\xc9e\x7f\xa5\x84w\xf0\n;Pjv\x0eW\xbaV\xff\xec\xcd(\xe6U\xec<\xeb\xb5|\x1f1\x00&\x029\x1c\xbfj\xd8\x1c?\xb5}', b'\x94\x95o\'\xe0\x97&\xc4\xe0\x88\x1eh\xf1\xf9\xfe\xaf;\x0cT-\x87 \x8c\xe8\x19GE(|\x10\xfbw\x00\xa3&\x03\xe4`2Z4s\xf6\xd4`\xd9#2#\x19\x14\xd4O ")X\xee\xbf\x9e\xb6}\xbb\xe6', b'\xbbH\x1ep7<Q\xd4\xed\x8d\xe6"\xb3\xa1\xf5EIM=\t1]\xa2\xdb\x7f$\xbb\xb1\x97u\xf7\x1b\x10\xf8\x82\xc7\x8ce\x84\x80-\xff\xb2)\xab\x87\x1c\xf2\xaf\x84\xa2JP\x91\x7fp\xd2\xe0\x11\xa4\x8f\x10{(', b'\xa1\x94C\xe2\x8c\x932w`x+t\xbe\x97\x1b\x89\xed*\xa9\xe81\x82\xae#\xfc\x87\xe3\xfb"&\xfc\xb4=I\xe3\xe0\xae\x99\xc9\xe5A\xfaw\xaaO\xf7G%\xab\xcc#\xb8\xa4\x1d\'\x1c\x0c7~\x03B\xbeJP', b'\x0bF:\x92LC\x97\xed\xdei8{\x1cn,\xd8\x8dWm\x08b\x08\xe1\xec\xbf\xb3\x85U\xa9$\xf4\xe6zL>\xe8\x0bs\x8a\xa4\x868\xc4\x05t\x94\xbe\t \xfe\xbd2gj\x11\x97\x00\x9f^d>\xbf\xa3!', b'\x876;\xc7x\xe3\xfd\xaa\x0brKkU\xaf\xce\xd0~\xad\x9f\x9bF}F\xcb>\x15\xdb\xfb\x7f\xf9\xc8?d\xe0\xfb\x92f\xbe\x02O\x99\x95\x08\xe4\x86cY\xc70\xebkhg)\xd2 \xc0w\xad\x8f\x1d\xb1\xf7\xb3', b'\xe0\xf8v(\xde\x85\x84"Wx\xd6\x00\xed\x15\x1c\x9a{\xb5\xab\x07\x07\xe4-\xbb\x82`\x80\x9ah\xc5\xe7\xdfTU\xa2\xe6\xa5\xc9U\xb6\xb8\x83f\xfeU^\x91\xa9\x83\x9cE\xc0\xa4\x19|"n\xfa4\\\xaf\xac\xf6s', b'\xd9\xba3\x8b\xdd\xd6\xba\xf9\xc4\xe7\xa3\x88\x9fx@\xbf\x91\xc7\xdb \x9cP\xa6\xa5\x91\xdc\x80\x12x\x9f\x88\x82\xb0\xab\xab\xf9\x02\xb0\xda\xb90#\x8a\xe6mO\xa0?H\x16D\xaf\xff\xeb\xbd\x94\xf9\xa0\xab!\x9e\xb0\xdf\x83', b'RN\xb6\x8c\x8c\xb1\xfbs:\xd1\t\x06sMs\xdf\xc5\x91wm\xbav\x95f\xdb\xbc\xc4\xa0\n\xc8\xbc\t\xbe5\x92\xbc\x08e\x88r)\x1b\xad\xe2\xa6<!\x1f%-9a7"hA\xb9?\x9f\x81}H.Z', b"\x88o\x85\xdd\xa7\x18$:7\xef\xce2\xeeS\xce\xa1C\xad\x0f\x85\x81\xc92K'\nm\xe6\xb6\x98\xb5Q\xc2\xea\xcdl9\x9c\\\xae\x1bu\x8c\x83\x15\x11\x9e \x80\x00y\xb8h\xce\xaa\x83\xf7\xd8\xf2\x12j&\xfb\xc0", b'\xd9As\x14\xbd\xbf\xf3\xaeu:\xce\xa9\x85^\x00\xe7\x9c\xde;\xef\xf6\xa56t\xa8Q\xc2\xbf\xfap\xd3\x82D\xe8\xdf\xbea\xf8V)\xa8\x80\x7f\x14\xe9\x9e\xef\t\xcby\xb5\xcb\xbcs\xb7\xa6\x7fj\x99\xbft\xee\xee\xcf', b'\xb8\xa8\x84\xf9\x9bFV"\xedk\xb3${\xcfDl\x19\xf12=\'p\xb3\xafd\xd5\xf2\x81$\x17$\x10\x92*\x8eyx\xa9r\xa2^\xd5\xa7\x8d\x1f"\xbb\xc1(\xf6\xa9\x00U\xe4\xbd\xa94\xe1\x94\xec\xb4\x0e\x01\xb3', b'\x1d\xff\xd9Uh/m\xdfOE\x0e\xaa\x04w\xccY\xbcLy\x1238\xf0\xd7\xd9~\xef\xfb;,\xad1s\x02\x8e\x7f%\x93\xce\xa22\x12\xef\xb3\x07\x1a\x965\xea\xbe\xcd7\xad\xbe\x0c\xcf\xab\x1f\xa1\xd3)\x82\x18<', b'9?\x95\x0f\xa2W\xe5\x97\xe5\x87\xdf\x08C\\\xd3(f\xd3k\xf5Ui\x7f-e\x9f]\xf2\xfacx\x16\xeb\xc5\xbe\xf5 \x0f#\xce\xb4\xbc\xbc=)W\x88Y\x94jh\xb5\x0f=\x9c\xber\x842\x9fo\x08K\xe3', b'\xfc\xc9\xeb\x87\xbbu\t8\xe1mC\xdd\x94\xabugGc\x04\xe2\xad\x0c1\x13\xf1\xaf0]\xfcnC-\xbf1%NW\xead*\xc6\x1dOC\x10\xef\xf3\x87\x93\xf2\xd4\xa8\x96\xd7vr\xec\xc1\xe8\xad!\xd6\x03Z']
# L1 = [b'+\\\xf0/s\x86\xef\x91Zuk\x1d\x0b\x00\x8f\x07\x8a\x01\x97\x8a\x8b_\x99\r\xacc\xabT\xd2t\xa9\x8a\xc8\x92\x19~\xabl\x18\t\xd1[J$\x1bE\xd6~\x05\\\x90\x0b^:\x87[\xb4\xba!\x97\xa3\x8c\xe0V', b'JFZ\x0b\xab\xac\xd5\xa3IU\xe4\xd2\xb3\x97\x1c\x15*\xe9\xa1\x87\x01\xf9\xfd\xd7(z\x0c\x14\xf3{\xc8\xfa\r\xaa7M\xf8\x81U\x9a\xb9\xbf\xfe\x05\x99-`d/\xca\xdb\xbd\xc5C\x19YM\xe8\x1c\x04\xef\xb6<\xca', b'\x8a\xab\xf3W#\x93\xaa\xb00j\x8e\x8bI\xad\xcb&\x15\x0bj\xbf\x05\x1cn\x1e\xc4\xe6|\xe2\xbeo\x98\rHB\xee\xae7\x06\xe4\x80=\xfcK\x9c\xe4|*/@\x83\x1b\x84_\x0f\xf1x\xa3\xa0(]\xc9"z\xd7', b"\xc3\x1b\x91\xe3\xe04\x11\x93q\xa8/\x18\x19\xac\x95\x8a&fQ\x9e\xd6\xf7kf\x83\xb7\x90\xcdnt\x1b\x934\xe9\xdb\xf9\x04\xa9\xa2\xeeF\x95}`\x8a\x9d\xd7\xb5i\xa8'\x9aAQ\xac\xaa\x10\x85J9\x15\xbb\x85\xfa", b'>\x7fv\xc0@\x85\x05Kcf\xa8\xf2\x98!${O"\x87\xb8\xb7\x9bY\xb0\xca#Ri?\x8fKPi\x83\xe1\xa6\xff\xb4\xd8\xd9\x17\x83Oi[;\x84\xc9_\x7f\xd5m\x9aj:\x18\x0f\x9a\xc3\x12Y\xcb\x9aO', b'(\xbdp\x00-f\xfa&tG\xcc\xbb\x85\x90\xedZF\x08\xce\xbek\xabF\xaf\xa0\x98\x90\x8f\xbb\x9f[\x13\x01[\xa4\xe2\x80\xfb\xab\x15\x87\x1e\xb91_5(=Q\xcdw\x07Fa{\xd7\xf4\xd4\xde\x11\xc9_\xb4\xc8', b'\xbb\xb1D\xe6\x9c\x9b\x1e\xb1\x13\x17\x1e\x03\xf7R\t<LE\xccS\xd2\x1a\x9f\x97e6\xb2(8\xa9H\x01t\x86\x13\x05\x0c\x97\xb6\xd5\xa1_Xxm\xba\x00\xa5\xbc"\xd5\xc7\xe3\x17\x1d\xf5\xb1\xcf\\0\xff&\xfa\t', b'\t\xab\x10\xb4\x9e1\xa9T`\xaf\x10\xa1\xe4\x9c\xf7Q\xe5\xf5\x8e\xa8V\x82|\x18\x95\xad\xa1\xe1\xf9\x12vHm7 i\x19y\xa5\xe9s\xe9\x0c\xb5\xd20hC\xff6\xb3h\x98a\xfbW\xd0\x04\x96D\x17\x87\xee\xbd', b'\x82\xfb\xc6o9&}\xfa\x9f\xec s{\x80\xc5\xe32(\x0e)Ixr\xdf\xe5RF\xb5\xe8\x14\x8f\xd4\xd3\x06O\xc0<\xe37\x02\xfcc\xe5\xe1\x91\xc9\xf09\xf9\x9f$\x17\xe4{\xcb\xfce\x90Av\x1f\x81|2', b'\xf2=\x845\x9d]\n\x89c\xaeX\xa7Gb\xad}\x85\x0c\xab\x92\x89=\x0bx\xbb\x1a!\x8bB\xff\xf1\xb9\xb3\x9aU)$\x03/}+yJ\xd5\xb6#xK\xab:6\xaf\x18& 6f\xd6\x9d\xa6\x16\xab@\x1a', b'\x8e!\xe2\xb1\xa9l\x02\x9di\xd87\x7f\\\xfe1\x89n\xe5y\x07\xa4a\x93\xd5A\xae\x81N>\xdf\xf7(&\xe7\xf8)a\xbc\xb6\x00B\x82\x0eo\x87\x08\x8f\xe72\xc1\x18\x1e1"\x99(\x89\x90\x84\xec;\x1b\xeaW', b'k\xa1M5m\xce\xfc\xf4<=\xdak\xc1\x1b87\xd8l\xec\\h\x13\x95\xf7?\xa1\xd8\x8bgN\xf6\xfa\xc7\xe7d\xce\x9fF\xc2\xbfl\xbbY\xba\xcfc\x15\xc3^\xce)\xcc\x0f\xba\xe0"<\x88\n\xad\x12\xb3\xb7\x0b', b'\xa4;\xce\x97\x8b\x8a\xa0\x96\xcb\xbb\xaf\xb2\x93\xfd\xeb\xf8B\xf9\x0f\xe4\r\x06\xe7\x10$\xa2$\xe3\xc2\x06v\xd4\xd8\xab\x88\xd6\xe7\x00k\x82u\x19\x9d\xd1;\x0b\xafk!v_2y?\x99\xe8\x1a\xab\xb36\x0e\x1a\x9d\x0f', b'L\x82\xc8^\xb9\x85)^\xaaL\xe8y\x9c\xdcn1\x0c\x17\x10\xacV\xc1M3\r\xe4D$\x82\xb1H\x1a\xed\x98>A\xc9~P/\r\xd8\x07\x80W\xcd\xd1\'j", \x17\xfc\'\x1eu\xb1\n\xe0L\xaee\x9a', b'\xb8\x90\xe4\xa8.\x8a\xea\x05$~f\x16\xe5[\xe9\x80*\xcaY\xfcF\xd1\xf7\xddYq\tix\xa8\x86\xcb{\x9aK\x98\x1c\xcck\x00\x0f\xbf\xc3\xda\xc7\xa4J\xbd\x96\xec\x1e\xf7$\t\xb7s\xd6\xa0\xdc\xaa\xd7\x0b\x01O', b'\xdd$\xe2\xad\x9b\x12Z?\xcb7\xf1\xf9\xe1\xccg\x9at\xeb\x8bc\xcb\xac\xa4\x93\xa7\x88\xb4\xe9[\xb2\x8d\xd2\x94$;\\9V\xf9\xf4;\x88\xddYh\xe4kd\r\xd1\x8bvm\x0c\xbe\xc5\xe2\x1d\xe7\xb7\xb3\x96\x17\x01', b'\xfd\xf6 \x92\x84\x88\x1cy\xe7\xff\x13t3C\xf8\xd7\x97[I\x14=\xee\xc8\xcfp\x02\xa6\xbdm14\xce\xdbC\x95\xd6d\rJ\x12\xc8/\xde;\xc9\x0c$\xdb3\x08\x8f\x8d\x87\x1c\x07\xae\x87\xe5hB\xd1\x0cv\x82', b'\xaf:\xb0!1aK\xc9]\x9d\x08R\x15+\xc1"\xee-\x1b4.\x178\x9b\xd5\xd2\xe7\x9a\xdd\xa8\xcc\xbb\x8d\x0e9\xa07~\x89\x03Cy\xf3\xaft\xef\x82\xc2.\xfa\xe5\x8c\xce\xeeer\xdf{\xabw\xedQ\xca\xeb', b'\x85\xd4\xd7x\x80;\x80\x19!\xffHk\x0f\xa8ko\xe6\x040\xe9e\xb5\xfcx\x8bRQ\xc8\xcd\x85\xcau)\x10\xc4C\x18\x7f\xcdTm\xc0\x1c\x10\xa3Me\xd8:\x0e)\x94\xc7d\xc8\xcf\xc2\xca\xd5x\xefY\xed\x85', b'\xb3l\x90\xe0\x86`{\xd3\xa2\xca\xd2\xd8\x89\xe7\xdf\xf0\xf9\xec\x1d|qN\x8aM^w\x98\xf2W\xf9@\x7f\xc9{|\xf5V\xa0\xca\x83C*\x13X\x94\xc8\xaf\xdbzm\xa4\x1a\xd2 {,\x89\xae\x1f\x90\xf1Pk\xd0', b"\x07\n\x01\x19\x04=\x92\xac\xb1\xb6c\x0c\x16\x1cAK\x80\xe0RZ5\x03\xd7)h\x19\x9cF\xff\xf9u?\x88X\xb1\xd5\x97\x01AUh\xcf\x8ab\xb8\xba~SDP\xe1\xc8\x90\xba\xdf(!X\xe1\x11',\xf9\x98", b'\xb6\x9a\xfatj\x0b\r\xd1\xb9\x95\xc9\xbd\xefO\x87Z\xd2<1\xb0N\xd2hq\x0c\x1bl\xc9\x04\xb0\xbb\xe1,\x1e9\xf4\x936P\xdbz\xb7^\xfd\xd4Q\texV|\x9e P\x93\x05\x18\xd8:\x06\x83\xf7\x82<', b'\x0e2\x8f\xa7\xb0,\x04\xe1\xdf>\xdd"\xce\xa4\xf4\x90%\xbc>\x9f{\xecc]\xbcTD\x96[\x18d\x85\x8b\xcf\x7fV\x02\xc5\xb1M\x17d\x17\x91\xa0v2G,\xf1\xc5\xb9-O\x12\xd7(\xeee=\x0f\xe2\xb5\xae', b"\xb7\x89\x03q\xde\x93\x82\x15;\x0e\xcf\x95\x8a>V\x8f3\xb4\x1d\x94a6Bz\xe4#\r\xca\xf6\xd7\x18\xaa\xc9\x10\xc1b\xa4I'\x91F\xd9\x89%\nqh-Q$\x16\x0b\x14/\xe3F\x9c\x9a\x06G\x87\xffe\xb5", b'\x00\xf0\xe1\x99(O\x8e\xac\xb2\xd7s\xa0\xc7\x98<\x89\xc5\xfce\xa63\x94\xb2\x03\x03\\\x01\xca\x89^)(\x00F\xd0\x81a\xc4!\xa7\xa6\xbc\x16\x0ea(\x11\xb2\xb3;\xd7\x92\x13_,\x98\xedsa\x06\x85\xc3\x0b\xd7', b"\xe4l\x14\x97\x8f\xea\x06?\x8a\x0c\x87\xa8'f\x1e\xce\x05O\xc8\xedO\x9f\xa3h[9\x99\x1a\xb4\xbd\x8en\xd6\x81\x8c\xea\x1fx+r\x0bq!~\xff'\xefi\xc3\xf8\x11\xf1\x88+w\xec=\x12\xa9\xf9}\x87\x8aJ", b'\x8f\x9e-\x86\xc0\xbdp\xbd\xf8SW\xd3\xde\x9a\x9c\xa4/\xbcw\x99\xb2\x1f\xf1\x86\xc4\x91\x06;\x8f\x981\xb4\xef^\x9a\x87\xb8\x97/\xd1\x9c\xedc\xa01\n\x0b\xd9\x1f\xe2\x92\xb6V=\x1cc\x81\xb38\nG\\\xa0\xbb', b'w\xa5m3af\xad\xa6>>D\x1d\xa3j\xfd\xc4I\xea\x1d\x99\x85\xfcQ\xde\x07\xfc\x07\x16=}\xe2\xcc\xbaS\xa4\xe7\x81\x9b\xd6\x90s\x06\x01\xa1S\xd7\x01.M4\xfe\xaf\xb6\x0co\xe8C:\xa41L%0u', b'\xf5h N8\xb8eh\xb8\xffp8\x82\xbf\x9b\xde*\xd8[\xc2@\x18\x80\x87\x1a\xb0\xa8S|4\xac\xfe\xf5\xaaj\x89\x12X\xe0H\xf9\x08\x8f\xad\x1b\x7f\xfd\xf8q\x9e\x82\xc8\xeb\x9b\x84\xe0}\xc3\t\x17F\xad\x88\xc8', b'\xd7&K\xc2\x86A\xe5\n\x1da\x0e\x97\xe7\xdaL\xf5\xfe\x1862\xb8\xd1%n\xd3\xed\x19\xff\\\xff\xfbM\x1a\xdd\x8d\xaa\xaf\xb9\x14\xaa&Gf\xfa]!\xcc\xfa\xa37\xd46\xda\xc8\xe7\xc0E\xb9D`p\xc5\xb5\xf1', b'`\x0c\xb8{b}\xa7\xef@\xe1\xb2\x93\xabk\xdf\xb1\x12\xa0\xcd\xf9\nn1\xbc\xdfQE\x9dC\x08q\x94\x1e\x12oh\x96\x98\x9fT\x07\x8fJ\xbf\xe7])Z\xe7,\xa0\xb1\xbe\x1b\xf2\x01\x8b\x0c\x0c\xdc@\\\xd9J', b'\xb0\xfd\xb1\x08\xaf3\x11#\xfcW^\xaf\x1d\x15\xd3\x92\xc8&6y\x89\xa7\x0fo\xf8?\xa9\xccU\xac`\x89l\xf8:\xeb\xf6.(\xdd\xb8V"a\xf0=0!\xe3nr}\xb1\x92\xb1\x1b}[>\xaf\x1f\xc3\xa5Z', b'\x9a\xd6Ei%\xcd\xa0\xc0N9\x8f\xb3 \xe86;\xdf\x9f!yw\xbd\x87\x98\xa6\x8cgb\x17\x9b\x10\x1d\xdd\x96\x04<kK_\xe0\xa2\xe5Q-\xf1\xc6\x1dB\xcdK`cC\xdb\x1cIxU\xc9iG\x81\xd7\x92', b'9E\xe6\xf7\xdb\xcbRy\x10\x91\xce\xd2\xe1\xa9\x939\xa9#$\x11\x1c\xe7\x93\x84\xe2$?\x81\x1ft\xc9\x80\xad\xf6S$f\x06\x138\xa3\xeam\x82dC[\xc1\xf2R^}\xed\x1du{\r\x8cv\x94JZ\xd30', b'\x91Y=\r\xbd\xc2W\xe9\x17\x16\xd6M\xd4\xb1s\x86\xcc\xa3\x86\x04\xaa\t2~c\xae\nr\xad\xe0\xb6\xb6\x81\x01\x1d\xe2\x80\x81v\xbex&\x84\xa7\xfb\x83\x03\xa6\x84\xd7}\x8c\x85\x8e\xb4tN\x8a\xa6\x1a\xd1\xef%&', b'\xce\xc6\x87D\\\xe5\xd0\x97\xf2\x84c\x80D\x19\xe5\x97\xe5\xb1.~\xf7\xe6\x99\xac\xb9\xae:\xf0\xad\x00\x93o\xc4M\x17D 2\xd6\xa7\x9a>\xb1\x8e+\xd7\xa6\xa1\xb3\xa9\x0b|no\xfam\x9e\xd3I\xb0\xef\x86\x9aT', b"\x11iIT&5'>_\x0e\x7f7j\xad\x9f_\xfb\x95\xa1\xdf\xbc;\xc9\x96\x02d\x18]k;\xbd\x0e7L:8\x07\xed&\xf4\x10\x846s\xa0\xa4K\x0f\xcc\xc0\x8f\xafB\n2\xde\x015\x96\xc3\xe6\xcf\x1e\xf3", b"\xd8\x8d+?\x144\xfd%)B[\x04\xba\x81\xa3\xcat\xfeb\x83\xe5T\x11\n\xdb\xe8f,\xd0\x1bbZ\xcc\xf4\xa9\xc7\xa6\x8dN\xd1\xc0v\xe8\x84\r=l\xcf\x14&\x84\x0f\x00\x18'F\xca\x05\xcd\xab\xc1\xc0z\xaa", b'\xde\xd1q\xeeXU\x02\x1e\xf6\xe5\xf8\xf2\xc3\x14\x1dD\xcc\x07\xa7\x06\xd9l\xb7\x89\x1f\x85\x16l{\x02\x84\x9d\xb8\xceH[\x0c\xbfN|EE\t\xe6\x9dLC\xa9\xe3\xf1\xdc\xf52?\r4\x90\xe4\xad\xb4\x14x+\xaf', b'\xe9\xcc\xb6\xd8:l\x0f\xe8Qm\xdc\x02\x8a\x8d3S\xf0\xb8\xcb\xab\xdc\x1c\x1az\xcb\x87+\x95\xdd?P~j\xca\x94\xa2\xde\xd1Nq\t\xbe\xd4g\x02\xb8QZ\xc3L\xd5nb\x90\xbc\xeeWqJ\x8e\xc0\x81\x15\x06', b'\x04\xfe\x07\xed\xbb9\xf4\xb0bXT]\xe1\x8eTJvDH\xf4\'i"YZ\xfc\xee\x13\xb7p\xa4\x8a/\xeb\t\xea\xb1\x1b\xd5\xa7\xe1jH\xe6\xa4]\xdd\x8b\xf7\xf0\x84a\r$\x19\xaa\xd7\xd6\xdf@\xd2\x88mO', b'\x1d\x07i\xed\xdb\xb34\x83\xd0k\xaf\x88\x13\x8ag\xbf>\x0c\xaa\x8a\xca\xbb\xe4!/\xb1\xac\xed\xb7t\x9c\x992\xc5\x1d\x04\xbe\xe1\xb1\xf5b\xa5UM\xda\x19W\xe6\x86W\xcb#\x89\xd8]+\xc9\xe1F\xde\xbb\\\xaa\xf0', b'\xb2\x99\xa6\xcfv\x1a\xae~\x08w\xecl2;\x87\xed\xbc\xb5]\xec\xe7\'\x16p\xfe\xc3#\x8a\x1abt\x99`\xaa\x81\xc6\xae\xf1\x1eV\xe3\x10\xbc\x1542\xf4\x0c\\Kk\xd9\xb2y\x95|?w\xa9"\x02\xb3n\xcd', b"c\xfa&\xc5!\xd2\x8a,\x11\x93\xf0\xda\x9b\xb4kY\xe0\x15\x97\xc9\x16\xa6\x7fF\x7f\x9d\xb2\xa3R\xc1Os\xdeT\n\xe1\xc7G@\xaf\x94'<+\xb4\xa2\xe88\x00\x8d\x92\xc3\xa2\x01\x9fo\xef\x1e\xa4\x0eOi\x8b\x84", b'\x03hy\xac\x0b\trPP\xdd\xd8\x901A\x93\xe5\xa3\x04\x83[D\xc7\xb4\xde\xd1\xa2O\x11\xd7\x01X\xdad\xcd\xe9\x90\r\x88\x98lM\xa3\xd8\x08\x01\xa1\x96\x9e\xa3-F.\x05\xa9[~\x17\x8a\xf9o\xf7\x1c\x9eu', b'\xc8\xef\x11\x1a\xa0/\x8et\xc2\x16[\xcc\xca\xc5\x92P71R\x1b\xb0\x8b\xcfg\xb3\xad+1\\\x93b?\x9fn\xa8k^D\xaf\x0bV&7\xf0\xa0\xf3\xbf\x19*X\xa1\xde\xb7K\x8b\xf4b+\xb5\xdbC\xb5\x11\x8e', b'/X\x0b9f\xd0\xe3\x85\x1c\xa3f8\xe7^\x91\xbc\x1aA)(\xb6\x05\xfd?\xb9i\xa7\x0c\xf7\xc9\x17\x023\xe7^c]\x04jj\xfb\xa2\xa3\x88\x91\x89\xfbCi\xcd\x1b\x01=\x0bP\xb3l\x9f\x0b\xb0;B\xb0\xb5', b'K={\xd8\x9b\xd9\xf5\x92\x86=\xee65\xd3\x8fJ\x1c\x16\x89\x82\x80~\x7f\tI\xcc~\xceC\xf9\xce\xb9UI]\xffU\x92)v,$c\xf90f=\xe5\x07\xf5H?\xe9\x1c#\x99\xef\x08\x92t^\x80\xa7a', b'{g\xc0\xa8\xff\x0b\xb4\x8b2_\xdcF\xad\xf5\xd3\x97\xca\xd4MD\x9b\xba\x99>\x1d\xc48\n\xbb\x17H\x9dCJ\xc27\x17\xa9\xd6\x10,d\xd6\xbe\x03\x0b)@\xb1Q\x8cP\xbc\xe3\xe0\x8e[\x8c=bcR\xe0P', b'\xc8\x86\xef=`@*\xb0\xcdF/\x0eK\xeen\x06\x11\xfcXmeW\xe4\xe4\rG";\xf6\x01[\xc7\x0c\x8dk\xa8\xd3\xe5\x14\x85\xd539\xd1\xd3\xf3k\xdb\x91%$ax\xda\xf5\xa3.\x0b\xe7\xe4\x18\xcb\xcc\xdd', b'\xaa\xf1\x8a\xf0\xf0^u\xb2x\x95\xf8\xbf<R\x90\x97\x88\x15U#:o\xac\xe5\xceF\xd4\xec4\x1fSS\x04\x01\xc0\x82Q\x9a\x8b\x83\xcb\xe7\xf6\x14\x8c\xe4CG?\xd7\xb3?\xa4\xae\xbeN\xbb\xbd\x8d\xd1J\xb5\r3', b'\xdb\xf2u\r\x9f\x9a\xb3\x86\xedG\x11Y\xbe\xe6*]\xec6\xd8i\x98J\xe22j\xa7Y\x8d\x8d|3\xcb^\xb3\xa8\xe75G\x04hm\xea\xb7\x00\xdfk\xfdf;\x05\xd8\xee\xccRr\xe9O\xad\x83\xff\x01O\x15\xbc', b'^9j\xdeX\xed\xc6\x8c\xc5\xccp\r\xa0\x87[\x08z\xc20\xbb\xa1P\x92b\xca>\xea$\xff\xdf\xea`\x95 ?A/\xb8\x03|B\xd8H\x04\xc9\xfc\xba\xa7\x81\xbe\x92\xdc\xa8`\xab(\xee\naF\xa8\xe1\xa4\xe5', b"b\xd2\xb8\\\xe0\x88\xb8lV\xba0>\xc3\xd6I$\xcbT\xd1\x99\x8b\xd7\x86\xe3\xf3=/\x80\xfc=\xc2\x91\xf5\x10\x9aE\x9b\xa6\xd3\xa8K\x82\xd3'4\xdb\xdb\xf7=\x92\xaa\xb4\xdb\x05\x81V#\x91\xb3\xa3\x80J\xbc\x96", b'=\xb9@:YW\x9b\xd3\x11\xae9#Q\xcf20e\xf5\x16\x04\xc6),\xb4\xc4`\x11\xd3\x8a<\x8eD\xc6\x97\x1c\x1c\x0f\xb2#\xe3.\xc3\x9d7\xc5\xad\x16\xb7\xd0f\x19!\xe1\xfdnc\x19\x07[\xe3\x93\xae\xad\x87', b'\xad%\x17\xa4\xaa\x16\x06\x0f\x9a\xdeZ\xdd\xa2`\x84\xe7\xf1\xd3\xed\xf2\xb04\x9f\x01\x10d\xf9\xa0g%\xf9a\xe4\xa39\xdf\xbe\x04\xec\xd9\x1e.4\x8dq]\xe0\x11\x05\xa7\x8c\xfar\x8cz\xd5\x05\xbc*\xb7\xf3\xb4\x9b\x8f', b'V\xa4\x05n\xd0=\x1eb\\%\xc8\x08\t\xebh\x12\x19xG\xee{\x97\x13\x94:o\xe4\x80\xffL\xf4(\x83\x937St\xdc\xb6\xd8\x96]5\x18\xf9\xdb\x98.\xb5\xd8h\x1cY\x9d\x9cP\x00\x96\x00\xcf\xca&\x98\xd0', b'\xe6T\xddtp\xc7\xdd\xda\xb3\x0e\x88\xea\x12\xcf\xbf\xd3\xfbA\x84\xd4\xa9\xa5\n$<JUMqr\xd2\xc4n\x10d\x8d\xf7g\xf4\x84}~\x8b\xfet\n\xdb\xff\x10\xa3\xd28w\xdc4~s\xa1\xa4\xec(\xf6\xadi', b'\xabw\xb7|\x86\x02\x10\xb4\x08\xff5\xce"\x05\xd7>7"\xc3\xce\xd3\x11\xc6W5Ou\xf5\xc9/\x86\xb5\xec\xe4w\x1bs\xf7\x84\xc6\x0b`\x8d\xcc\x80\xa6\xbe\x87\x96\xd8[!\x1e\xe98\xf0\\\xda\xc9*\xb5\xdc\xb4\xff', b'\xa7K\xd37+\x0b\xd3\x81\x9c4\x8a\xbd\x90f\x92\xc2DQX\r\xb9\x8b4\\\xe9\x94\x1d\xb5\xde\x93\xc4\xfa\x9d\x1cR\xc8\x9b\xc6\xde\x98\x03\x93\xc12\xa8\xcb\x1a[\xf1\xd8\xd1\x915\x82\xdbi\xd6\x94\xc95\xdd\xf3\xf4;', b'\xb8\x9c\xbd-\rm\xb8dP\x1e[\x9b\xfbT\xf7q\xe7-\xaf\xa0\xf7\xfc\x1b\xd7\x16\xf2\xf4\xd8\x7f\xcfm\xa8\x95\x85\xfa Z1{I\x07\x85E\xf8\xdd\xfb\xe6M\xaa\x04\x97BS\xd0\xb8\xec\xc3\xc4\xa3\xfe\xaf5\x84`', b'\x02q\xb5\xf5\x88a@\xd7\x8b\x8f\xc3C\x08F\x9f\xfds\x9b\x99G\x8d\xd1\x15\xc5Z.G\xeb^3\x06\x8f\n\xe6w\x8b\xa4\x86\xd3b \x9cs\xfey\x0eQj\xddT\x12{\x90]K\x17\x7f\x83\xf0kZ\xc97\xb1', b'\xfb\xd8\xc5\x92\x90\xef\xa1-\x97|\xba,\xbd,W\x01$j\xbc\xa0\x10\xfc0\xc5\xebx\xf7\xf6 \xe5\x12^\xaf$\x82\x1d\x03\xfd\xac\x1c\rA[F\xf5,p\xd7\xdcu\x03)\x92\xc4\xb9\xe1\x17\xe7\xa8\xba:\xe3r/', b'\x97;\xb1#\xaf\xad\xb7\xc9.\xfb\xfa\x8fZ\x8a\xe9C\xe7\xc1\xa726~X|((p\xa8\xa8\x9eX\xd2\xa0\x15\x12\xf1-Il\x86g\xe8d#D\x03\x83\xe6\xafx\xe5h\xa0\xfd\xdenlj\x1e\x9f\xab\xd3\xc4Z']
# s2 = [b'\xa9s\x9e\xdbE^\xab\xef\xf0\x96p}\xd3M\x00\xad\xa5\xb2\x90AyE\xe4,$\x8e\r\x7f\xf2\xecM\x11', b'\xab\xfbE\t\xd8b%\xab\x0e\xaaf\xc6\x11\x85H\xf7!\xbe\x90\xd5z\xfe\xc3I\x95\xde\xbe\xd4\xd0<\xb7`', b'f\x97\xc6; \x16\xedB\xea\x9f\xbeM8\xe8\x86\xd9\x17\xa2y#\xfa\x971\xcdH\x92\x1c\xc1\\w\xe5U', b'jf\x8c\xb0P\xeb}:A\xeez\xbc\xaf8-\x08X\xebi\xca\xe2.\xe3@\xde\xfc\xc7\xd7\xa0d\x99k', b'r>V)\x81\x96|\x87\x99z\xd0E$<\x02\x1ao\x19\x1aV\xa4"\xf7\x1c5\x92<m5\x89\xea\'', b"Ouk\xb9\xb9,\xe1!_\xe3'k\xf8:v\xdfhZ\x85k\xc2@\xd8\xcba\xaf\xae\xd1v\xb4Z\xa8", b'|\x8e\xa2y\xc1\x91\xea\xab2\x89\x15q"\x89q?\xb3\xc8\xb1\xe6<\xbb\x0e\xb6\xf0=\xc8\xf2\xea\xb5\x08\xf6', b'\x1aa\x81\x80\xaa\xc2}\x9f\xf3\x9c\xbd\xc5\xeca\xbf`\xe2\xf1\x0eL\xab\x8aq\x82\x8ekkZ:\x91\xa5\xe1', b"\x94\x9a\xd4\xf6\xdf2\xb5\xff\x0fR\xeb0\xdc\xfd\xb1pl\x08B\xcf7\xa7\xc6\xf1\xfc\x8f'\xe5\xf4\x00\x8e$", b'OK\xbc\xa6+\xb1\x89(M&(\xa7\xa2\xbah\xf0Tu\xbb\xe62P\xb0Gd^l6\x1e\xe3Ym', b'\xde)\xa5c\xd0\x17=xw\xda\xe2n\xb8{pFVa\xdahg\xd5\xa0\xf7\x802_6\xc9\xcd\xb0\xf4', b'\xd6MM\x91\x1fU\xde8\xd2\x02\xe1?\xf8*\xc2\x15+\xfe\x10\xea\xbaA\x03\xc7r\x1b]Y\x85\xff\xa9\x1b', b'K\xbfR+P\xfb\xdf\x93\xa6n\x8f\xe0\xf4`\x88\xe0\xc6E;\xb7\x8a\xa5\xb5\xff"t\x082\xa37\xd1\x12', b'U\xfd.th\xba\xd8\x1a\xf3\xc4Y\xeb\xfa#3$\xc0\xda\xa8\x90\xa7\x9a\x10E\xc3\xf3\xb3\x04\xd6\x06\xcf\xe9', b'\x83\xed\xf7`\n\xfc\r\xdd\x8a\x0f\x9b\x87m\x07\x02\xab"\x9e\xc5j\xf2EP\x82r\xa5\xa5\xb6=\x0f\x14\xa3', b'\xfb\x90\xf0\xb0\xe8)C\xffnS/|\x85\xf2j\xa7ur\x05\xdd\xe8HFW`2\x80O\x0e4\x91\xdc', b'\x98\xf4_\xe9?\xa8t \xcaH k\x1e\xa6\x0c7\xb3w\xec\x14\xed[\xbf\xbf\xb5\xe8\xfeUS\x89o\x8c', b"+\x10\x90aS\x06\xeb\x98?V\xd7\x92Z^\r\x93sB\xba'\xe0\xafi\x80\xf4\xe3\xdbLu\x82\xf2\x96", b'o\n\x1c\x92\xc8w\xc5j\xbbGnI7\x0c\xc2&<\xebL[\x1e9H@c\xff8h7M\xb0P', b' \x91PAo\x8c\xcb\xc3IH\xc6\xbc,!\x10\xf0c\x05\x94\x9en\xa8B\xdbkm\xaf\xb5\xbf\xc8\xcd\xeb', b'5\xc54n \xda\x95h\xe4\xbd\xad\tm\xe7\x80jfr\x1ej\xedO\xb5\xc1 \x83\xb5\xc3\xc8\xbbHV', b'X\xe3\xda\x97[\xf2]\xf6gwa\xa2\xb5\xa9\x90\rL)\x17XA6\xf8n\x7f\xb0R\xdf\x8a\x9b\xe1*', b'\xc1\x9b"U;)\xea\x85L\xeeC\xc6\xa6\xc8a+\xf8n\x00\x01L\xd9i\xd3R\xc1\xf5\xd1\xa7j\xf35', b'G*\xce\xf7\xf2\xdd\xac\xd8\xa6)u\xd6\xf5oj\x9d\xee\xd7\x89\x86/h\x90QI\x1b\xd3\xeeH\xcf\xbd\xa5', b'\xa7\xa5\xe9\x1e+1\x0fx\xd4U\xfc\x92\r\x17\xae\x13\xee\x0f\xb5I\xc9S\xff~\x94\xbeZ\xc8[\x14\xa2\xb5', b'%K\t\x80\x0b\x13(\xf9y_\x8d\xa5Up\xbeeFW\xe1\xd9D\x88\xdd\xe7SV\xf3\xf1\x87Q\xe3\xb4', b'\x9ai0zJx\xa2\xb4\xff\xe5|\xf9vO\xc2\x96FY)1\x92\xfb\xe7\xfd[1\x96d\xa2\x88\xa0\x97', b'\xc6\xdd\xfb\xc2T\xe4E\xd8\xbe\xf6\xe3ef\xa5\xc9\xe2\x0e\xcc\xb719\x94Ay05\xa6\xdci$\xec\xb7', b'\x99Z\x8f-\xc8\x87\xda^O\x0f\x19\x88. S\x8f?\x008\xff?S~\xcf*\xd8[H\xc56\xa5W', b'\x97\x01\x9e\xea\x84\xbdVR\x9b{\xbd\x9a\xd3\x07\x16M\x95AX\x83\xbe\xe1j\x1f\xe3\xdf/u!\xd8}b', b'ba\x18\xbd\\t\x8bc\x9esW\x13q\xeeX\x01\xa9\xf7\xbc\xb9\xa5\x01\xfd\xa4\xeb\xfa*\xe8_\xdc\x9d@', b'\xb1)8\x0f(\x89fD\x05;\xb3\xf2\x1b\x9da\x0b\xe1\x9d\x8d\x8c\xache},\xcay\xec\xf0\xd2\xfb\x11', b'\xaf\t\x0c\x84\x1b\x14,\x04.\\\xcd\xde\xfd\xb9\x16j\x02O\xd6\x7f\x87\xab[!\xa8\x8e\xb2qH\xe6\xc1)', b"\xd0\xa6 \xcf\xddUNN\x99\x1aQ\xf3?\x1bL\xba\xd3r\x1e\x81\x04F\x90o\xecm'uc:F\xb7", b'aR\x00\x8a~\x1cZ(\x18\x01\xdf}\x9b;\xd82\xb1y\xbdN\xdb\xb4tC)\xfd(k\x8c\x8a\xacJ', b'\t\xf83t\xee\x1dB\x89p\x9c\xd8t_>\xae\x84\x1c\xdb\xdbrm\xf1\xder\xf5j\xf2\xc8|d\x03\xbb', b'\x9b\x04CA\r\xaf\xb1\xd9\x84n\x1f\xd0\x04\xa5u\xea\xee\x99\xac\x898\x19\x9a\xf7\xd4\x1aB"\xf6\xec\xa0"', b'\xe0\xe7r\xfd\xab)s\xd3\xa0\xc5-\x93\xf8\x92\xb4\xaef\x86\xfflI\xd1\xa3\xd66\xcf\x18\xcd\xe7\x10A\x1f', b'\xf3_D\x8d\x04\xcb:\xb7J&[&Q\x92\xbc\xa6zF\x13\xf6z\x82\xe13\xc2\xeb\x13\x1e\xd8{\xd1q', b'RW\xe2\xb3i\x8e\xbe\x81\x17gN\xdex\x15\xdf(\xcc\xcf!J\x16\xf3~\xdf\xc8z\xdc\xca\xa8\x0f\xc3\x15', b'\xfe\x1a\xe0\x05`S\xca\x88\xe2\xb1k\xbf-\xf5\xe0c\xec%0\xf7Qt\x8d\x19)\x7f\xf8\x1b\x91\x7fM\xc2', b'I$\xeb\xc7\\@)\xdd"\xe9\x91\x8c#5\x8d\xa0x\x12\xb4K\xdcU\xb9\xf6\x0e\xaa\x07<g\x06H\x97', b'\xa4$\x7f`\x9e\x83s\xcb\xfc\xbc\xba\xb4\x18\xd4sh\xf2DO!\xf8u\xef\xe0\x90\xc7\x12\x9f;K\xb1\xc9', b'\xdd`\xa4Hh\xbdk/\xb6\xc0~\xe6\xe4\x8eql\x93\xd11*h\x00\xdc\xc5\xee}\xd1\x19\x06h\x80\x92', b'\x91\xc7\x0e\x07\x8aV\x11c\xbar\x10\x04vxDHP\xe8{\xecZ\x17l\xcb\x98=\xe6\x0c\xa0\xca\x8c\xb4', b"\xc1\xc0]QB\xa3z'\xf8dY\x904wr\xa316\xe7\xaf\x14l\xd58IVjh\xfb\xb8\xd01", b"\xffB$#\x82\xcc\xa4\x9a\xb7\x0b\x15^4 \x9dK\x19m\xde>\x9bvK<\xb6\xfa'\x15\xdd1N$", b'\xfc8\xafS\x85$\xd2\xb5\x95\xb4\x0c\x83\x86\xd0\xa5\xe1S=\xb8Q>\xd8\n\x9c\xe1;X\xafuo\xdd6', b'\x11\x93\x1a\xf5\xe5{"\xf4H\xea5?~\x9dY\xc4\x00\n\xba\xc5\x9f`\x84`\xd8\x94\xff\\\xbdU\x89W', b'\xf1\xd73X\xe8\xc77Ale\'\xe9\x8e\x96"\xb2*\xcf\xad=\x02\xc0\xdc\xa4\xe1\x96}q\xf2-\x8c\xaf', b'f\xef\xa0TI\xed9\xd5\n\xa0#\xef\x9a\xcev\x88T\x1e\xd3Q\x9b\xbf\xc6\xebWul\xa3l\xa6\xd9\xe2', b'\x81SV(vo\xbf}Q7\ty\xf3\x04FB~4A\xaa#\x8fO\x92ta\x1e>2\x02\xd6U', b'g\x94\x04h\x97u\x00\xb6\\b\x84\x91/\xc2\x8b\x10\xd7\xd1=M=M\xc3s\xe9\xb3\x8a\xdc\xcc\xde\xf8\xda', b'\x10\x15B\x83\x05\xf2iA+\xc7.\xa3\x9fI\x81\xcdgv\x04\xbe\xb9\x89\x90v\xa5/\xce\xda\xd5\x9e`\xe2', b'\xab^\xc3\x06\xf0E\x90\x8cz\xc0\xb3\x07\xdb\xeef\xcb)p\x12\xec\x80\x06\xd98\xecx\xf8{\x0f\x8a\xbdJ', b'\x82\xe9\xe4\x1d:\xd08Xc\xeb\xdb|\x1c5\xc3\xee\xdf\xaa\x06\xf3\xd0\xde&\x1f\x12\x010_\xa5\xa3\xa2F', b'y\rp\xb5LX\xf1\xfd X\xd2\x07\xbb\x18\x90\xc2\xa2\xef\xdb"@\x0f\xb1\xdb\x1cGhA\x99\x11[\x0f', b'1M\x00\x18L\xd0QB\xaf\xdekI\xe5rW\x96\x0fji)\xaf\xd0\x0e(\xfdb\x8fhO\x8bf\xcb', b'\xef|H\xca\xd9\xab\xcc\xce\xfe\xe9%\xe4\xa3\xd8\xbb\x02\x8c\xe4vC\x83\xd0\xb3\x80~\xddU\xe8\xd2Q\xce\xec', b'\x11\x12\xf6{(\x14\xcd\xe1\xfa\xee\xf5\xb78a\xb5\xb6\x87"\xb3\x17\x9c\x00\x0e\xec9W\xf6\xe5a\xc4\x16\xff', b'C\xf9\xc3u\xa3\xcf\x1f\x01\x92U,q\xbc\x19q\x1b\xe4\x96\xe7>\x87a\xaf?\xb8\x16\x93\xd6\x8c\x80\x1eW', b'\x93\x94\x06X\t\xb3\xdeb\n\xba\x11*af\x98\xcf\xb6=\xcd\xee\xdc,\xbf\x87\xeb\xe6gE\x86\x1fKU', b'\x0c\xd9\xd5\xa2S0\xac\xd5\xb8\x7f|P\xeb\x08\x9d\xdc~\x03c\xe1:\xc4\xf3$N\x02\xb9\xec\x121\xca\x82', b'\xb5\xdb3N0@V%]\xfa\xf1\xf9?\xe7\xef\xee\xe8\xde\xdcq*\x82\x9c\xc0\xcdq\xe9\xe1\xa6 ~\xd9']
# s = b'\xab\x066\xe0~\x9d7\x16\x94\x17\xf9\x10a&\xc6T\xb5\x89K\x8a\x95T?\xf7\xc6\x02\xacr\xfaf\xd8\xb3'


rangeSig = [[[b'K\xee\xd4\x15xm`\xcf\x1f\x9e\xa4\x1c\xc2\x9c\xfd\r\x17x&\xec\xcf\x07\xe5\x1a\xbd)hF\x1ejj\xaa\xf8\xf8\xb7\xb8\xfb\x96\x9bdV\x97j\xf0\xf9\xb7\xfe\x9e\x1f\xd9\xc8"e\x1f]\xb6\xc319\xf3).\x84(', b'b\x9b \x9b\xa8\xf3S\x96\xa0\xcfN\xc3\x17\xdcd\xec\x14\xab,\xc1\xee\xc7\x99+6\x12\xb6\xc2\xbc\xbd\xd2%\x7f\xcfJ\x82\xae\x19\xdf\\(\xe4\xbb\xdf*-#j\xda\x85\xfb\xf5a\x1a\x0b\xdf\xb81=\x9aj\xf9\xdf\x93', b'\xc3C[n\xf9\xaa\xcf\xe7>\xc31Y>\x10\tzJp\xf7z\xa7o\x9b\x85\xc1k(\x87\xdbnE\x1d`<\xc6}6g2\xdfd{\x15\x1d\xaa\x93 \x97R\x15\xab\xf2\xc91\xa6\xa2\xaan\xe0\xf5PP\xf9D', b'\xef\xa4\xcc[\x13p\xaf6\xc3zu\x02\xc3\xda\x9d[\x1a\xd5\xccL\x94_\xab\xdb\xfc6\xe5\r\xaf\xf8\xfd\xd5\x04)\x1b\xf3+\xc8tx\x9b\x1d0\xd1\x9a\x13\xfe\xc5.G\xda\xf8\x03\x8b \xe6;W\x1dEZP\x95\xd3', b'\xa8qx|\x88\xfd3\xe9\xd8\xdd\x871o\xd9k\xb2\x0b\xfdh+\x1d>\xc3}\x90\xcc9\xf9\xa3\x05\xb7>8\xce&\x01\xaf\x9a\xcdj\\D\x00\xff\x1d\xde\x9cjk\xb0\x04 l,<\t"\xe32E\xb6\\\\\xda', b'1\x0c\xe3E2\x91/S\x89\x8d\xde\xb3\t\xe5\xbc\x13\xd0\xae\x8f\xcf$Ci|\xb2\x00\xaa\xb4P{\xa1\x01(\xfd\xbeO\xc2SO\x8467\x16V\xd4\x1cb<\x85SK"\x10c\xc2\x95p\xd4\xcd\xaauM\xe4\x1f', b'>\xcf\xda\xc0\\\xf0\xe3q`\xee\x19]\xb6\x15\x13\x83R\xfa!\xed\x96w\x87\x03\xcc\x0e\xfc\xd0\x9dM\xf4~\xeb/J\x88\xf6M\xa4\xb7\xd74\xc2\xf0\xb5D1\x9f\xff\xf8\xddP\xf7\x10\x7f\x14\x8e\x15\xc9\xb0u\x1fg$', b'\x94\xcd#\x8b\x98\xd3y\x8e\xe1\x86\x83\xf7EG\xeb%\x0b\xb0\xf2\x8d\x9c\x8d\x12/"\x15\xa7\x00\xf0\x94\x91a\xbe7\r\x92\x0e\x0b\n\xf7,X\x02\x03\xdd\x8d1\xba%Xv\xe2:\x1b2o\xc4.9F\x98E\xd4\xdc', b'\x87\x980\xc8\x04D\xc2^\\d\xb9\xf0\xea\xa9\x90\x9c\x11\xca\x8d\xdc\x93\xa9\x8c\xbf+\xe7`{k<\x0f"\xd3\xbfh\xb5\xfd\t\xed@u\x95\xc6\xdd9u\x02+WJl\xc8P\xc8\x87\x85\xac\x86Mi\\\xf4fL', b'\x11NgZ\x17\x16\xf6a\xf7\x9f[\x19\xd8\x0b\x16\xadM\xc4qe\r\xdah\xf5(Rs\x96!\x87K\x18/|1\x8f/M\x83\xe9/7\x9f\xae)\xbd\x88\x10>\xfa-k\x87\xdc\xd8\x9f\xc47\xeeBw4\xe0~', b'\xf71\xae4\x16=\xa4\xab\xdboA\xe9hI\x07\x1f\xde\x85\x96\xb4\xa9b\xa0\xed^<\x95\xc9U\xcc\xcdV*\xa8;y[\xcdSK\x8br\x9c\xec8\x13\xe2\x17\x9a\xa3|\x0e\xee\xe0rJ\xe0\x80c\xf6%\xd20\x18', b"P\xc3[H\x82\x8c\xe3\xfa\xe7\x83\x80\xfd@\xff\xd1\xd8\xf1\x03\xf5.OE1f\xc2\xf1\xc5\xcd\x9d\x11o\xb9\xd12[\x83f\xf3{\x10\xdc\xb1\x8cB|\xbc\x8aD\xcc\x9a\n\xa8\x8b\xd83'\x1ek_\xbco\x97\xf51", b'2\xb9\xe5Z\x1b"R{\xa2{\x92\x13\x12\x02\x89\x93\xce\xd9\x9ba\xd3\re\x8bzrTk\x163!\x88xn\xea\xd8\xa3?\xc3/\xe1\xe2\x8c\xd1<h\xed\xa0\xc2NP\x92\x1bo\xe08\x16\x1d\x07.\x88\x95 S', b'(\x04^JZf;\xc1\xed\xfe\xb1^\xec\x15\x9b\xa6\xad\xc1\x84T d\x90\xfe\xb1\xc8{u;\x89"\x15\xb12\xf5\x0b\x12\xa5HmP\xd8\xcc\x034\x00\x99\xbc\x06\xe8M\x08\xd0\xad\xff\x80\xf4puD?\xf1\x84\xbb', b'+Z\xb8\xe6\xfe\xe5\x1apg%\xd0\xabK\xbe\x08\xcc\x86\x9a\xd7U\xa2\x9f\xf3\xff\x1d.\x90(\x9e\xab\xdc\x15c\xf4\xd8l\xe1t|&,\x97z%N\xf5\x11r\x80G\x8a\x97\xc3\xb7\x9ai\xb2\xf2\x12\x9ex;\xa6\x06', b'Fl@}i\xa2\xde\xa21\x87:\xf4\xd6\xeb\x98\xde\xec\xcf\x7f}\xa8\x0f\x93"\x8b\x9a\xe6\xe4\xb1\xae\xf4\xa6G\xdej\xd7\xfd\x84^\x13\xb4\xbc\xcc\xbb\x7fM\x99\xd4(U\xddF\x08gc\xdf\xbb\xf7\xceA\x1f\x91)\xf9', b"\xbc\x18#\x15\x8a\xed\x9f\xe1(Q\x1fW3\x14\xb4\xcc\xa0qge'\xfcO+\xb5\x06\xbc\xdc\xc69\x14\x19\x80\xb3n~\x98_\x80\x9a@\xec\x01\t\x93\x16*\xe0\x14aQN\xa6\x93\xd1?\x00\xe8\xa4*48j\x10", b'\x93\xbeA@\xaf\xde\x85\x83;\x8b\xe7\x92\x90pe\x18\xb5\xd1\xe8\xb7\x95-(\xd89\xe0\xca]\x19\xb6\x82\xab#,\xf0\xee{)Z\x9e\xd2\xd0vG{\x8c\x8a\x82\x8e\x0e\xed^\x07\xce\x89_()1V7&\n1', b'\xae\xf2\xd6\x90\xe6\xae\xa5\x02I2\x87\xa5\xfb\x9fQ\x11\xad\xce\xcd\x96\x11\xcewW\xec\xd3\xa0d\x0b\xe8v\x88\x92\t\x93\x04\xaaP\xa1"\x9e\xb3\x88\xfd\xdd\x1e\x85\x8b\xef\xa6\xa3T\x1d\xaat\x89E\x14\x98x\x9a>k!', b'\x89\xea\n\x01\xffW\xeb\xab\x9f[\xb8\x92f\x89\xa8Z5^J\xb9\xc1\xfc\r~d\\\xa1\xe8\xa8y\x0f\xf83\x07\xd0\x04B\xc2\xc4\xff-\x0e\x8auih\x17\xaa\xdd~\xf6\xee\xfa\x06\xa0\xb2\x98\xc0/\x97H\xa5\x8b|', b'r|\x05\'\xc4j\xc0Zp\x9e\xde\xcfk\xc4hZ\xb1\x02O\xb0\xbb\xa1\xc0\x9b\x9c\xb4\xc38\x86\xd3"\x1d\'\xa1\x1a\xf72k\xd0#ZV\xf2\x1c\xeb*n\x8a\xddi\x16\x8eo\xc0$\xbf\xdb\x83\xf1L\xaf13Q', b'\x88\xae\xd8\x08\xe0\xcc\x05\xfe*\xb3\x05\xc2\x0f\xca\xe7\x0eE\x11Q?\xd7}\xac\x14\xc6\xa5\xf9\x99J\x92\xf6k9r\x8c!/\xcd5c\xc3l\xb5n\xc2T9#m\x95S\xcd\xf0*\x1a\xc6]\x02\xa50\xb4\xe8t\xc4', b"\xc5\xfd'\x8c\xaa\xd0N\xe6\xf5EKZIf\xd6\xf3\x8c&\xcd\x7f\xd6\xc0\x01\xc6\x01\xc7|gL\xdb\xc5:\xbdt&;v\xf8\x02#s\x04Pw\xf2r\x8c\x0bU\xceAIH\xf4\xf9Hy)\xd1\xf0H7\xc5\x13", b'\xc0p\xdc\x00.\xea\xd8e\xd7@\x08\xe8\xac#(\xe4\x00\x1b\xaa\xe4\xf0N\x0c\x95\xc6S\xc3& \xa5\x95\xefe:\x82\xa2\xd9t\x87C\x80\xab\x92J\x07v\xd3\x07)\t#\xce\xa9\x15w\xe2 \xeb\xa8\xb2\x08\xb1\x96\x07', b'j~!\x13\xc3VE\xbb\x97cM\xe9\xd0|\xab\x0e\xc6jc\x84\xd4,\xa5\x13O6\xec\xf3\xfc\xf5\xf8\xd9\xf3P=\xa3\xc7.*\x91\xd9\xc8\xdc\x92\xe9]be\x01[\x19\x8a\xdc\x92\xb0)\x9e%~\xaf\x0f\xc1\x85\x86', b'\xfc\xae\x95?1\xfd\xcfD\xab\x0fN\xef\xbb\x03T$#\x90\x80b\x12\t\xf1\xb3\x87\xe1\x8e\xfb\x90\x9b\xa0\xe8\\\xe0\xa2\xfe\xf3&3E\xe7ni\x7f\r\xdb\xf2\x17oS\xb6\xf1\xeb\xa8(\x14C\xe6%\xb99A\x07e', b'I\x7f\xfd\xed\x9a\x84\xda\x93\xb0\xa1\xdeDo\xa3\xad\x1ans-\xc3\x9a\x04\xb8o\x8ao9^\x9d\x02\xfb\xab\x04O\xeb\xa0ek{Esg\xb9G\xd3\xa9\xe3\xf53\x08#\xa89\xd8\x87\x19%Jq.\xde\xac\xe5!', b'\x10"J\xcc\x91\x04\xb6RF\x0b\x81Z`\xe8q\xca\x14\x1f\x00\xf5Se\x87\xa5=\xd7\t\xd9\xeb\xf6\xcb(iS7\xb0\xea\xb6G\x92\xdcJ6\xd5\x9cj\x83\x7f\xef\xf7\xb0t`\x1a\x0e\xe0\x0b\xc0\x8e\xde\x8fv@\xad', b"\xf2\t\xf2xP\x8c\xb6S^\xff4\xe9\xce\x1da\x07\x17\xdb\x94\xd7\x03\xcd\xf7\x1b\x1b\xce'F\xa6\xe3J\x87\xd9D@\x8cRX0\x1bT\xf1i\xd0i\xac[\xdaM\xaa\x95\xd2\x12K|b\x14G\xe0\xc4JP\xf2\xc5", b"\x0c-s\xe5\x05;\xa7d\x97'\xf4\x9d\x07\xe5\xa8\x90Y\x90\xf3\xe7\x81\x1dh\xdb$E}\xa7\xea\x85\xc7\xb3D\x90\x94\xcc\xf2y\xa5#\xeb\xd1\x16\xf8P?\xbbP\xfcR[!Sj\xee\xc2%F+\xcb\xfd\x14\xa1\xff", b'\xeb\x1bE4\xee\xda=\x8f\xd4\xbdFS\xdb\xfc;E\x8d\xea\x94C\x7f;\xf5G\xa9V$\xb93\xdaoEC#\xb0((8\x8e\x86\x84;\xa1&\xbb\x01%x\xac}\xf2{\xd60\x81\xb9\x9b\xf4>I~\xff\x90\x1f', b'\xf1\x8d\x01\x85\xfbq\xe0\x03\x04\x93\x00b\x96J\xf8`\x03\xad\xce\xab\xd9 \x00!\xde\x8b=\xd6\xfa\x1dA\xc5\xb2mb?\x89_\xd0\x07\xc0\x87i\x1d\xfb.#|\xca\x19B\xc8\x8fv\xff\x1a\x8d|\xcb{}P\xbe\x00', b"<\xd2\x1b\x9e\xb0]n<\x85!Tuu\x04ho\x9b\xa1\xec\xce'\xd8\xbc{\xaf\x8f\xfd\x98ES\x0b\xec\xbeF\x83M\x8e\x04\x90\xafQN\xba\x03#\x02\x9b\xaf\xab\x05\xc7c1\xd0\xa6\x93\xd4n\x9fw\xe0,8.", b'\xb8\x84%\xec\xe2\xa8\x02X`vh\x98\xa1(T\xbc<X\x83W\xa0\x14\xf9\xad\xe4\x83\x17\xee\xfa\xb9\xbd#L\x85\xb7WD\x9f!|S\x8e\x94\x1d\x8f{\x1c\xf3\xc3"\x10\xdf[O\xcf\xc2T\xfc\x99\xbe)\xcf\xe6\xe0', b'$\xd1\xd2i<\xfc\xe2?\x91\x05B>\x1e\xc4.\x97\x1d\xcblvJ\x10\xe7\x12\xd3v\xdf \xd2\r\x16\xdf\xae\xaek\xc1\xea0\xa5\x1a\x9e\xd8\r\x1a\xd97\xc0\xc6\x80v1\xe8n\xe9\xfa\x03e\xfcv\x91\xc8\x18\x96\xaa', b'j\n\xfb\xf3\xc9\x1f4\xc7vE\xd5\xbd\xdf\x862\xfb\x1d\x7f!=@\x8c\xf2\xc5\x1f\xd6\xc1\x85&\xf5\x11j\x9f\xde\xc8\xc1\x9evt\x1e\xf2\xfe\x88\xaf\xe3\x8e\x91\x85\x1c\xb6\x9c@;\xa1\xb3\xc5E\x1d\xf5\xa7\xb6\xf6\xd3d', b'\xe0\xa5zQ\xd4S\x1c\xf0RJ\xcd\xfe\xb9\x1d)1#J\x86\xb4\x93|\xa3\xad\xfe\xff\xfc\x1b"$\xf4\x9e\x05\xf3]<\x1d\x1f\xa7\x9f*$\xe1\xc2r_HM\xd2\xce\xf7\xad8B\xdf\x050&h\x89\x9a\xa5\xb1E', b'\xaa\xb3\x92\xff\xacP\xfa\xd5\xb9KZ\x96\x88\xed\x8f\xee5\xb1\xc0y\x94G]\x15z\xd2\xcd+\x041:\x9b[\x12Q(\xce@\x06\x00\x1aU6\xc2q\xaa[kq\xfatKc\x99\xca7gz\xe3n\xf9\xb4\x81\xac', b'4\xe8\xf2\x00\xac,\x7f\x8a\x0e\xc0K\xc4\xa6\x16\xfb\xb5\xdd\xd4T\x84dx\xf2\xb0.\xfa\xcei\xde\x96wAO\xdf\x84p\xc3\xb8\xc3\xb8H\x10\xb2\xda\x82\xa0\x95C\xdcj\xde?\xc1\xcf\xc29lEH\xaa\x82\x93\x90\xe7', b'n\x91\x07?\xe8\x12\xdam\xf4<\xa8\x83\xadw\xe0\xf6\xf4\xda\xbe\xe6(\xea\x0b\x9d\xe1r\x1eV\x94I\x8c}\x94\xd65\x85\xbc\xf5\xe5\x8dO\x03\xb6\xdf\x82%\x80\x08\x9a\x18\xc03\xe2\xa3:\xed\xcdX\x88\x9b4\xaf\x9db', b'\xc8\xb0\xb8W\x08\xd8\x11\xdeC\xae\x19\xcc?\xeb\x07}Z|B\xaf\xb8$=<\x963\x13\xa0\x80\n\x9b8SD\xech\xdf\xda\x18\xcb\xbcU\x82\xd2Y\x8d\xc1G\xed\xcb\x07SZ\x88\xcb\xae5\x80\x80\x81\xc3\xdd\xbbA', b'\x0b\xbbC\xd8\xc9\xe1\xf8/|\xdfz\xf1(\xf9\xca\xbb\xf8\x1b\x1a\x0e1\xf3\x01\xca\x05\r\xdcZ\xaf\xa6`e\xa6\r\xb2\x08\x04\x03S N^\x85\x99\xf5\xd2\x84/+o\x87\xd97\x85\xc3(/^\xa0=\xa3\xfaj}', b'%\x03\xcd\xda\xdc\x89\x12\xc5yO\xbac\xb8\x9c\x06\xbe\x81\n\xa4u\x07\x10\xf8oY\x02\xb7\x7f\xd9i\xdf\xb9\xab\r\xb6.\x16@\xf3}\xd8K\x1c\x88Q\xc8Jn\xbe\x1a\xdac\x1c\xc4\xb5\xa8\\\xb7]\xd4\xc3\x80\xc0%', b'\xfa\xd1\x15\xc4q\x9dE\xb9ek\x8dBU"\xdc\xf3\x19\xb66\xae\x83\x97\x03\x1c\x05(\xcb-0\xa9\xe9u\xa1M\xf2|10\xf6\xd1\x80\x00m\\2\xe3*x\x0b\xef \x80\xd8\xd6\xa2(,G\xef\xeeR=?a', b'XEF\x10J\nz\x95\x1d\x04\xf5\xe4\xb3\xe5a\xe1\xf91m\xb5\xd9\xf1\xecDj?\x9f\n\xaau\xad\xac\xa8\x1d\xf3\xd8\xcc\x87\xc3\xcb\xa8?X\xce\xa7\xa2\xb0)||\xe6H*\xea\xdd\x17)\x99\xad*\x1d\xff\xe0%', b'\'\xf0\x1es\xa1\xe0\xbe[)\'\xf1#C5\xb6\xab"\xac\x97Us\xf4}\x1e\x80L\xf8UT\xf9D\xa5\xcc\xf9\xf3\xfd\xc3\x06\xdd\x03m\xd7\xb7\x0e\xb2\x06\x0c6\xa0/\xce-A|\xe5\xab\x80\x8a\x90.\xf3?\x02"', b'\xaf\x93<\x9eU\xde\x0e\xcaG\x05\x05)6\xac\x90s\x85\xe5\xa2\t\xe6\xfe\xac\x9f\x9c\xa7\x11\xee\x1e\x83-ZQU\x1cL\xd6F\x11\xb8\x03\x1d5\x1f`^V\x94\xf9J\x046\x18LAX\x1bt\xd1\x99\xba\x85\xed}', b"\t\xf6\xcf\xad\x8a\xf3u\x10\x9c\x0eu\x07\xac\xa7'\xd2(\xaf\xac\xe7b\x01\x1e\x9d\x11\x08|\x8b\x17j\x90\x18uV\xfb\xb7\xff{+\x1c\xcb\xdb\xce\xa1\x98\xd7Y\xab\xbc\xc8:\xa6h\x95\xe37*=X\xef\x8c\xe0\xdc;", b'N\xd1V\x87\xb4\x0c?/\x08\x04\x08ST\xed\xf4-\x08\x92A\x19\x14\xb9\xd9a\xcf\x92\xec\xd4\xd1\x8f\x0cB\xb5\xddKqB\x98\xd9\x89\r\xd0B\xda\x88\x06\xf7\xab\x1e\xda_|+9g\\!\xad\x80\xe5d\x8a\xdf\n', b'\xa2\x0f\xf6\x88EZ\xc3q]N\xb6\xab@\x08\x912\'\xb2\x08<\x84;\xd1\xa7\x9a\xd2("\xfdDl9\xc0\xa1\xa1!]\xfb\xf6\x1c\xe0\x04YI\xe4$z\x8f\x87p\x8c\xfd\xec\xc4\x00k\x80\x18w\xf8\x10\xf6\x1b\xb8', b"\xc4\x96$\xd6V\x1a\x9f\x90\xf6\xb2e\xbe\xe3\xbf\x9e\x94.\x7f\xea\xc6lOX^h'!Kx\xa4\x1eu\x08\xe9\x13UZ\x16\xa4\x18\xa1\x10n\xf1\x05\xd4\x95\x8f\x11\xf6\xc7\x979\xdd.\xbc\xc2~\n\xc9=\x06\x9de", b'\xe5\t\x88\x1a\xc5N\xa2\xff\xba^\xcb)\xc3p\x93\xc8\xb5\x86\x87\x18_D\xceh\xf2V^\xa8\xebx\\\x13\xa5\xa3\xa6w\xa5,\xbe\x10K\xa3\xea\xecH!\xe9`7%\xda\xfc\xf9\xe7\xea\xf0\x81\xad-\x91JeE3', b'@\x80\x7f\xcaB\xe3\xb7x\xe8L\xc0\xede++\xae\xfd9>\x12\xa7\xc9\xe5\xd6\x81,9\xf8I\xf2\xa3\x10\xdd1}!3\xb9\xe7\xe6E\xc1p\x88\xf2\x07\xf1G\x8d\xd3\x8d?L\xfe+\xf0\x85\x07\x9b\xb4\x98\xabn>', b'\xfb#\x10\xf1#\xf9\xba\xdbqo\xa7\xf6\xd3\xcbjg\xc3\xb9\x93N\xa8\xd3\xfa\xe49\x99\x0f\xc3\xbb\xcb\xbd1\xe8\xeb\xd2\xf9I\xae\x8a\x8f\xc6\x81\xb0\xea0\xc5\xf4\xb78\x8a8(\x08~\x14\x13\xe6\xcc\x1a\xcb\x93\xe8E\xd3', b'\x9f\xabSU")\xdc\x83\x1ex\x87w-\x11\xff\x89\na\x0eo3i\x1a\x9b\x05\xf9\x07\xa0\x11K\xf4r\xb5\x88,\xe1(\x10\xbb\xf1\xfd%8 t\x0cV\xbb\xe7\xbb6\xbd\x8ay\x01\xa4\x9c\x95\x8cXP\x8d\xfb8', b'\xf5\xd5\xde\xed\xdf<\x00\x14\xb7=\x81\xb9l\x83N\xb8\xf4A\xd5\xe5r\xe1\x1e\xa7\x15Y\x17\\\x8e--\x04fK!\xf5fD\x15\xee\xfc\x19B;2R\xda\xfaE\x85r#\x92\xe9\xf4\x99\xd2\x0c\x97\\\xa6\xc9V3', b"8\xc4\xc6' \x01\x93\xfe\x18\x88\x1c\xf9\x88\x10\xd4D\xf9\xb3\x1e%cV\xc5DJ\xfbn\xcb\n\rr\x94*\xc0#\x9ci\xe9\x0cG{\xf2b \x85\x1e\x0f\xef)\x92\xb3VlC\x1a\t\x1c\xde\xba7\xfc>]|", b'\xee\xf6.\xdc\xe1a/\xc0rPbE\xd8\xd3\x80nN\xce\xd8\x0c\xb9\x95\xd0\xae\x0c\xf0g\x12\xf5\xc5&\xe3Oj#\xd8\x85\xc4LH\x03\x08\xbb\xbbh<S\xa3\xd4\xf9\xec\xe2\x12\xc1\xbfG\xa29X@\xf8\n\x142', b'Ff\xa6p\xef{\x8d\xcf\x83\x0f\xb9\n\x9f.\xe4\xcf\xbdq\xf4j\x86\xd5\xc3a\xec\\XL\x96\xbe\xb5_\x84~c\x89E\x92\xeb\xb7q\xbd\xefX:\x0fV\xb5\x14\x1a\x8d\xb4\xa5\xed\x8d\x06!\x06q\xd4\xb8c\x96\xd9', b"\x1c9m\xbe5\x1b\xc4\xdb\x970\xe3\xa8\xa5\xb0\xfa=_\xf4\x9f\xb4\x80\xb5\x8b\xbb=\xf9\xa5\xe1H\xf9\xcfr/\xe0\x1bn\x11f\xcf}\x8a\x96\xb0\xd6\xb6'\xd0\x8d\xa6\x85\xed\xca\x0c\x8c\xc8\x13\x83O\x87I\xa7R\x85\x9e", b'oz5\xd6\xa9\xf4[\xe7\x13iV\x1d\x99\xcd\x11\x91\x91Ja\x11\xc7\xb5c\xf1\x1f+t\x80\xa3\xd21\xbf\x1b\x8egW`b\x13\x94Q\x1f\n\x89\xe3p\xf1\x1b\x9e\xfe\x10\x12\x00\xd1$\xb1;\xb27\xf6\x1dV\x7f\xb0', b'\xa7.\xba\x04Rj\xff\xebA6\x01\xc7\xc6\xbc&\x1dRn\x00z\x08\xaf\xe4(\xdb\xcb\x89G\xf7\xf3Q\xfc\x86Q\x85y\xfd\xd8\xf1\x97\x8b\x84\xe5\x80#\xce\xf0#-\x80\xf9\xee\xcd\xf0\xfc \xe7!\xa3\x7f6M\xbd\x86', b'\x05\xbav\\I\xf8\x98\xd2N\n+\xc3\xc8\xe8\xf7c\x8el\x133\xf3\xd6\xc8v\xc4\x9ap\x82\xe3\x7f\xcb&m\xbf1b\n\xe0@\xbe\xf1\xedI\x8c\xce>\x15D\xf1\xb0\xdbU\xbc/\xc2\x84C\xd7 <\xb0A\x01\xca', b'C\x17\xec\x92#7\xbb%z\x0f\xa9N\xd7\x995\xaf\xf1e\xb8N\xcb\x85\xb7\xbd\x06)\xfcP\x8c\x08 #>\x8bmL\xa7z(\xf5\\!\x8az\x1f\x04\x1eT\xa9Ng\xf7R2\x92@\x08\xdf\xab\xec\xe4\xa0\x1f\xda'], [[b'\xa7\xa3\x9cM\xb7\xbaJ\x1d\x90!\xb1\r\xfd\xab\xd4\x93H\x1aa\xb3\xa9DRE|\\\x06nJ?P\x0e\xef\x905\xa1\x98\xd5\xba\xd7\xc1R\xa9:\x17\xb8\xf5/\x19\xdfh\xcfl\xc8\x18\xd0\xdf\x1c\x92\xfa\x87\xf1\\H', b'\x95\xd8\x1d_\xabCCr\xb1\xab\xee\xc8\xfb\xee\x84`\xafT\x19\x96\x95\x8c|\x94S\x9d\xf3\x9cq\xa4\xbeJ\x08\x87\xa4\x99\x1bD\xdf\x05j\xe8\xea8\xa7-#\xf82-\x80\xcaR|#\xe1\xca0\x9a\xda\x06\xb4\x05\x8d', b'\x19+w\xfb\tq\xdeh\xca\xc3M\x8a\xf1U#\\\xe5c1\xa3\xaa\x8d_\xc9$\xe4\x19;!\x8d\xef_\xee\tBi\xdf_;\xa7\xc3\xbf\x95\xda\x91\xe5NX\x11Ku\x96\xa4\x04\xeb\x1f\x941\xc8v&\x19\xa9\xb8', b'\x96e\xf6- \x0b\xa4&t|\xf9b\xd4\xea\xb4\x16l\xcf\x9b\x1d\xe2\x01Y\x9d\xb5H\xa06/\xe4 n\xee\x85\x15\xa7\x95\xd9\x03W1\x0c\xa7\xe7$\x0c\xeeG\xdf.\xc4J.c\xf8\xc6\x95\x97\x12\xa0l9\xb2\x7f', b'\x8e5\x13H\x10\x12P\x0bTIF\x12\xd8\x06\xe9\x19\xe7\xf87\xd1.\xaa]"b\xa0\xd9\x89xl3\xe6\xd4\xc1\xaaO\\5\x84\xaf\x02\xdd3~K8R\x11\xb0\x9bc\x16\xe1\rW\x98\x11\t\xc2\xec\xbc\xb1\xc2j', b'\xf2\xbb\xf3\xc6\xcd\x0crW..\x97\xbb\x13\xb6\xef\x8e\x98x\xbb+\xbd\xec\xff\xaef\x8e\xc8U>\x97\xd8Bg\x9b3A\x1c\x9d\xcf\xc6\xc8iE\x92\x8a\x18\x89\xe0\x010\xd3$\x96\xe1HAq\xe5bWw\x9e\x8d/', b'{\xa0\x97\xd6\t< `B\xbc\xdb.\xbd\xc737\xed\xea\x9d\xf1\xba\xca\xf2\x12\x82\xa9\xac\x92z\x16G(\xf3R\x82\xab\x9d\xd6-T[h_\x06\xbb\x16\xad\x87<\xddX\xcd:\x8f\xfc\xba\x13k\x82\x95PJs\x96', b'D\xd8_\xae.\xd8\x83\xd1\x1d\x89v\xfa\x15O*\x06r^\xaa\xdau\x15\xc2\xb9\xa78fKA+\xf8\xdb\x03\x04fSn\xb5\xfa \xa5\x98\\+\x86\x85\x9c\xe1\xf8\x81\x16\x9b\xf7\x11V\xdae\x97O<\xca\xfc\xa1\xae', b"\xb4\xd5\x17Nfs\x01\x9b\xa8\xd5\xdf\x9b\xd8\xd8\xc3Z\x91\xf0\x0fJ\xcd\xa0\x90\x06\x17^\x13\x80\x1dRcP\xfe\xe3>\xfc\xc0\xa1G!\x99\x9ev\xf5\x00\xb8\xfe\xff,fA\nC\xf2'\x88\xff#\x84<\xae\xbdD\x07", b'\x96\x19l\x87\xfc\x00Y\xde:\xba\x81\x1d\x00\xf2\xc5\xaaZ\x8e/\xa5\xd0=\x08\xc6\xa8\xfd\x9e1\xad\xf7\xff\xe2,q\xeb{s\xc3\x17\xaff\xc3v7X^y5\xddM$C\xa3\x96Xp\x19\x1f]?\x94\xee\x0c\x1f', b'\xc6\xd3\x96\x7f\xb1cr\xaeM,J\xcd)\x91\xe5\xd4gQS,%\xac\x92W\x84:\x86\xbe6\xd7E\xa3\xfd\xf9\xb0A]\x9dx\x9c,\xbe\x83u;\xb2\xca%\x80\x86U?\t@2:\xba\xbe\xe2-\x93\xd6\x1eu', b'\xfd\xad\x909U@<`2\x08\xb7\xcd\x9b\xa8\x10)\xdcb\xe8clT8\x92\x80\x01\x86\xf8-\xc4Q`h\xd8\xc7\x91\x1cEs\xb1\xb4\xaaKEG\x844Z\xc9\xc3\x1epN\x84\xd2\xb1\xca){\x99RJ\xdf\xc2', b'\x11&\x81}\x7f\x02\xf1\x90\xfa\xd1\x93JE\x81\xa7\xbd%\xb0\xd8\xf1\xce\xd6\xff\xd4\xdb\xf3\xd2\x83Wr\x0f\xbf\xda\x11\'\xe1/{\xe8\xf4]\xd7%\xaf\xc6\xc4\x97\xa8\x94jEY\x1d\x8c\xd7\x9e,\xdd\xc8\xab\xe2"\xd3l', b'x\x82\xa5\xa1e\'\xf2\xba\x0b\xc8%\r\x9d\xbc\xae\xdd*\xb5\xf5&1\n\xb0\xef\x18\x0b\xb1~\xc5\xe4\xfb\xe0\x83\xf0\xa1\xb6O\x99\xeaT"fI\xb1Vi\xb6\xe4\xed! \xbd\x9ai=\xc4P\xd8\x1a\xe7\xfd\x06x\r', b'\x1a\rvs\xf6\xecq\x95S|7\xa2xl\xff\xf6\xe0\xae=\xf4\x96\x04\x96p\xf4\x97\x1a\xaa\xe8\x0b1\xa7#\xc9T\xa2*\x0fO\xd9\xd0\x9f\x9f\xf4\xff5Ll\xc6l\x12\xa0\xbd\x8bYtA\xd0m\xa6\xfa\xc0\xf3\x94', b"\xab\x91\xf8\xdef6\xca)\x03\xae_\xd4\xbc\x86&\xc2\x0f)V\xf3A\xf6&0o\x0b=Y\x05hV\xfc\xc0\xc6u\x84h\t\xbc\t\x8e\xfa\xcc\x1e\x03\xd2\xc4\xd3GL\xd4\x97|\x8d\x8f\x1eWw\xdfmu'6\x04", b'\x01\xd3\xf2^\x00\xa4\x00\xb1>\xc4\xc6\xe0\x88p\xca_W\xfeet;O[\xc9DZ\xfe2\x17\x93K\xc5Te(\x02\xb9\x94J\x91\xa7\xfaH\xf1\xe3-\xf8n\xc3\x07k\xc6k+\x96\x0f\x99`\x9a\xa2u\x979H', b'\xd4\xc6;\x9e[\x00\xb8;\xad2\xbc\x8cu\xc3\xa4^4 u\xe5\x0b\x80\xce\xab!&\xd3\xb8\xdd~\x1e\xad>\xbd \x9e\x80\xdd\xf4\xaewI\xf7Y\xd8L\xd8\x89\x07\xf8w\xfa\x0e3I\xd4\xc6<k\x0f\xc4\x06zK', b'\xec\x06\x18E/\x81n\xe5~\xda3\xbb\xbdy\xbe\xc9\xba\xd6@rf\x87\tW>\xf3\xd6\xec\x85\xd00\x1a\x05\xf8\xaf\xa3dv.\xc2\xc2\xf5\xe0\x06\xcc\xb9TZ[QFRs\xcc\xaa\r\xfc\xaa:\x98\x8b\xaa\n\xd9', b'\xb9t\xb5\xf7i _\xdf\x12\x8fK\xfc\xce\xffV7w\xd6\xb6\x95\x03\xee\xcb|J9\xf7L\xe9I$\x88\x93\xc8\x14\x8bx\xbf\xa1\x1b\xbc:\xb5\x80\x051\xa7\x97\xe1G\x8c\xcf\x94\xb8\xa3\xcel\xc2\xcf\x9b\xa5\xaf;A', b'\x05~z\xef\x9f\xd0\x85z\x9b?"\xf8W\xc1{\\\x04\xef\xfd\xfbJ|\x0ewId\'\xfe;\xb2-\x83\xe7\xf6\xcb"\x03}\x8b\xf1\xcd\xe9\x06K_\xd5\x89Z\x800\x88\x02\xee\xbd\x8c\x1a\xdc\xc8\xa1E\xf7\x19,?', b'\xe3\xf3Wl(j\xb9YUe*d<8\x0eXOg1\\\x91=\x05\x88\xa7\x84g\xef\xa6e\xc2\xac\xce\x00\x812,\xcb\x82\x82\xd8\xc3\x85\xb4qU<\xaab\x10\xce"\x1c\xa2\x96p\xb7\xc1\x1e/\x02\xbc@\xd4', b'.C\x84\xc98\x067\xbe\xb1>R\xa71n\xd6\xba\x87f\xc1\xaac\xef\xb4\x9a\xf0\xaa\xaf\x7f<j\xbaF\xd0cN\xdd\x1d\xbdH(\xa1G9\x140k\xf8T\xd9\xf1/\xc6\xeb\xcdRs\xc2\x88\xfd\xfc\xdf\x18\xe6\x11', b'WuJ"H):\x17\x92\xad\xf2Z\xc5\x9bY\xb3B7\xd0\x0e\x9f\xdb\x89\t\xfa\xc2s;\xbe\xd0%4L\x98K\x1d)\xfe\x05kQh\x05[>\xf6E\xe8\n\xca\x13\x8fM\xabo_P\xb65T\xb4\'\xc2\x87', b')%\xe6\x9ck\xe1,\xcb\t\xbb7X\xce\x0c\x915\xe8\xa0\x86\xd0\x888\xfd\xb5\'^U/7\xc9\xa8\x05\xcb\xa8\x07t]{|}\xe8NWT\xefg\x92\x0f1\xfbEN\xe9\xbaH\x8d\x8a"\xd88\xe7\x85\x94\xe6', b'\x03\xeb\xfdDh\ro\x16\xad!"\xd9;\x7fY\xe6r\xf7\xaf\xca(\xfc\x11Wu~pz\xf2\x92\xbb\x88\xb4\x83.iF1\xb7{$\x1b\t#\x8a\x90\xb7\xe2\xa4\xb5ga\xa6\x88\xa7\x98\xc32\xd80CDn\xe5', b"\xc4\x1e\x80\x8f\xd4g\xd8\x9eL\xa6\x96{/\xb0\x18\xe4\xd6\x89c\tJ\x81[\xe4\xf1S\x94u\t\xf0\r1\xe8\xfc\xd1N.\x0f\x8e\xbbE\xfaP\xe3\x98\x0f\xc9e_\xb6\xc0\x8c0w\x0f'7\xe9>T\xf3\xf0\x9d\xa3", b'4\xf8\xe2qO\x93\xbe\xd5\x95\xbaB\t)p\x1aGRu\xb4q\xe5z\xb9?H~g\x9c\xe3\x98\xe4\xd3\x95\xdc\x144\x07\xca\x9f7\xc5Ud4#\x9dz-\xe4\x18%t\xbe\xaa>\xba\xcbe \xf8\xdc<\x11\x15', b'\xc8\xce=\xf9q\xc8\x90D\xbf\x00\xd9\xf3\x04\x9baM\xff\xdc\xe2\xce\xf7o\xb5\xec\xce|\x89j\x05S\xe1j\xa3\xf5\xcf/\xcb\xeb\xb5i\xa7\x8c\x99\xf5\xba\x0bS\xe4\xf6\xc0\x95\x05\xee\xe3\xb3\x97\xb92\xfe2\x1c\x99n\xef', b'\xe0\xd8)\xe5\x82\xac\xb7\xf6\xaa)u\xe4\x87r\x10\x91T\x0c\x0c\xb7\xe8\x1cM\x14\x17\xd2{\xc2\xccF\xabK\xbe\xdc\x9b\x13\xc92\xfeick\x16s\xdc\xf0\xfa\xd9\xf8d\xba\xb9\xdc\x85\xff0R\xa9\xb8\xe3#\x1f\xdb\r', b'q{O\x13\x81V\x1a\xfa\xa1\xd1v\xec\x83\xc6QV\xd6\xd1N \xdd\xbb\xb7\xe4cy\xfc\x07L\xbd\x17\x82C\xa7i\xc1\x85\xae\xb6\x85\xdd\xb8m\xa6%\x0b\xbc\xba\xb3y\xca\x8ePT\xbfz\xf4\x8f\x1c\xd1\xec\n\x1e\x81', b'I\xe3,S\xff\xb3f\xdc*NT2OlTa\xe9Px\x0c\x90\xefT\xaa\xb4\xfe\\[De\r\x9cv}e$l\xe6\xb2\xd6LRp)|\x0c\xe6\xa3\xd9-*\x12r\\ \xb7\x88\x06\x82\xb6\x88\x0c4\xba', b"\xe3\xa5Mfy\x9bD\xac\xafe\xf6\xb5ST<\x16\x98]ctp\xe5\xce+\xd4\xdf\xbe\xa1\xd4\xf5'\xb7\xf7\xdf6|\xe5\xcb\x1c\xd3P\xdc\x08[\x00\x0f\x0e\xf5\xdc\x1a\x17f,\x95\xf1\xc0\xa1C\xd2mblo\xf9", b'\x11\x1dx\xf9\x18HQ\x83\xe3d\xdc\xa6\xbe\xcf\xce\xf82\xf6\xef\xba\x93\xf0\xd8\x0b\xd4\xb5\xbe94\x1f\xa0A\x8a\x95\x000\xba<\xd1F+v\xa5\xc17\x98P\xa4u\xa7\xcb{\xf0\xa1h\xd4=\x86W\xdd\xdf\x8a{f', b"RO\xc6\x8fm\xbbp\x99\xc7H\xc1\x97[\xde\xf3\xb2\n=y\xec\r\xf3\xc5u9/F\xbe:\x8f\xbe\x88G\xb2\x83_Ck\x7f<1\x10\xbc:\x08\xce\x8d%kf@'\xc7aw\x86\xf4\xbe\x12\x9d\xb4c\xd1e", b'UyL7\x0bx\x0c\xaf5>\x8dx\x1d\xa35\xd3\x7frK\x95"\xbb\xa9\x02\xca\x92\xf1\xae7\xa3\xfa\xfb\xef\xc6\xae1f\xee\\>\x94ZEr\xe6C\xddk\xf4\xe6W\xb3\xb0N\xbb\xa1\xf6\x8a\xb7Q\xf2zv\xb6', b'\xfd\xccf\x16\x04G\xc3\x15^\xf9\x96\xc1{\x86J&\xbc\'v\\bfC\xde\xafY@\xed\x8c\xfb\x1b\x8a\xfc\xb5\xe72\xa5?r\x17$\xea\x14a\xed\x9c\xc9"q\xbb\xad\x8e\x92\xafUgR!3\xf8#\xc4\x18{', b":\xbc\x88\xb7\x02\x0b\x95\xb2f\xb0U\x96\x15Z`\xb8\x13\xa57\x07@\xa3\x10'\xbfZ]\xfc\x81\x12\x11\x9aNC\x8bo\x90\xe1&6\xc1\x18\xacH\x0e\xdf}\xda\xa9oh\xaa\xaa\x04B3\xcf\xad\x99\x0c\x89\xf4d(", b'1q _\x8ajA5\xc8\xa8\n2\xfaEAZ<\xbfZH\xbcXi\x1c\xa4\xfb!5X?\x99\x89F\x9a\x04\x96\xa2\x9f\x1c\xe0\xc7\x819R.\x9e\xd4\x13\xb8<\x16 \xdf$\x05\xaa\x8e\x9f!\x0b@+g&', b'\x1c\x86\x8d(\xd6\xc9\xa3\xc5!T\x8e\xd74&m\xae\xb6q\x04\xe9\xc64=v<\x07^Z\xc1\xff I\xe2w\xb7Eu\x1b\xa3\xb7\x173\xc4\xe6\xb2BP.s\xda\xceyYo\xf7\xdaE\xba|\x9e\x04\x1a\xdb\xfc', b"\x96\xbb\xda\xf6\x1c\xe6\x86E\x89\x06\x07m\xf8\xea\xb9\xf74\x10y\xe1s\xb3]\xb4\xdb\xdd\xc73g\x8fG'-eA\xa4\x11\x83\xdf\x80\xc4\xe8\xd3H\xf8\x81~yc\x03i\xa5\xea]\xa8\xb3\xd2U\xd3\xc8\xffu\xc9\xc0", b'\x9f\x94&\xc5\xa8\xfb\xad\xa6\xe3\xa6\xaf\xe8\x85\x00W\xfbKr\x8c\xa2\t\xd6C\xfd\xc0\xd7:@Cb{#C\x18\xecjZecEd\x87\x83\x97\xccB[l\\\xfd\xca\xbe\xd4\xf0\x1b\x93\x03\xfb\xf7\xfc<\xec\xc2\x89', b'u\xbdNBD\xc0M8\xd6@\xf2\xba\xd6\x11\x05\x80\xb7id^\xb9\x8d\x98Rin\xca\x13\x8b\x91\xb6\x15\xa9/u)\x9f5\xcfU\x80\xc0W\x98IU\xc5\xe0\xdd\xb3\xc8@\xe6\xaa\xec-\x1d\x85\x86\xd4N$\x02I', b'\xb9\xa7{\xae.qYu2\xdcdS"\xdbR_m\x05+\xe1,\x8cc\xcd\t\x01\r\xa69\xab\x07\x98\x0c\x801\xbf\xf7\x90\x9f\xa4}I\xf8\xd6\xd4#\xfa\x00\x1c\xfb6\xab\xbe\x94\x9fgzb\x81W\xec\xc1:+', b'\xfcj\xf2_\xe5\xfcu@4\xe7q\xaam\xf1\xb0\xcfC1\xf7"\xfav\xeb\xb8(\xc7\\\xe25\x02\x14\xabq\x9at\x0c\xfdI\xb5\xd2{\x07\xece$\xf5\xbb\xbf\xf9\xb6k\x85-\xbf\xce\x11\x01\xed\xc3\x8e[\x10\xda\x18', b'$"+(Q\x16\x14{\xaa\x04L\x9bR\x08\x13\xfa\xc3\x94\xc7\xc6}\xd5"s\n\x8dWA\xb1\xb6\xdf\xf2\x96\xd01\xbe\x8a\r4\xbb\x13\x959I\xcdx\xc6[\x1b\x86-\xcb\xd6iB|\x14\xacyA\xb4\x84\xcf\xf1', b'\xb4G\xd9(\x08Y\x986A\x80\xf1\n\x00b\xadc\xb3o\\\xd0H\xb3\xebu\xaf/\xad\xe9\x16`7\xfa\xc8\x9aj\x86y\xf7\x8c\xe4\xc8+71\xc0\x05\xa4&\xa0\xb6\xe4\xa9|\xdfJ\x91Z\xb6d|\xcc\xe8/\xe4', b'e\xe73$\x90\x94s8\x92\xb8_,\xb7\xb7\x9f5fVK\x07\xe4v\xdc\x89\x88\xb7\x1b\xb8V\x84\xc7 7D\xc8\xb3\xcf\x8dQx\x01)\xb8x\xefr\x83\x0fl\xd9w\xad\x96\x0c\xec\xb0\xc1\xa3?\xf5`\x98\xab0', b'\xd9-Q\x80\x96\x15\x0c;\x94JQ{^\xc5J?6\xf5{e.\x0c\x18\x90\xf6\xb2n/y\x05\xb5\xfaU\r\x7f\xe9\x07\xd3\xe1\xbc\x17\xba\xb6G\xa83;\xb8!V?\x07\x13\x14*\xc0\x1a\xa0\t\xf2F^\xf2\xcb', b'E\xc2t\xe2\x02\x13:y\xa4W#\xc1\xab\xc3\x04N\xf6\\\xd3\xcdN!\x8a\xc8\xb4\x0e\x04\x88\xbco\x1ez\x17;r\xa3\xf8X,\xc1\x85\x98\xa5\x8a~A\x8b\xe7\x1d\xfb\xb6\x01XdXi\x89\xed!\xb0F\x0f\x86\xfc', b'Y\xcfa\x01Z\x18\x91\xe7\xf8\xe26\xca5o\xe8\x0c\xe0\xc1<\x16\xeay>r\x16\xf7\x89)^\xa3AP\xe0r(\xce~\xe5+\x1cZ\xd2\xd7\x8c?7\xf6v\x06\xf9\xc6\x1b\xa5\x15\x18\xb6h\xd9\x99 \xd71\xf2\xd7', b"\xd6\xf1\x82\xde\xe7c\x18\x05\xc9\xb8s\x8d\x91\xd9%\xed\x00\xf8'&\xbc_\x96R\xe6d\x13]\xa2Mi{h \xcb\xb8z\x01\xd6M\xa8t\x82\xe0\xc01S\r\xaf\xff@\xe8jP\x14\x90\xc6nu\x84\x8d\xedi\xa5", b'\xfb\x19\xbc\xf1v.#\x01\xd3\x8ba:\x17\x1d\xf4I\x82\x1c\x92|\xa598F~X\xe7\xa1J\xd8\x9e8\xf4\xb2\xaa\xfc[\xe5\x17\xefJ\x99\x83\xa8<9\xa4\xec\xfd\xfb\xabR\xdb\xd7\xb7Y\xed\xaa$\x06/T\x18c', b'\xd2Q\x0e^ \xff\x04\x9b\x0cy\xe8\x07\xca\x82\xf8P\xda\x8a\xe0\xdd*\x7fd\xcb\xe2/\x9a\x18D\x1cQY\xed\xae(\xddR\x8f\x1d\xd5\xbd\xec\xd0\xfc\xa33-o\x12\x90Q\xe9A\xf6\x8a\xae4\xd9\xe0*\xe0\x98N\xe4', b'\xcdVF{GV%\x0c\xa9]\x83\xa1\x95\x80M\xe4a\x94\xac\xf4\xbbCDU\x9b?\xd5\x88\x1c\x1a\x0f\xfe\xaa\xe7\x82\xeb\xecDP\xceV\xfbo54 \xd1\xffb[\xfb _\x9b\xc6k\xf0m\x92\n\x15\xec\xca\xfc', b'\xa9x@\xd0\xaa\x07\x90\xc1\x1b@G\xd1;E\xd8\x01e6\xe5\\eHQ\xdc\x15\xc83\x1a\xaaK\x95\x9c>\x8b\x9e\xed\x03\xfd\x9e3\x1bx/\x1e\xbe\xado\x86\x8e_\xd6=&;\xf3>\x87\xb7\xeeS\xdd\xcd\xf6\xe8', b':*\x8bB7\xe6\xd1\xf5Jc\xdd\x8e\xa5\xe2\xb3\xc8\x91j[\xd1\xd9_\xf9\x0e\xcf^\xa7\x9b!\x91\xc3\x8d\xbb=Mw5Uh\xb3\xc3\x1f\x9fB(\x01\xe43\xc0\x07C\xe2\xff=\n\x8e\xc6\xd6\x9c\x1c\xef\r\x9fh', b'zi]h\x0c#R$Rn\xa0\x90\tZ\xb7\x83\xc1\xf7\x85(\xcf\x80\xea\x06\xc1nM\x9anm\xd7l\x9d\x94\x06K!O\x82\xfdkO0c\xef?\xa3>\xff_\xe7\x91\xd0\x91t\xe5\xdc\xac\xcdE^<\xf60', b'\xfe\xd4\x1d\x81o\xa7\xd7\x97\xad\x087\xa4\x98\x9b\xf1V7\x88\xa5!\xe1\xc0\xbc\xb9\x95#\x05S^\xc6\xe0\x83h~\x84\x07\xde\x87\x03\xf2.\xdb\x11{\xeb\xe2L\x06\x03\x97>\x1cw\xf2\xcd\xfb,\x864\x9e\x17=\xe3\x06', b'8\xae\x9ek\xaa\x06\xb8k\xc2\x12>#3\xad\xb3L}\x1b}\xc4\xb7\x14\xdd\n\xd7MQ[\x1d|F\xfd\xba>\xb8eDih\xf6|LUk\x9c\xe7\xce\x1f%l`Y\x93l\x98Z\xae\xb0\xab\xd5S\x8a\xca\xbd', b'\x8fY>Mn\xceu\xd8\xd0\xe4\xfe\xba\x1e\xaf<\x841\x81|K\x8ag\xa0\x9c\xdc\xff)x\x13lJ\xd7\x1at\xba\x17R~R\x81\xe2m\xfaI\xa30\x15!fa\xe9\x96zDQ\xdfj\xf1X\xad\x04\x02\xdc\xaa', b'm\xaaa\xf7\xa6Bw\xddXB6Y\x18\xc8\xd8+\xa6<\xa1\xeaZ\xef\x88\x80\xc9\x84\xaeDvL\xf4-t\xc8\xa6\xb5e4\x8c\xf1\x065\x15\xb1\xa3\xf5[\xa9\x89G\x18D.\xd0\xdc\x01A\xeew\xf8\x9c}\xf0\xb9', b'\r4\x94\x90\xfe\x05\xab\x95\x1b\xe6\xd6\x08(w\xafy\x89M-\x9e>\xefq~\xd7\xf3\x88~=\xc6>@\x8e\x89o\x0b\x7f\xe7b.\xd8]$gnV\xe2\xc5l\xe3\xfd\x08\x19\xcc\xd0\xe7\x81\xc8\xdfZQ\x15\x95\x14', b'\x8at\xfe\x1c$\xe1\\\x119n\x99\x89\xa6C1\xc63`T[\xa0;\xf4\xe6kP\xaa\x7f\xf8\xb3^\xe6\x85\xe0&HF\xb5\x81\xaeF\xfc\x9aK.z\xd6\xe5\x03\x9d_>\x86g\xa1v6K\xb3K\x07\x99\x9b\x18'], [b'\xe5\xcd\xe5\x96\x91\x07\xdeU\xdc\x85\x87R\xb9\x92\xf1H\xf4\xc0-G\xbdJ\xd9oC\xdfVd\x10\x00Wd', b'\xf2\xaek3Uk\xa3\xe1\x86\x1f-ZQ\xd0\xb1\x17p)\x91\xb9\xd6\x199\xf3\xfa\x02\xa5\xc6\xc8h\xc0e', b"!\x11\x84\x03\xc1\x97\xb1\xcd\x07\x93\xa4\x1d\xd96\x08\x0bg\x01sI|'@\x15u\xe1\xc65\xc7\x01\x8f*", b'\x0b\x04q\xc1\xf3\x1c\x9f\xd8\x94cI\xccZ\xf4\xb0YKH"|6O\xe8\x05\xd2\x98$\x82K[\x18K', b'\xbd\x19\xfa\x00\x9c\xbcR\xf4\x88\xaf\x96\xe5\r\x913+J\xfet\xb2\xed\xe3\xf8x9\xaft\x1a&\xac9\x19', b'YaY\x14 \xe3\x13\xf4\xa1\xaeh\\\x0c\xff\xe1\xf8I\x8a\x07a3\xa9o\xcbB\xc7\xde\xa9M\xdb\xd7\xa7', b'\x9a\xbc\xbe$vg\xaf\xe6\xd8\xe9\xb8\n>\t\xb8\xa3\n\xd0\xcb\xcb\xd4K\xcb\x1a0\xf4\xcf@%S\xdb\xe2', b'\x0c\xa9R\xcdt\x8f\xedC\xd5\xd0\x9e\x84\\7`Pi\xc6\xc2\xdaS\xa1o`x \xe6\xc3\xc2\x8eV\x1f', b'\xfc\xf2c6\x16i\xf2kM\xb1\x8dH \x1f\xae4\xde\xed\x01^\xa9\x10\xd3\xfe\xfb\xf7\xcdr\x91<\xf4q', b"\x93_5|G'EKHd\x17\xfa\x87.x\xaf\xfd^\xcfc\xd1\xbd\xf4;\x80iA8\xb35\xb2\x7f", b'h\xa6C\x99^\x08\x82\x19\xf7\xea\xdfv*K\x05\x80\x1ahe\xc2\xf3w\xa0d\x93:[\xc1\xdb\xe9l\xa7', b'p-\xcc\n_;\x10Q\xc2\xa4CC<\xebZ\x8f\x05Z\x11I\x83\xbd\x8bG\x0b\x0f\x8d\xed5\xceA\xb1', b'\x02\x05/\xe4\xb9G\xd0\xd3d\xf1\x12;\xb2\xfd\xf0\x8b\x19\xc9\xae/\\\xc8\xc0\xcc+D&\x15\xbbl\xc1\x8c', b'\xce\xfbx\x16\xeehZ\xedz\xec\x98\x9d\xeeeo*\x88%\xaf\x87\xf0R\xda,\xf70\xe2\x0b\xef\x7fe`', b'2\x89S\xfdB+"\xff\x17\x02\x88O\xa6\xb2\x85\xb2\xf7\xe8\x80\x08\xbb\xd9\xf7\xf7Y\xde\xca\xbat<\x00\xa8', b'\x0ft\xc8\x0c\x7fxG\xc5C\xf9\x8dC\x14\xef_\xa8\x08\x1c\xf8\xda\xb9\xf6\xe7#\r\x98I\xdat\x08\x1d\xcc', b'\x8194\x1e\xe0&=\xce\x97*\xce<\xffiz\xfa8\x87\xf2+\xdco!\x0b;\x8dt"?N#M', b'|\x88/"\x11W~\xb4\xcf\xd57\xa4\xba\xd7P\xbc\x8b\x1f\xf2\xf9\x9evl6\xe0X\x1c\x93W\x86A\xe0', b"\xbb\xb6}\xbb\x84\x0c\x1cQ8\xc8\xbc\x8a\xfe\x93\x08\xd9b&I\xe2\xba\x90\xe5\xd61\xa4\xbb '\xd2\x8a\xd8", b'\xb9\x05F\x98\xee\n\x0bq\xf7\x124\x0f7\x88@\xb9\x01\xe2\xab\xee!-3z\nU\x99\xe7\xcd\x1dx\x88', b'\xb4\xa1\xe3\xd5\xdb\xfe\xcd\x0bct|\xf3\x8aB9\x1aGytb7Vt\xb7\x1e\xc5\xfa+\x98\xac\xe5\xbe', b'\n\x80\x00\xa6\xc8z\x83>\x8a\x16\x80`\xadx\xdcR\xd3\xbb\x065\x8e\xf2\xa0\xc7\x99\x15\x07K>\xb4\nw', b'\x13\xb6\xdd\xba/i\xe0\xd3&py\x8f\xbeN\xf3\xe1P\xeb?\xb2d\xbd\xf2\n\x87\x17\xd4\xef\x18#n\xe4', b'&\x9bM\xfb\x9f[\x12ZQ\xf3\xa5&d\xb5\xeb\x95\xd75\xa4\xc0+F\xa5\xe1\xe1j\xfe<\xcc\xed\x8e;', b"'0\xff\xbb\xf2I\xc9g\xa9\x06\r\x89O\xa2*\xd4\x8b\tD\x96\x07E\x1e!\xd6%\xa7Z\xbd\x9e(\xcd", b'\xa81Bm\x9c\x8a\xb8\x06\xfcC@\xee\xccB\xbe\xaaK\x1d\xfb\\.0PLX\x11+\xcd;\xd1\xbc\xae', b'\x0eb\x02\x02\x07\x01QhL)zn\xf2R\x1c\x95]Y(\xe1\x90@\x80\xcf\xca\x84\x90,{\xef\xd2\x9c', b'u\x80\x9e\xbb\xaa\xfa\x8f\xff"\x02U\xb98\x13R\xe6\x06H\xe7\xb9\n\xef\\\xac\xb2\xa1\xd7\xde;\x05\xb6\x9b', b'\xb99\xd1kM\xfc\x9c\xfb\\\xe65q\xd6\xd7\x82\xba\xef\xc2i\xc8\x17T\x9a\xad\xffk\x89\xe4\xcdI\x91k', b'\x82\xf5\xda\xe3\x97\xba\xb6]\x0b\x1e\x97k9 <sJ\x8f\xefG\xf2\xc1N\x19\xcc\xc4\x94\xba#\r)L', b'\x9c"\x96\x89\x08\xd3\xb9\xb9\xef\xba-\xc5eWk\x13\xdc\xa4M\xe0\xb3O\x88\x7fU\xbe~\xbbj\x94\xcf\x92', b'ojJ\x8eD\xd8\xec\xd0\xe5\x18\xcc\xaa\x03\x97< F\xbd\xff\xbd\x90N\xa9\x0cV\xfc\xbe\x90(G\xb4,', b"\x8b'\x93'\x18\xf0\rad\x82y?dJ\xcf\xe8\xed-\xd9\xd2\re\xfb\x97\xdf:\xf4;\x01E\x9b\xd4", b'\x18\xeb\xd9X\xc2\xa2\xef\x81\xb1\x94\x03\xa3\xb3\t3)k\xb7\xa8%)\xc9\x18u\xf5\x101\x13zk\x02\xb0', b'\xff\xe4\xf2zK\xb6\xe7\xa2\xad\x1a\xac\xe5a\x7f \x04\x8c\xfe\x86Y\x13\t_\xce\x05xh=|\xca\xbep', b' Y \xd5\x03\xc1\x04\x15\xd865\x9d\x1e|QP\xa2}\xc9\xd2\xbdwZL%\x93N\x05(W\xb9\x13', b'G\xb1:\x82O\xd2\xc9\xf8\x97\x08cl\xbc\r^8\xc2\xf9\x9e\x0e\xe8k"\xee;~\xe44Kz\x11\x90', b'\xe1\xb6\xff\xaa\xcen\xb6  \xa2\x18\xf6%\x1f\x86K\x9a4?\xdf\xde`%\x02Of5(O\xe5J$', b"\\<\xeb\xb8T\x99\x8chQ\x97\xb4\xb9E'\xe5@T\xd9\x12\x01\xa3\xec\x86*\x8dE6\xdd\xeb[j\xe0", b'\xdd\xe9uP\xcb\xba^\xfa\xc8\x9c\xa0#ezh\xce#\xde\x7f\x10\xd4\xb6\xcb\xe7y\x9f~\x86*\xd3H{', b'.-\x16<<5\xaa?\t\xae\xa4`*\xb3\xeeF\xa5\x7f\xcfIGz7\x1e\x00\xd0\x84u\xadq\x01\x11', b'w\x8bs\x1a[\xbb\x07&f+:\x00\x04\xe4t\xf3+\xc2i@\xf7\x86\x19\xdb\xb0q\x15\xa6"\xff`\xeb', b'\xa9\xfc{\x05QX?\xee\xf80@r\xd8b\xd6\x05g*\xd1\x81\x14\xc4e\xb8\xd9\xebT\x07\xc7&\x98\xb6', b'q\xc5\xe0Shz\\\xd9Z\xeb\n>\xa2\xd5\xb1\x90X\x0bK#\x07\xb2\x0c\xc6n\x04\xce+\x1e\xd7I\x90', b'\xfeU4\x0e\x98\x07\xaan7\x1a\x80\xc5\xac;\x98H\xc1\xa5\xd0\xb4\x8fD\x91S+\xae4\xfe\x03]F\xe6', b'\x0e\x02\xe0\xc1 >\x7f\xd19\x88g\x82\xa9\xa6J^\xe3\xe4\xe0]\xa9\x0f\x12nO<]Xe\x9e\xe0\xd5', b'\x96\xb8g\x9a\x05\x08\x12\xe8\xa4\x921\xda*S5\xd0!D\x88sj\x11\x18\x82\xb2\x13\xc6T\xed\x89D\xc4', b'_\xee\xa9\x9eW\x1c\x89\x8a\xa8vJ\xeb,t\x14\x11\xdf\x07\x01{\xf8\xc2\xec-%<(B\xb8\xa8\\\xc4', b'\x17Z\xf6\xf5Y.\xa6q\t\xe5\x06\xfdp\xbd\xfa4?Y\x0eo}\xad`#V\xb36y\x0f\xde\xbf\xe4', b'\xf2\xdf;{4\x80\xac\xb5\xe5?BS\xc5\xef&\\\x8c\xb4S"\x17\x18\xe1X\xf1V\x97\xfb\x1c\t\x91\t', b"\x1d\x80\xf1\x95\x15X\xb6\xef\xb2\x1b\xf2}\x04\xdb\x7f\xe1\x1f-6V\xad\x1b\xd5j\xb7'\x8de\xf0)@\xf0", b'\x01JfI=-\xf8\xeb&\x9e\x11\xb52\xda\x1bM\xd2\xac\x8el\xa2\xce\x93\x9e\xaf\xf9\x80&\xc1\x9b/q', b')_\x0b\xa0\xf9\x91!\xce\xb2\x95\xcf\x0f\xdb\xc5\xbc\xa71\x82/\x86\x0b\xb5\xe1]&H\x04\xa1\x04Q\xe7\x82', b'\r\xa6\x19\xb4\xc4\xd5\x9c\xbd\x8b\xa1\xad\x11\xfcJ\x8d\xbd\xc9\xfa\xf6w\x01n\x1b\x1aG\xdb\xf9J\xe2\xa7\xd6\xf4', b'\xa2n\xd9\x93\\\xdb\xc0\x88D\x17\xeaA\x85+&\x95q\xf8\x9f\xba\x84\xa5[\xbe\xb7UU\xe8\xedM\xa7(', b'\xd1\xf0b\xa0\xa1Z\xd5\xce>tx\x84\\+&\xcb\x83\xc4w|\xcd1u\xbb\xf2\xedv\xf0\xd3\xbd\xaf3', b'\tGk_Qf\xc4\x12\x8c\xdd\xe6\x8e\xa1\x1d\xfcR\xabX\xc9\xa4ap\xc8\xe1@\xe2Y\xa5\xf1\xdc\xf7\xc5', b'\xb1\xdaAx\xbc\x05\x0e\x0b\x19m\x94\x11?|\xaf)\xf8\x94C\xb7[\x1a\x99ZM\xde\xa0`\xdb\x08\t\xd4', b"\x97\xecL\xcbd\x86\x8c\x99\xe8\xa5\x8c\x12\x96R\x9a\xed$\xd7\x1di'B\xa4\x93Ty\xca\xd0eC[=", b'\xe1\x06\x97:\x0f<\xf4\x1c\xca\xe0\xdf&J@\xb2\xd9\xfc\xda~\x88\xbaq\xe4\xd7\xc5\x92cK\xcb\xa7\xef\x9a', b'c\x9b\xf7\xef$E\x89\xb0\x0e\x13\xc4[ \x91\xaa\xc6h\x93\x8aM*Q\xa1\xc3\xe5\x9b\xf1|U\x18\xfd,', b'\xe6\xda\x7f\xd5.;$_\xff\xc3\xad`\xbeH\x12Voq\x1b\x8b\x96\xdbJ,\x93\xe7\x99\xc2\xfa\x8c\xf5\x18', b'q\x08\x1f\xc2\xcb\x06q_[\xb9\x92`u9g\xff\x8d\x1f\x9fA\x1a(zRQ\xc8rE\xbd\x9cl\xdb', b'\xb6\x1c\r\x9d\xb7\xd6\xceH \xbe\x9eBo\xf2\x06\xff+\xc0\x18,Q`E\x1b$!\xee\xc7\xb0e\x8d\xdf'], b'\x13\xfce\xe5\xf5\x0c\x10!EW\x92\x00Hs\xe9\x17\xc05\x15*\xf1_\xcd \x07-\xea\xbe\xd8\x87\xc0\xc3']], [[b'R\xbe\x1a\xcf\x85\xe0\xd8\x1c\xe7\xccAx;\x82\xb6\xb77|\xd8\x94\x0b\xe9\xf3\xca\xad>\x83\xc4?!\xfb\xcc\xbe_v>\xd6\xf9\x0f\x12c\xbb\\\x14\xa0\x98>\x84\xfc\x96\x82\x8bJ\x9c\xc1\xe3,\xde-o\x13X\xde\x99', b'\xf6\xbcl\xc6\xb0\xb0\xd0\xbb$\xd9dI\x01\x8b\xae\x7f\x05\xc40\x9f\xa1/\xe1\x08\xc5P5\xfb\x04\xc0*\xe8D-zC\x82\nw\xc4\x9d\x14\xaf\xb1S\xfb\xce\x0fD\x08\xc4\x99p\x8e\x94\xfa\xa8h\x9e\xb1\xc0\xb1\xc9\x13', b"\xea'-\x1aU\x80<|\xed:\xc9\x90{\xe8\xe13Ox\x1aC\x17\x0b\xdb\x14\xfbR3\xa6\xe9\\\xeaw\xb3J\xfc\xc4\x1d\xcdV]\xc0\xa9\x8f\x93\t\xb4\x88\xf2\x9a\x9fz[8Kw\xbffc\xa5\xde=y\x88\xde", b'\x99\x05\xe3N\xb0\xbc\xd8s\xdct^N\xed\xf0\xf4zz\xd8\x8fJ\x1b\xaa8\xa8\x1d?\xb9 \xe8\x7f\x1d{)\xa3\x06\x8cZ\xd0w\xbe+l\xca\x0fS\x07\xbb\xf2Z\x83\x9f\xdc}\x1c8O\xa5L?_(\xf9\x18_', b'\xcfy_\x14\x8b&\xe0%#/M\xe2\xa7\xa5\xa7Z&\x8f\x17\xf7\x8b1\x9fCB\xef\xd0\xc4-\xb9WH\x04\x95\xa8\th\xfd\xfd:^\x976|\xe0i:U%\xe0/\xf2\x1d\x1e\xca.\x94x\xc4\xaa\xc6\x95N\xdc', b'\x13+DZ\x10~w\xee\x99-\x0c9\xa4\xf5\x9f\xc7\xa8\xed\x8b\x9a\xdc\x0bQz\xd5\x15\x86\x00A\xb4\x91\x92\xc1\x1509,\x80\xa9>\xe7v\xc0L\x8an\xb9H[\x10@\xe0\x93-c\x88\x14\xab1#t\xf2O\x07', b'k\xfeK\xf5\xb0y\x85\xa2\xcdh(\xe3z\x90\xffl\xb8VV\x02\xfb\xb7k\xa5\t\xe6\xed\xa0{\x181\xc6\x93e\t\xb0;Uv\xb7#V\xb1\xb3\x00\xf9]\xa9M\xe68\x9b\x1d\xfe\x94\xe6!\x86_Xs\xf6\x1d\xcd', b"\xeb@\xc4\x9b\xce\xa39\xfe\xc3\xa4\xa0\x9c\xcc\x9c_<M_G\x99B`\xc5.\xafTu\xd9O\x89pV*\x81\xf8C\xc3N'!\xb5<f\xc1\xd5\xb9\xee\x0f\xb6\xb7\xcd\xb2\xca\xf8\xf5C\xe6\x84\xbdE\x98\x99p\xfb", b'\xd1bC(\x91\xefR\x90\xd7\xba\x0c\x90\x01\xf5<p\xb4_a^\xf7\xbc\xa3>\xf2\xb6\xb6\xb8\xae\xe9>r\r\xaa\x84\x8e\n@\xf3\xfc\'}\xd8\xadL\xe5"T\xa0>\r9M,\xf5I\x8b\xbe\x7fS\xe0\xcc\r\xa8', b':u.\xc7{\rl\xec\xdb\x8b\x92T\xc9\xe8\x8d\xbe\xafO\xa0\xc0\xba\xcc\xcf\xfc\x04\x8a\x04\x81$!\x7f.\xf2\xee\\\x9d\xf8\xacl\xcf\x8a\xd1\xe8\xa4S-17+r\xdd~\x99\xf5\x02W\xe3\xdc\xaaiF;i(', b'\xaa\xdd\x9d?.\xa9KZh\xf8\xf32\xd8\xc1J\xec\xa2\x11\xf4K\x9e\xf0\x9b\xf9\xcb\xf4\xd0\xfa\xe3\xe1\x06\x9b0#\x8d?%\xc6\x10Td:m\x1e`H.k\xe8\xbe2\x9e\xfe\xc2>svXt\x10\x88d\x9f\n', b"\xa3K\xd0\xdf\x81\xb4'\x9dE\x93\x9cx\x92\xc66\xef}\xda\xfe7\x86\x12qt`\x1e\xe5\xd5\xf6|)6\xdd\x9a\x8a5V\xcf\x0e2t\xe0\x88\x92\x1f\x1b\x96\r\xechS\x9bL\xe4\x91N\x11+\xa9\xb9\x07i\x9f\x1d", b'\xd3\xadOVz\xd8b\xde\x19\x1b\xd4@\xe2\x1fgU\xa6\xc2\xcare1\xca\x94\x05\x19\x90;\x1b\x85\x18S2\x10^\xed\x84\x8c\x91\xc4s-\x14\xe0\x1fE\xab\xa0\xad\xcd\x9f\xd6c\xd6\x8f\xc4\x11f\xbb\xe8[oyx', b'\xf6<|\x8fL3\xfc\xca\x8f\xf6o\xbf\xe3\x9d\x1e\x13i\xb8\xd96q\xecji\x02,\xd8\x12@\xeb\xee\xd6\x0bf\xaf\xba\xef\xcf\xb8\x7f\xe1\x9a,\xaa\x14\xe1\xb9E\nO\xdcX\xed\x98\xb4K\xab2\xe1b\xb6\x9a W', b'\x98\xe3si\x97\x8c\xc0\x06\xf5\x80\xef\xc7\xce0\x08(\xfaf4\x0e2\xfe\x8c\xdcB\x85V\x00\xd6P\xdd\xf3\xddU\x95\xcd\x94\xd5\t\x92\xcdc\x1a3\xbe\xc4\x80|+w\xd8\x06\xc9\xb6\x07\xe7 f\xe0\xe2\xba\xb4\x97\xbd', b'\xb0C\x9b\x8b\xfd!\x14\xc2\x11>\x83kQ5\xee\x9aE\xe0\xf3f\x9dE%\x18G\xd3\x1cF:\x82\x94 \xf7\xd9\xb5\xdc\xf9\xb8\xab\x16g\xd9\xadc\x95U\x8f\r\xcd\x99f\xbf\xaa8\xbcf=\x86A\x90\x1b^\xd0G', b'dO\xa2Zk\xb3\xe9\xfbF\xff\xd7\x02\xae\x16\xcd\xe2b\x0b[i\xcd(\xf3\xadQ\xa5\xba\x98/P\x83y\xfa\x904\xc7\xc2v^\xa4\xb8V\x91\xa8\x99\xd1\xc1YI\x19\xd2\x100(f\x9c\x10<^d\x80dg\x93', b'\x8a8\x03\x19\'\\^s\xd5(\xa0Su\xc0\xa3R\x9a\x967K\x7f\r\xba5\xcb<R\xc6\x07\r\x8a\x8c\x84u\xf2@\xf9O\xfc\xdd\x9a"\xd78\xe9(\x89\xcd8\x06\xb7pN\xa9z\x13\xbd\xf1\xf5\xa4CF\xad$', b'\x99`P&m q\xf9#\xe5\xb0\x86\x9c\xce\xe9\xa3.m\x99q\xd8\xbe\xbeO%\xed\x023\xe2\x876<o\x86\xe5k\x85\x068\x1c\xdf\xf0h\x8e-\xa9\x07\x89jWR}j~f\xdc\xf7u\xafa\xae\xa0\xae\xe2', b"\xbe\x83\xa0m^u\xfb\xee\xab\x03\xaaH\xcfO\x1a\xb1\xbf\xf1\xc5\\fk\x93\xd1\xba\x8cr\x98\t\xb81u\x086\x1d\x12w\xdf!L\xb6b\xb21\x18\x9d\r\x7f:\xf8\xa21u4\xa2\x88~M\xeb\xa5\\'\xce\x82", b'L\xb9\xe8K\xe3\x03K\x8f\xd0\x92tg\xa0\x97\x0b&Y=\xc1\xe2/}\xafGS\xbby\xcb\xbaW\x15\x06R\x9c\x12\xb4O\x0c\xa8\xa6,\xb5\xea:\x92\xba@\x9681\x9e:R\x01\xcd\xe1\xa90\xabh\xfe\x86\x01\xbe', b'\x02\xfb\xbd\x1d\xfe2\x04\x0ej\x9b|\xf1\x1f\xec\xeb\xcb\xbc)\xffp\rpY@\x83X\x98\xd6C\x885\xe7\xb8\xc4\xc0\x07\xab\xf1i[\x07\xd4g\xe1{8W\x18\xbex\xee\x9c\xf4=\xe7\xa6\x87\xa7\xe8I\x8f\xb2\xd8\x84', b'\xf8\xa2\x85fo\xed\xe5\xa5\xe6\xca\x88\x9c\xb5\xe2\xe8+\xc5\xb9\x88\xaf\x9bt\r-\x16Q\xe8NF\x96\xd0\x12g\xe2\xe2\x91/\xeb\xece(%\r\xb2^\xbc0\xf4\xed\xb7L\xf9E\xf5\x1301\xce\xd4\x1c\r\xe9\xab\xca', b'\xcb X\xf8\x05\x80\x9aQ\xe2O\xdf\xa3\xa9a~y\xeb\xf1+\xa6\x1d\x84\xceYOU\xee\x05(H\x9f\xfd\xa0\x16\x89\x9ckx\xd3J\xb7\x14\xb5_\xb8\xc8\xae\xc7G//5\xce\xdf\xfc!\xe9\xd5\xb2\xf4\x8b1E\xd9', b'\xc0\x8e\xd3\xa4\xcb\x87b9\xbd\x10Z\xc7r\xac\x1f\xb4t\xddH\xa1\x8dQ3\x86\xa4\xa7\xc8\xbe\x151\xc5\x0b\x83\xc9\xc4\xfd \x83\xaf\x047\x03\x00)\x06\xd2r\x8e\xc5\xb6\xe0\xce^"\xf1\xd8\x82\xbb\xfe.\xf89m\xdc', b'3\xd9@\xc3|\x83\xb8,\x11\xe80\n2\x98\x02uv,\xc3\x93\\\xf1Y\xa9f\x81\x1d\xa7\x16\xe1\x1b\x1fC\xa6\x840\xeb\xc6\xed4\xb2A\xbdpA\xd2s\xdd\x12\x8d6&\x8b\xab\xc6n\xed\x81\x1c\\;\x95\xfa\xd8', b'\xfc\xc5\xa0w\xa1\x97B,\x1f\x8b\x8e\xdf\xd2\x03\xa5\x18\xfa\x93\xec\xc0\xec\x17\x8acRDA/\x8d\xf3lo\xadp~z\x01\x8e\x87h\xc1\x18\x88i\rX\xeb7\x9b\x8eh\xf9\x10\xe2P\xf7\xb7\xa1\xfd\x8a\xad\xfcA\xb5', b'(\xe2la\x1b\xb0\xebb,ZL >\xdc\xc6\x0b\xb5U\x07\xa2\x04p\xfd\xcd\xad\xbd\xb0\x84\xc8+]0D\xaf\xfb&\xe4J\x0fV\xb8\x96\xa1\xa0\x0cEL{\x83\xe8\x9c\xf3W\xee(\x08XI\x9d\xfbP\xbe\xc3\x7f', b'\x0c\xc2\x99\xb5*\x1e1\xfe\xe2\xfc\x0ec\x83\xc2\x8f\x907\x0b\xa8\x99\xb3\x0b6S4bA\xcf\xdf"VW\xf7l\x9f&\x15\xd5\x0c\x83\xb2\xd98\xb1\xe7\xa1B\xb3\xc1\x85\xaepM\xc0\xc7\xe0u\xe6\xcdC\xc3(wd', b'\xa8\xdc;W\xd3WH;\x9f\xe4h(h\xdcOx\xbf\xb4\x9f\x92\xe6\xc3&\xbb\x7f\xe3\x13_\xfd-\x1a\xb3\x91l\xb15d\xd2\xa2\x14q\x83p\x86C\xc2\xf3\xd1\xabW\xd1hy\xd2\x94\x9f\xa0_\xdbcn\x0eqE', b'9\x82\x96\xf6c\xcex\xa7\x96Q\x07)\x88\xd4,\xffg\xce\xfb\x14|Y\x18\xde\x1e\xd2\xfd\xf1\xe7\x83\x92\x94\xee\xe8\xc0\x90\xce\x91g\xd0\xd2\xd6\xc4=\xd3\xc0\xd0a\x82\x04 E\xf9\xe3\xcf2\x95\x07\xb4\xc7=R\xf1\xb6', b'\x08\xa2\xa4\xe0\xeeD\x0b\xba\x03-\xc2E\xc1\xc1SG\xbd\x06\x0b\x8f\x86\x18\xdf\xf6\x9d\xbaMQ\x8d\xfe\x13\xafl\x9c\xe7\xfbE\xb5Ks\x8bw\x18Ct\x9c9\xe0W\xcd7\xf9KFa2\x99:\x0c\x8e*\x92\xf3\x1d', b'Q\x02\x92\xaf\xe3\x03\xd9\xd6\x1d9\x88q\xb6,\x94\xf5C\xb2\x844%\xd5]\xcc\x8f\r\x1b\x08\\Q*\xa2C\xde\xa2\xf0O\xf5N\x8c\xfb+\xf3#\xb2V\x0f\x91 Q\x82\xaf<\x89y_\xc1\xd4\x0f\xb41\xfa\xb1\xb7', b"\x9b\xf9JZiZ7G\t\xfd(:\xec\xa1\xae\xfd;\x92\xa4\xe1\xf8\x19\x17\xf9\xdc\x95\x8b5[\xf8Rm\xc9\xe1\xe6\xfb\xc2\x94\x1e\xb3'\xb4\xeeV\x9c\ni\xefnS\x84(\xc3\xe7\xea\xdb\nF.lqn\xb1\xe7", b"\xff\x18}\xc0\x98\xcc\xb93\x03\x14\xdf\xb0\xdbW*\xf0\xf4P\xa0\x04<\xbd \x1b\xd9\x9fS\xbb\x85*k\x96K\xcc\xe3\xc7\xfeU\x85\xf1\n\xcc\x1er`\xcdh'\x0f\xc0{\x81\xc4;\x06\x8b\x11\xda\xc2\xfd\xb0\xc1\x10\x84", b'\xc3t\xe8WR\x11n\x9a\x8b\\\xf3+\xcc\x1e\x90\xcf\xeaQm\xf8\xab\xf2.\x98\xd5\xb9\xa9Rv8\xe7\x1e\xa8\x9c\xc2\x142Zm\xe1\x9a\xabR\xbb\x93\xb7\t\xe2\xe0a@g\x9c\x1e\x0e\xb9T?\x1b\xf4\x89\xe74E', b"\xb3)5Gh\xee\x1del\xb0'\x1c<\x16$(\xe3&\x81\x88\x0f\x13\xd1\xb34[\xad\xc2Q\xca\xc3\x1cN\xccw\x8c\x00\\!I\x7f\xdf\xa2A%\x15b\x18'\x99f\xb5\x9a2\xfd*s\x05\xc9\xaf1F\x9d\xff", b'\xe8K8L\x83\xeb\x82\xf3\xca{\xfb\xaeO\xb2\x93at\x98\x17f\xe3\xbb<7\x8e\xb5\xae\xb8X\x8c0\x17\xc5\xe3\xb3\x9d\xc136\xa9\xab\\\xee$w\x7f\xf3\xe9I\xc9\x1f\xcda\x0c\xd5\x91\xd1\x08\x08\x8f\xa3z\xf9\xba', b'\xae\xc9J\x02\x05G\x93\x1b\nx\x84\xb8/\xb2r-\x9a\x02\xca(<\x91\xc7\x93\x9e\x88\xdf\xdf<M+d$~\xd9\xfc\xc4\xc4C\xcc\x8bZ\xd7{\xd5k\x0c4s\x06\xbd\x8e\xda\xdb\x1b\xc4\x0e\x03s\xed\x7fJ\xbe\x93', b'\x1f\x00\x15\x0e\x123]\xe1\xd8\xb7G\xb7\x0b\xef\x19\xe90 \xe0\xf3\x9du\x97\xba\x13\xf1 \xda\xb4\xd9\xa0\x18\xfa\xed\xa9\xab\x88-\xb8\xeb\x86\x0e@\xe5\x91\x13\x9f-\x86\xaf\x19m\x9b\xe5\x08W\xa6G\x8b6\x0c\xc8g\xc2', b"\xb4\x8b\xeb\x18\x0e\xdeH\xc3\x15\xb4\xb7\xc4\xcaP\x9f!\xb8`\xc1\x82\x98=T\xc1\x9fO&\x14\xc7\x16\x99_Mh\xfa\xff'\xe2\x87\x8b\x9f:-a\x17\xafu\xc3f\xb7\x9a,o8\xba-\r\xbcR\xc4\xb3\xe4\xde\xcc", b"\xce\x90\xf1\xb3 \xdc\xaddjl<\xa1V\xe2D5\xfaS\x9a^x\x99%f\xf7\xa0\xfe\xfa\xdaf18 g\x97\xc4}\xca\xfarC\xc9B\x11V)++\xa4_3k`\x02\x8c\xe0\xe5\x08q\xa3\x9a>'\xcd", b'/\xbeP\x0f\xe0\x19\xd5]N\x87;\x1e\x19\xbdP\xc8\x1a\x9e=\xd3[{\x9b\xd8r\xc07K\x8a--N\xbdD-\xd6\xc5\x8d\x8d\x01\xf6\x9egH\x7f\xa7\x15\xfa\x99/\xae\x0b\x91\x926\xf8\x90\x1b\xa3\x95\x84_\x1dP', b'I\xc2\x0ct\xacu8\xf9\xdbZ\xe63F\r\t\x8b\x0e>\x16\xd0\x86\x07\x0e(k\xda Z\x12\x15\xbf\xf9b =_A\xa2\xad}\xc7\x1bVJ\xab"\xbe\xf1\xab\xa6\xb1\x03%A\xbes\xce^c\xc2\xe8\x1b\xcd(', b'\x08\x1e\t\xa1ZBo\xb4C\xad\x9f\xf0%\xbe\xd6oQNIHq\x01\x08\x18c\x0fW\xd3\xa5\x88\x14\x99\x13;K\xec\xf4\x1fI\xab\xbc\x17\xbe\xc3\x90@^_\xad\xd3\xd2\x9b\x0e\r\x18\x00\xf0\xe48i\x85\xd6\x88\x07', b'\xa6\xb8\xf8me\xe6\xf6\xab\xa0\xbe~C\xde\xbbI^sy}/\x95\xb9U\x1b(\xf3\x07\x87\xde\xca\xf1S\xb7\t;@a\x0b\x0f\xe7\x04W\x10\xa9\xf8\x1ejxv\xc4\x04 \xb6L\xcaT\x9cN\xfbaR\xe8\x82C', b'\x1b\xae\xe1\xd3e\xf4\xb6\tZ7\x148m\x8b\xb9\xb96X]\xf0k\xd6L[\x82\x84\x95\xea\x83(\xcd\xe9\xfcc\x92\xa1\xf9\xbb\xf9\xadG\xaa\xae=\xe9\xd8s\x88Z\x8e\x17\xb4\xfe\x9e\xdc\xc9\x16]\xcf\x7fm\xea\xb9\xe4', b'|5\x0c\xf4\xf2\\H2\xfd\xda\x07\x1c\xab\xc6\x14~\x91LM\xbd\x1b\xef\x05;M%O\xbe\xb9p\x1b2\xedZ&5^L\xd7k\xdb\xf6Q\x95q@\xd5(\x8e6\xd0\xde\x1a\xdc\xaa\x0c+\x13qw\xc6\xb0*.', b"\x9a\xdbs{X\x15\xb8>\xfc\xfbA\x15\x99\xedc\xad\x19\x02\xec\xcf\x90\xe4h\x12\x81]}\x14\xadKp\xa7@\x1d\xfa\xab){\xd6#x\xfe\x9f\xa0\x86O\xcf2\xb3\x03\xacn\x1d\x9aOS\xff7R\xba'\x12\xaa;", b'7,%\xdb\x8a\x81\x85\xae\xce\xad\x0f\xa1\n\x05\x97\x99\xf92\x84\x7f)"\xd6\x91\x97<\xcb\x13G\x88~\xa2\x8du,ct\x10\xa4t=\xac|\xbd\xb4\xfc\xda\xab\xd0\x0e\xab\xd7\xef\x0f\x92q\xba"j[6M\x9cX', b'\xc3\xeco\x90Np\t%\xa1\xb0\xdb\xc2u\xe2R\x90\xc5\xa51\xc7?\xab\xf3f\x8a\x90\x9d`;\xdc,\xfeK\r\xb8\xc0\xb4\xa0\xae\xe1ht\xf0\x7f\xf7$\xe2)\xc1\xf7d\xbc\xf0wL]\xf1\xd9v5\x081\xb8g', b'\x03\x8d\x1c\xfa\x7f\xc4\xba\t\xa3\x13\xb1X\xed\xdf\xfb\x0b*Y\xaeV\xcd\x8c\x91\xfd\x82t6\x05X\xdek\xed\xba\x86\xdf\xc8>\xecH\x84b\xda:]n>\xcdE\xed\xd1\xc2+5\x83~,A\x8d\xfd|\xe231\xa4', b'\x98Q\x16\x88\xb3u;\xc0\xb4_\xc1W\xc2\n\x16\x91!\xec\xae\xe4.\xcf\xc9\x91\xb0\xa1w\x85\xe7A\xd2\x0f\x8d\x98\xc9\x11]%\xd0\x1aa\xbeG0c\xa3\xe7D\xab\xa3\x8d\x189g\xa9\xb0.0\xd7\x8c\xfe\n_d', b'\x95\x1c\x0e\xdcB\xc0\xa5\xfb\x88\xad\xc5\xd1\x0c\x9e\x81n1\xcc\x99^!\xb3\xc6\x85\x15\x0en\x028 \x85\xc2\x86\xb6\xc0tH\xbd2;s\xb2\xb0c/\xcc\x9c\xd6\x18\x00(\x07Ff\xd8\x1b\xb0F\xc9CO2\xb7\x00', b'\xeb\xd80\x9a\xe3a\xa8\xab\x97\x16\t\x0eK\xae\xe9\xc2\x8c\x88\x92\xffe\x1b\xc88\xde65\xd7P\xe21\xf2\x85:\xd4\x1b\xc3\x82"5\xd9Vb\xe4\x10\xacC^\xd0,i\xc5\x8fj\x82yq<enB\xa3\xa4\xba', b"\xec!I\xc9\x94\xcf{\xbb\xea\xbf\xc5\x8crp9\x13\x1d\x8f\xae\xbe\xec\xde\\\xfa\xc73p\x17\x8a\x85\x96\xe7\xe16-N`\x1c1\xe7\x04\xf2\xe6\xdcy\xa6\xc7\x07m\xa0\x93*k\xce\x0c\x159\xedAOxz'\x1a", b'\x06%`\xbd\x06\xf0\xc6\x84\xb6\xebf[\r,\xb4[}G\xed\x15\xcb\x83\xe8\xa3\xd6\xa4\xf2\\]"\xba%\xf7\xe28\tc\xa7\xf6}\xad*\x90\xee8\x05\xfcN\xbd)Jf\xf7\x0c\xcbqm\xba\x00\xc5\\\x01[\xf5', b"\xdfE\xe0E\xb4F\x02'c\xd1\xf6\nux\x07\xdeS#%\xc1pa\xa3B\xc27M\x1d\xb6\x01\x06'=\x8c\xc4\x1b\xf3\xc7\xe4\xb6f\xd0']V\x94\xd8\xb4\x0b\xba\rmB\x00\xa8\xc7\x98\x89G\xccq|\xff/", b'Hv\x81C`\xc2\x7f\xf4\xca\xc1\xe9\x9a\xc0\xda04\xb6\xee\x18\xcf\x0c\xf5\x97<\xa4\xe7:!\xfc\x93x\xf7\x9a\x8aR02/do]]\xec\tq\x85\x8a\xd78\xbcf\xbd\xe7%1\xd3\xdf\xd2\x87\xcbExx\xb1', b'\x8b\xf9\xde\x1f\x1b\xfe\x0em\xc7\xf1S\x86`\x11m@\xa0e\xacl\xe1\x16CX\x0e\xa4=*\xe5;\xfd2CO\x12\x9c\x9f/\xe0G\x1c\xdb\x10S\xd6B.l\x16s\xf2\x18\x8d\xe5\xab\xe7\xa5\x9e\x88\x96\xc0D\xae\xdd', b'^\x9d\xfd\xcb\xdey\x9e\xce,\xdb\x1d\xac\xf4\xaa*\xc1\x1aZy\x08a\xbaA\x82\n7\x80\xd7\xaf\xe1\xf1a\xba\x89\xc9\x80*\xf5\xee\x9c\x87\x03\x1b\xeaj\xf1\x14$\xcf\x8dJ\x94\xa4\xec\xdb\r\x04\r\xe5\xd6\x9e`G\x06', b'UZ\xf0u\xe7Qs\x88e\xa58\t\x0c\xe0|~\xb9\xa8i\x045\xae\xa7\x7f\xe4\x18c\xae\x04\xc2\xc7\xb5O\xe2\xd1\xba\x16\xcaP\n\xb4\xfb\xa1k\xc0\xef\xc86;\r/A\xf2\x1d\x11\xe4\x96\xb5\x9a\xb1\x03\xbc\xb2!', b'\xe6\x88<\xecL\t=<\xcd\x16\xda\xa9\xb6%\x9a\x00\xc1\xe9Rf4G\xa7\xb2^T3\xeb\x98\x10\x12yL\xa5\x16\xf2\x8c\xc4(\xc6\x1f\xf4\xee7\xc8\xd4\xfd\xc3\x8fE\xb1@\xb6\xd8,\x126\x82q\xb1?\x98\x07R', b'F\x1c!\xc6\x04a\x1b\x94\x9aI\xa2m\xcab\xdc\xba\xab\x8d\xc3 \x1dY\xd0\xdc\xe5\x97Qv\xde\xb6\x07\xe7\xc7\xa0\xaei\xe0E\x1f\xa3\xfaWR\x1dk\xa9}u\xea\xcf\x0f\xd9\n\x01k\xa0\xae\xb6\xd4L\xff\xf2o\xae'], [[b'\x0b\x93\xbc\x0c\xac\xba\xa5\x96\xf4u\xce~\x93\xca\x00\x18\x83\xb16\xc8}%\xabA\xe8\xa7\xae\xe7LD\x16\xa2L\xcb:\xa9\xb9I\xa7\xe1\xa7\xca#3\x1d.~\x83\x0bPwy~H\xeb\xf8b\xa4B\xb6\\\x98uf', b'\x8d\xcf\xfb\x87\xf8\x81z:\xe9?\xab\xb9VA\x82\x97a"\x86-/!\xd0mB\x19\x94E\xf0k\xbf\xeey\xf8\x95\x17QJ[\xed\xb5\x91\x18\x99]Q\xf1\x80\xc2GE-\xfdko\xb2d;\x87W\x1cJ\x93,', b'_\x03\xeb^|-\xf4\xb9\xe2\xf4\xde\x13,/\xd1\x8a\x1d\xf4\x8c\xeb\xf33\xb4P\x0c9\xd1\x8f\x80r\x0f\x07T\xd7\xa6}\x13o\xc1a\xe3\x9cJ\xdd6P\x08\x15\xc3\xc3Q\xa5sD\xa5"\xcc\xcedB\xdd\xb3\xa4\xfa', b'\xae+/\xcd\x94R\x17\x11PZ\xcc=\xb9Fk\xc4\x12\xc1\xd3\xf9S\xe8\xbfE\x02s\xfa%\x0ec\xfa\x88 6t\x12\xe7\xbdU?M\xc3\\\xb7\x14pO\xa6\x04\xa1\xf4\x91D|\xa2\xf1\xf7\xdb\x15Q\x8c\xb8{\xdf', b'{KK\xe8WI.\xfa\xae\xf8\xc4\xbcZ\x90N\xdb\x88A\x84\x88:\x15\x17\xfd\xb1\x8e\xa0\x9c\x80\xd3\xf3\xd8\xb2\xb8\x9f\xc2_\x98R!.G\xae\xdeL\x12\x9c\xfa\xc4\x8f\x1d?\xeb\xdf\x03\x81j\xec\xc3l\x88\xf00\xe6', b'4\xdck\x19d\nJ\x82\x1e\xc5\xd0`e\xa8k\x8a\xcf\xfb\xaeJ@\xe863\x85U:\x08\x18\x1b0s\x9f\x85C\x02u\xe06\xb6\x8ad4\xb5\xfdW\x91k?\xbc\x83\xf1\x92OlVBu|`\xb3pj/', b'\x8c\xec\xefV\xea!\x00\xeeF)J\x83D\x9a\xe7\xbf0\xf7\xdc\x0c\x16#\xfa\xba\x9a\xd0\xf7\x92#\x04\xa0\xc1\xfa\xa2\xbc\x85\xfe\xdceb\xae\xee\xafDMy\x14\xb8\x12\x865\x88\x94\x97g\x98+\xe9;\x04g\xa7f\xd4', b"V\xaf'\x15vy\xc7\x97Q^\xf4\x1c\xc7*\xf4\xfcd\xe8\x84+[?\xea\xc1\xd2\x07\xb3\xbf\xbd\x06\xfd\t\xe5\xe7*w\xbc\xdal\xaez\x0c\xe7T*=\xd7\x82I\xfc$\xec\xb5C\xcc\x02%CT\xd8\x84\xcc\xcd\xa0", b'\x89\x8fK\xb3\x9f\xf0s\xbbG\xb7{\x07M\xd3\x92<\xea\xecZh\x93\xe8\x9d{\xcf\x90L!\xce\x9d[\x01\xfa\xfb\xc8\xde\x95{\xde\x1d\x85\x93`\xb3k\xa7\xe9\xf90Q\xd9\xe3\x1c\xa7#\x00x6\x1fbC\x87\\\xe1', b'\xad\xbe\xcc\x12F\x0f[\x87A\xc1aTXmA$7\x1f\x01\xa6\x88\xf5\xbbT{\xa7K\xde\xc3\xb3\r;+8\xa3\xd1\x86Wb\x8b\x7f\xc5\xd3\xffm\xb5\xc0\xca\x17\xb1\x86\xd3\xa4\x1c\x9d\n2\x9c\xb6\x1b\xbf6\x9f\x8a', b'\xa3\x00a&\xbbV\x9c\x91\x1bI\xe6\xbec\x12\xda\x9d\x11\xac\x8c\xcd2\x89K\xc5\x97\xb3\ri\x01^\xfc\x8a\xb3pc\x0e\xf8\x108u\xff\xf3\x9e\xa1\xf4S\x1d\x9f\xd9\x9f\xd6\x97FX\x06\xe5\x18\xa9=\xf7~\x9f@\xdc', b'+\x1ce\x05Ih,Xs\x85\xe5\x10\xd9\xf2\x1e\x13\xbc\xfaN\xf8\xb4\x84/n\x19\x97[\r#\x17laBl\xedN\xb3J\x8a{\x1ftM\x94\xfc:H\x95\xa0\xe6\xe3\x1e/MO.\xd5\xee\x18\xa3\xd1\xcbj0', b'X\n^4\xaf"U\xfdP^\xb7@L\xfbd\xb7\xac1\xa1X\'w\x00MY\xcc\x18[BN\x99\xfdv0\xa9\xbe\xd3U\x9dX\x08r\xb0\xaa\x97x\xd5:\xf6\x1d\x8b\xfb\xda\x10*.*\xbe\x86\x1ce\xd0\x1c"', b'\xdf\x85\xf4I\xb0\xe1\xc7\xda\xd2\xe4\xae@\xfe\x93x:\xed\xda\xc2x\xb9\xa6@\x1fN\xb6A*\xfd\xea\xfa+7k\xe0[\xd2{\x03w-\x82\xff=\n\x89\xa6\x82\x8e>!\x8f\xce~\xb9\xcaE\x00\xaa\xd4\xd4\x8a\xb5L', b'Z\xfa\x18\xa1\xe4\x18\x15\xcc\ng\x11\xa1U\xae\xd9\x8c\xf6\xd1\x98\r^\\\x80U\xa6>]\xd5\xbd{\x08\x992BP\xdf\xa0\xf4\xcc\xa1\x1f\x16\x1a\xb5O\xe4S\xc3C\x1c1O\xc4w\xf1J:;(\xc6\xfc"=H', b'\xda\x95o\xf1\xf1\xe1\x0e\xc0l\x0f\x04\xa2cj\x1fxWn\xd8\xeby=o5Z\xd5\xaaAd\xcd\xfd\x1c/RW/\x8bmKA\xb80\xa0\x96\x0e^4\xcf\xc8\xb6\xd4cok\xec\xe3\xc7\x12\xe1\xf4\x14T\xbb7', b'\xb2\x1b\xd2}F}qv\x0c\x03\x9d-\x04v\x98~\td\xa0\xb8\x1bvl\x185T/d\xf1\xb9\xf8%MS\x91\xf7.\xa6\xff\xf6\x80\xe6\xf9`x\\\xb4\xa7\xa5>I\xf3,v\x0b\xa4\xc4\xfd\xfe\xf6\xd7\x88u\x90', b'\xc87\xb8\xcd\xcd\xaa\x1d\xb6RQq\x00u?\xeb}\xbb\x84\xa6\x9d\xbc\xd6\x8dTD\x8b\x16v\x04\x13\x91]6\x82\x7f-\xb5+ 1{\xe9y\x0e\xf2\x00QVn\xee\x8d\xa1\x87-\xec%\xf7\x9a\xf5is\xf1\x02\x84', b'\xfb\x82e.\xe3\xea\xd6\xa5\xea\xd1$\x97\xccn\x8e\x16\xef\xb4=\xb0\xd1\xee\x04)F<t\xa7\x82\xf3#\x8aC\x00\x11\xe0T\x16D\xa1\xba39\xafoh\xe8d\x90gM\xeb\x8a\xbcC\x92c\xd6@\x1a`ol\xa9', b'\x02\x8d\xc6\x13c\xc1\xd7\xb9\xb9\x91\xaa\x08p\xd8\x18\xbd\xc4\xd3Pl\xe3\xe1\xba\x022\x99\x8c\x19\xa8F\xe0\x9a \x00\xc2L\xe8\xdc\xb2,\xd4\x1b7\x0bz\xaa\xfd>\xa0\x14?G\xb9\x1b\xba(<\xb89\x93\xbbgG\x97', b"\xa2:\\-\x89gN\x03\xed]\x1a\xb0wL\xe5X\x96W\x9b\x0fE\x8c{\x81\x81`'\xb5s\x19\xc5\x8d\xb0g:\x19\xfd\xd2}\x98K\xc5\xd6\x02\xe2uUZ<0Q\xe8\x0f\xb0\x9aH%\x0b\x8f\xb4\x03\x02F\xb8", b'qx\xa6\xd1\xf1M:\x0b\x01s\xfb\xfa\xee\x05\x1a\xf4\x9e^\x90\x0b6-h!\r\xf1\xe3\x95\xb7r\xbd\x8e\x1b%\xe4\xba\xaf\x82\xa7=~\xd8+\x1a\xeb\xa2Nay\x87;\x93\xa7\xfaF\x19\xa00\xcbBv\xc4\xcf\x19', b"\x83|\xc0\xde\x82\x15E0`,{$0\xb1'w\xbe\x83|\xd3\xa6\xaf\xf3(!\x88(!+g\x90W\x8a\x9dl\xf0\xe5@\xd1q\xd8\xd7I\x8d\x10\xcd\x16\xccIf\x0f\x9b\xd8O=;\xb5K\xaf\x1b\x1c\x17\x83\xf3", b'`y/X\x9bgGR\xbe\xc4\x05\x1aAA\x90#>\xc93$b\xb1\xb6\x9f\x96\xef\x11\x00(O\x1c\xf3\x95\xff\x92\xa2\xfc\xc2\x19\x94D\xa7\xb6\xf9\xf2\xe5q\xa7\xcbB\x93\xa5\xf8 \xa2\xb1\xcb\xe93\xfb]r=\x15', b'6h\xd4\x00-\x9aw\x9c\x9d\x15a=\x1647?\xa3I\x86\x90c.W\xc7\xdd\xb71\xb6\x97N\x07B\xebx\x85\x85,\x14\x8a\xbe\xa9\xab\xc9\t\x8d!:/\xb9\x9c\xba\xb1P\xad\xf7Z%\xa9\xd9\x8c\xda\xb4\xc4c', b'\xb6U\xbaE\xd1\xf5\xfc<\xed\xc28\xf2\xde-;V|\xf1\x12\xac\xe24\xde\x82$\x9f`?H\xca\x8e\xd5\xa8\xfc\xd3h\x15\xac\xa7\xea\xeb\xc8\xeb\xcf\xa3\xd8\x1d\xed\x1ej\xd1;\xc8\xbf\x8f\xdbQ\x1bR*\xf4$\xd8\n', b'\x94\xcaG\xb9\xf5d\x9e<VP1\xdd7\xdc\xfct;\x9b?\x11\x12\xc2E\xf8\xa6x09Q^)z\xeflhIO\xf2\xc4bH\\\xb5\xe6~\x95R\xa9;\x10\xb3\x9f\xa2"\xbf\xfb9\xf6\xff\x9d\x11\xd1\xb6F', b'/6\x80#\x94;\xa8V.||\xaa\xcaK\xa5\xfd\x8b\xf4\xbe\xe6\x0b\xa1\x9aZ\x9b+J\xab>\xdf\x8a\xaf\xca\xfaU\xbd\xae\xb8b7\x80\xca\x03\xbf\x15\xd0\x95\xcb\xd2`_\x92\xa1p\xeb\x16\xd7!\xdeH\x14\x92k\r', b'H\xc5\xc3\x83\xbb\xefM\xc5\x1ak\xb9?\xa2 {\xd2\xe3\xd7\xcb\xbfP\xbe\xb2\x13\x17\x19q\xe2\xc1\xf1\xd1n\xc5\x06\x9f\xc1\xb1{\xd2j#\xf7\t\xce\xecx\xcf\x08\x94^x\xa2$izR\xf7Q\x8b\x8c\xa5wA\xff', b'\x81\x1d\x8a\x81\xe0y\x1eE\xdc\xd3\xa1\xda\x90\xf3\x99\xa9h\xaa\n\x1d\xb1U\xed\xca\xcf\xda%\x12\xfa\xbc\xb1\xab\x06x\x83\x81\xa7\xa4Vt\x88#D\xf1\x07\x99\x03\x9c\xf6\xb4\xd5\xb2\xe7R\xf9\x16\xf3B\xb6\x81Yp\x80\xbf', b"H$\xff\xc11\x81\xbd\xbd\xa7\xaa\xdf7Ft\x06\xbd\xafo\xdbK\xd5'\x9b\xa6\x1eT\x1d\xc2\x93O\xd7\xd5\xa1\xc7\xfa\xe1\x0e\x9b\xa7\x96\xf4\xd1\x8b\x03\x12\x1a\x00&\xeba\xbdW\xb6\xaf9\x08\x04\x19\x87\xd6\\\xcaK\xb4", b'\x8e\x8e\x9f\x91\xc6`\xa6\x87\x14\xb8\xbd\xb4UU\x03(=\xa6\xf2\x1bz\xdf\xdf\x01s\xbf\x84I\xbc\x06_XO\x96\xf1F1\xb1@\\G@S\t2\x9c\xaab\x12\x1e\xc8*\x18M\xe0\xfb\xa9#XwD\xf1a|', b'-\x0f\xc0o\x8a\xb6\xb3Yfm\xa8^\x80\xa6\x98\xbd\x90\x8b\xf9\xe3R\xf5\x0c\xce\xbb\xfd-\x17\xd7\\\xfd\xdd\x1e\x9b4\x17\xdf=\x9b\x7f \x91\x81G\xf6u\xba\x10{g\xbf\xd3\xb5\xa4V|\xb4{\x03\x8a\x1b\xd4\xf8u', b'*P\xd9\xb6h>\x03J@\x0e\xc0\x04\xb4\xb8\xc1\x82\xb3\x93<\xe7h\xc0*\x12\xa4E\xfd\x9d\xf3\xd6\xc8\xf8\xda\x83E\xc3\t\xf5ypH17\xca\xe6a\xa6\xdf\xbf#*\xea\x9fZ\xe2\xf8\x17p\xf5\xc7\xd7qA\xde', b'_>\xb2M[\xa8\xe0k\xc14\xace\xb5\xba;\x8c,\x0f"c:jA\xae$\xac\xac\xff{bJ\xa8A\x1a\xa4<1\xd8$\xbcV1\xb2dR\xdd\x15lH\x1fh#^\x1c\xdb\x9cn\x8f1j1\x08\xb5K', b'\xb6fd\xe1d\xce\xfcf\xbf\xaa\x15\xf8\xbf\x0eU\x82a\xbd(\x93\xf1e\xfc%\x06\xf8\x04\xef\x81\xfb\xfa\x92\n\xbe\xaa\xeb5O\xe8[\xeb\xe9\xfb\x08\xd5\xbc\x05\xd7v\xdb\xd7\xb0S\x16*\x7f\xac\x01\x94\xba\x1d\xd01?', b"\xe2S&&\xf1t2\xfb\xea\xf3c\xdd\x9b\x8a\xae\xd1\x93 \x02\x92\x02t\xe6\xaf\xad\x82q\xf7E\x97\xcf\x1a\xec\xd4\xd1\xf9#\xb58\xcb\xfdX\x9a\xf1\xae\xb7\xbf\x08z~\xca\xf1\x81\xfc\xc3X\xda\x8e'\xf4\x89\x97\xa0\xd9", b'\x0e\xd4\xa9\xc1/\x91d\xac\x857\x01\x17\x01\x17\xe3\xa17\x1c:\xf6`\x9a>#\x06\xfa7[\xb5J>\xef\x81i\xda\x8b\x89{\xc8\x02\xf7\xa8Az}Y@\xfe\xd0\xe0p\x14q\xe6$\x9a360\xe2\x82\xd8*\xb4', b'\xba\xd0V\xe0\x8cDE\x80^\xed\x84-\xb0\xe31h\xe1\xc1\xe2\xcb7;\x195\xd8\xfe\xf6\xf3\xa0\xfd\x139\xc1\xd2B6\x11\xc9\x07P\xefn+\xf5x\x93b!"=b\xa5\xb9%3\xbbo\xa5u\xd5,\xae\xb6v', b'\x1b:\xfeC\xa7\xb2\x18\xbe9\xdd\x1d\xce3\xe4\x16t\xcf\x1b\x80v\xad> \x90\xf1N\xe7\xd1\xaf\x05C;\xc1\xd6$\xa5\xf3_\x10%\xff\x0e\x8f\xe6_\x03\xda9&3{\xa9G\xbf\x05\x914R\x9a\x90\xb7\x1f\xca]', b"\xa2\x11bm\x93n'\xa5\x8a\xfe\xd8.\xaf\x8e\x9f\xc1\xe4\xf5-\xf1\x8d$\xb6\x8b\x1b\xe6Z\xac.qpF&\n\x88I\x85_\xa5#e\xd2\x83\x1a\xeaO\x18a\xee\xe5\xfc\xfe\xad\xdc%\xefn\xe8|\xdc\xbf(\xdf\xe0", b'\x98\xbaJ2\xde\x8c\x87\xfcH\xcan\x15\xf1\xe9O\x88\xfb\xab\xe7\x18\x88\xb9\x08\xd2\xd1~\xdb\xbcK\xa0\xda\x9f\xad\x0b\x1c\xa5\x1c\x12\x0f""N\x06\x16\x12\xd1\xe0\xaf\x8b\x89\x91\x0b\x12_\xca\x13\x1e\xed<\xc4\xc1\x9d\xadE', b"_v8\x1a\xcaR\\\xd3^n?\x8e\xd0F\t\x95G4\x83\xd5R\xb9?\xee\xb4\xbcU\x82\xea\x06\xd4^\xe2'\xad\x9d/\xb1vWtf\xcc\x851\xb2\x9c\xe9\x8fO\x1aX\t2\xf7\xb5\xbc\xd1\x1e(r\xd1\x8b\xfc", b"!*\x05\xa8\xdf\xb6\x81\xce}L\xa9Ba\xe2\x93\xc9\t\xa1\x84+-7;\xb7\x86>\xb2L{Jw\x8bzd\xb6\x89X\x89;\x1a\x88\xd5\xbb\x87\xef\x99\x94&&'\x00yF\xb6\x1b\x8a\xb1\xe8\xbe\xcb\x9b\xfd->", b'\x88s\xe8\xa6\xae\xde\xc4\x01`\xb6\xce K\x85u\x7f\x1e\xc7\x05\x1d<\x8d\x99\xb1[\xa0\x0b\xd7\x08\xa0^\x13\x81\x81\x1f\x03\x80\xcc\x96\xe4r\xa2\n\xdc\xf0\xa5?\x9d\x98\x87*\x0e\xa2*\x97s\x184/r\xe1\x99\xbf ', b'\\\xbeGi\x86\x9b\x92\xcaj\x87bC*\x9a\x83k\x18]>\xe8\xbcFuk\xde\xc27\x1c23G\tZ\x12\x8b\x9d\xb1\xc6\xa8\x82\xf1\x95\xe7\xd7p)&R\xfc\xad\xbd\xc5Fw\xc4\xad\xed1\xed@\x00\x98\xb5\xa9', b'\x9b\r\xdf\xd1\xe4\xd6\x84n\xe4\xea\'\xd7"\xb4\xde\r2\xc5\xf6\xe7\x9cp/L\xa3 Y\xa9\xcf;v+s=*\x98\xe4\xcf\xb5b,<m\x83\x9c\x1da\\l\xbd`\x0e1\xa7c\xaeL\xb4Mp\xa0\x08\xb9/', b'\xdd;1]\xba\xf5(e&}coM=\xfb\xe6\x92XMe\x15\xb5I\x90\r\x85([L\xd8,r\x13\xad$AQ\x1b\xfe\x0e\xf8Rp\xd8\x9453\xf7\xf8\xbb\xa6\x12"\xb9\xd18\x16\x01\t\x92\xf5\xfb\x07d', b'\xb9\x13\xaf\xd8\xf4\xbe]\x8e\xfco|)bBNtY\x93\xecc\xb7AP\x1e\xa1\x18\x9c/\x1b`(\x16\xbdMc\x82\x0f\x1c\x15\xa8\x1f\x01\x122\xfd\x0e`C\xae2\x0b\xcc4\xeb\xa4\xf0\x98\x9cd\xa0Z\xceL\x0c', b'\x9e\x15=\xd95\xd4VGB\x17\xef}\xae\x0e\xd8X\xcb{q\xceF|\xe7d\xd4\xe26\x90\xbc\xdd\xf9\x9db1\x0e\xb6N\x98\x8aV\xba\xedd\xf1\xbb8x\xdd\x1f\t\x97\xcf?\x829\x80f\x89e\x88\x10r8\x1e', b')\xae\xfc\xb9U\xf9\xd0\x92\x1c\x01\x96\xc5\xee\x87\rS#\xd8_\xb98&fN\xf0\x90\x90\xf7\x85\x93wX)\xef\x81\xa97_\x0f<Y\xe4\xa9\x03y\xf9H\x9f\x1a\xb8\xfb\xce\xe4z\xab\x99\xe0\xbe\x93\x0c\x049\x1e\x96', b'\xbf\xd7\x0e\x07\x96\x08T\x8fc\x97\x92\xeaY \x83\xca\x81\xe9\xc2w#\xeb\x9f\x98\x9d.)g\xfe\x87F\xcd\xeb\xack\x95^\xa1\xdd\x1e\x985`\x93\xb3Bs\xabQ\xf9\xd4\xbb\xa3snf9\xd9/\xd0`\xe4{ ', b'\x06Fk\x82\xd3\x92\xbb\x01\x06A\xa7Ze"AdH\x08\x9c\xdc\x03d\xff\xc2\x13z6\x1a\xda\x15\x96c\xb2t\xef\x89\xd1\x9d\x1a\x8a\x0bk\xcf\x9bCp\xd1\xb2\xdb#\x01\xafn\xb6\x0c\xd5\xca\xe5\xdf\x9cl\x83C\xa6', b'\xf3\xfe\xdf<\xbc\x0c\xb2\xd5\x02\xf15\xbc\xd5\xfa_\x04\x08=\xb2\x96\x91K\xf9@cp\xf4\xca\x86L\xb2\x84\xe3\xbd\xe9?\x88\x12\xc9\x8a\x9d\xa5DLg\x1e\xd0\xa2\xfa\xce\xd2\x10\xb6\t\xdfJg{\xb6\xec0z\xcb\xad', b'\x83\xab\xe3\xe4\x03\xaf\x8c\xdab\x17A\x05%\xb2:\x11J\xd0),\xb0\\\r\x80\x1b\xc7\x1f6\x19Ui\xca\n\xf0u\xb1v8*\xbf\x1b\x08gSr \x11\xca\xfc\xe6\x8f,\xcc9\xbcV\xa2\x80\x84^\xb0\xcc\x19\x1d', b'\xf6\x92L\x94\xc5\xd7\x83\xb0\x12\xdct\x147Xh\x88w\x989Q~K[\xb7\x9e\x0c \xedj\xbfZ+s\x8a\x11\x1fc\x0f\x99\x95\xbdEC\xd1\x95\xd36\x1a\x8e\x0b\xeeIw|\xb8\x8c\r\xe6\x1d5\x0c[n\xf4', b"\x99\x16@>\x05\xc44\x17\xd4\x1d\xd6\xe0\x83\xa4\rl\xf0\x02+\xe5tY\x83'\xe7$:\x92y\x12\xd4\x05\xbe\x89T\xa1\xef3y\x9d]\xdf\xe2\xa1Y\x93\x93\xedp\x1f\xb2D\xfe\xfc\xcf\x92\x89\xc7\xfap\x10\xfd\x1d3", b'\x91\xed\xb1\x83}u\xaf\xf9\x18\x8c\x92\xd9`,\x04Uz5o\xf8\x15b\xcfRD\x03\xa6\x17/\x86u\xacX\xd9\x83\xd9\x89>\x84Z\x01\xd1b5\x13\xe8]f\x97KK\x8f:\x19E\xb3\xfc\xa2\x03\xd4\xb21\xe91', b'\x1d5p\xc6\xb6J\xf22,A\xcf\xbbK=Zk\x01\xa0\x12\x89\xd0\xccP\x99\xf5b\xfa\xc3\xf1\xe4\xc5\t\xd0hO\xa93\x9b\x90\xf0d\x0f\xee;#m\xd6\xff\xed\xcc\xe6\xe6\x94\xc3\x10\t\xa1o\x03\xe8\xcd\x1d\xf0\x15', b'x_\xb6\xa0\x99\xfahb\x9et\x99\x9e\xd3\xbd\x9c;\xaf\x86\xec\xc4\xd4Xg\x1a\xc2L\xad\x9d|!\x1a\xb3U\xcb\xbc\x1b\xcaa;d\xce\xda\xa0\xb6"x\x94~U\xae\xc4\xefu\x8cYCF\xdc\xca~y:s"', b'?\xfd\x89\xefF\ny\xd8\xad\xa8o#S\x9b\x88w\x8e51\\\xc8\x16\xd8\xba\xbc\xbb\xd2\xdf\xeaq\x0c1;\x82\xaf~~\xa5M\x83}\xb8(DE\xc4\x02XO\xd4\xc7C9[hj\xb7$v>\x9dk\xbb\xe1', b'\x82\x18\xecb\xb3Y\x12J\xc9z\xeb\xa3\x92Y\xec\xbd^)\xe2\x17d\x15\xceuUZ\xe1U\x0b\x1c9\x8c\x8fE4\xdd\xc4\x1ee*\xafU\x84\xd0\xfe%\xa2\x12\x17[i\x89"\xfb\x8cj\xa4MA\x13w\x91\x1d\x91', b'\xea\x14\x9cnT\x87k4\xa4\x18\x18qD\xac\xd7\x9fW\xeeU\x95\xf3\xd5%\xbf\xb3\x89@UcP\x18L\xc1[\x94D\xf9\xfa\x96X\xbc\xc2\xbc\r{P\xb5\x1a\xfd/\xb5S@\x0c\xa8i\x9eQ\xbb\x8ef;\xcc\x11', b'f}\xc0\x86L(\xd8\x114\x9e\xe5\t\xb0l\x90\r\x81\xf9\xce\x07\x03d\xeb\xbb|\x80\x83N\xa6\xf5\xe7\xa1\xe3{\x13\\\xf8\xd4h\xaeF2\x08Nk\x856LG\x84j\xe3\x1d\xceo\x0eR{\xb6\xd1TWX~'], [b'\x0eR\x16\xcf\xfe\xba\x1a\x9b\xca\xc9\xb9w\xcclSltPe\xd1\xfc\xe0\xddR\x9a\x1c\xf0\xd0\xa2\xffB\x93', b'\xe1\xfc\x08\xb8^\x06\x85a^\x0f\x8e\x84^\\\xe6\x05x\xa0\x9c(\x84&4g\xa5\xfc\x1f\xe2}\xe6\x96\xb1', b'h\xfc\xfeX\xd3\xed\xc8\xc4\x87\xe4\x8c\xa4\x07\xd4\xf9*\xbbY\xdd\xc9\xb9\x9b\x06\x16w*\x8c\xd9\xf5\xa2]i', b'\x95}\xbaI\xa30\xe13\xc0K\x8b\xbf\xbf\\`O\xea\xe9\xb7B\xd9\xb1\xb5h\x82\xd8>SG\xb8\xcc{', b"'\xbe\xd3A\xc7:\xb7M\x9c\xbf\xcf\xfd(\x9f\x8dU\x83\xafsIW<+\x0b{v!t\x0by\xefI", b'\xa0\x11\xcdn\x97\xda\xed>\x11\xd3\x0eMI\xa5X\xb1D\xac\xb6\xdc\xf2\x10\x80_{7E\xa0\xe5)F\xf6', b'\xcdk\xf6\x8c\xf8G\xb9\xd1s\xf6\xe5\x047\x88\xcc\x0f\x01}F:\x16b\x07c8\x813\xcd\xfe\x8e\xb4R', b'Wp-y`\xff\xb9"tg\x02\xb5\x84l.8\x16G$\x00\x1b E\x8e\xc2\xa9UZ\xef\x0f\xc7Q', b'\xd8N\x9e<\x8er\rV\xc9f\xc9\xa2\xe7S`\x07M\xbb\x7f\xbc\x9d\x82\x05\xef>{\xae\x98F<\xe3(', b'd\x088\x9e)N\xf0o?\xea|\xae\xfd\x964&;\x81\xa6\x12k\xde\xf4\x1d\xad\xb4\xde\xee\xed\xd5e\xd7', b'\xa546\xdfd \xa4\xcf|kw\xf1\xd7\xaab\xa0\xaf.\xa7\x19\xed\x15E\x86J\x10\xdb&6\x0c\x97t', b'\xdbW\xea3\xd1\xdd\x00\x01z\xc4U&5\x02\xf9\xe6[\x19\xf8\xb9\x8d\xdd;I\x08\xfc2\xcf\x08\xdf\x11q', b'\xaf\x92\xbd\xa3N*\xb7\xb8 \xc1\x04B\x9a\xe13\xe7\x01a\x02@\xfcE\xa2\xe656Ga\xce\xf8\xb8\xe9', b'\x05"\x0eEIv\x12\x9bX\xa0\xb6\x06\x84\xd7\x81z2\xd3\xab_\x0e\x05\xe5MM\xfe\x08\xa5\xd6[\xabf', b"V\x02%y\xe7\x95\xc4\x9a\xacA\xa8\xb3\xfd\xf7\xa1\xb3\x1e\x96\xedY'\x17@\t}\nNA9R\x03\x90", b'\xf8]w\x97\x1d\x7f\xcf\xd0=\x0c]\x0b\xff\xfa4\xbe\xf1p:u\xd84\x89\x15\t\xe5K\xff5\xb3\x1e\xa9', b'_F\xd0\xd5\xc5\x1c\xf7I\x90\xcf\x155\xf7s:$\x12\x1b=\xe9\x85\tx\x9d\xadt\x10-\xe9\xadQ\xee', b"\x00 \xeb\xc0\xcew\x81\xf9\xb2-\x94\x05'\x94\x89J\x01\x1c>P\x06\xf12\x06\x80G\x08\xdbc!\x17\x04", b"w7\xa3\xaf\xcf^ \xc5\xd3\xca\x8d\x12\xd85\xff'5~\x8d=\xa6]\x84\xb5\x9aZ*:\xe1k\xd0w", b'\xf2\x11@\x89\xf6\x8bV\xe1\xaaf&\xa8\xe0\x89:\x99\xf0\xd8\x06\xa5\xe9t+T\xf63l\xf5E\xcd\xc6\x0b', b'\xcfK\x07+O\x0c\xb3\xda`\xa9\xc0E\xc0 \xe4\xaa\xe1\xbf\xa5\xd5Z\x16j$\xb2\x9b\xc6\xd3\x11\xc6\xbcT', b"?\xf7\xb8\xe9'\xb1\x01]ml\xe1n\xe0\x97\xc4\xf4\xd9r\xb5\x05\x03q\xa8\x8f\x12\x82n\x13\xf6\xa0x\xe0", b'\xed0\xcft6\xbe\xe8\xf84}r\xf1\x8bv\xfa\x85\x00\x0f\x05\xd1\xee\xc0\xcb<g{0\xf0V\x98\xd7\xb2', b'.$\xf0\xf5\x87\x87]\xd8$}\xb7W\xbf\x9d\x0e\xd1\xda\xdc\xaa\x8f\xba\t\xf4=\x1d*\xd1\xef\xf4\xc9\xee\xcc', b'\xd1t\xf7\xcaIF\xda)\x00\xdc\xbf\x98\xae\x8aH\x03]\x80\xee\x8d\xee\xecy\xc8\xdb&\xacK{\xb3\\\x06', b'J;\x1b\xe3f\xeeW\x1ftH\xe6}\x98\x81\xcd\xce\xddJ\xde\x8b\xe5W\x90\x0c3X\xf8\xbd\x8e\xa8j\xb7', b'4\xc5\xda\xc8\xcc\x00\x03N]L\xbc%cNj5\xfd\x85\x18\x1du\xe0\xa0~%5&\xb0\xfd\x80C\xb7', b'N&\xde\x08\xe3\xe3\xda\xff\x01\x9c\x81\xce\xc8\x10\xd4\xad\xc0\x91~x\xe5K\x05m\xc3X\xa3\xde\xb9\xa7\xe2\xc3', b'@Y\x95\xc6\xefp\x83\xe6u\xaf\xe9&\xba\x91\xde9\x19\xe8\xbf\xd6\x99\x10\xa4\xfd\x07f{\x1a\x00A\xbe\xa9', b'\xcex\xe4\xf1)2\x04c\xadu\xf3\xe6\x17\xf6\xa1C\xe0\xd6f,\xd6\xbe\x7f\x95\xf9\xb8\x84\x1cJ\x16\xba\xbc', b'\x9b\xb4/\x90\x13Q\x8d\xe6\x02\x90\x89\x14\x15{\x0f\x01\xe6\x90Pe:\x1f3\xd4\x1ej\xe3a0\xbf\x8f\xe6', b'RE\xb9\xbb\xec\x9bo\xc4\x02\xa4\xaa\n\xa3\x8f\x8d\x9d\x1el\xe6\xaa\x0bF\x0bW U\xd3\xb3|@\xee3', b'\xd8jo\xe88\x1e\xa6u\xa8\xe6 \xde2G\xd7aF+\xc1Wx$\x81\xc1\x14t9\x9c\x82\x86\xf8?', b'\ng\xc2|\x89\xd4s%\xc9\xfc@_\xe5\xe6\xe8De&\x9b\x0c(Wku,\x02\x89!\x89[\x05%', b'1\xb7G\x02Y\x1e0H@j\xb4\xac!\xea\xef\x0c\xadfc[\x8c<C:\x07\xcc+6\xe6\x85\x91\t', b"[\xe6\xa1\x8bh\x11\x18L\xac{\x8c\xd6\x99\x1d\xbb\xa1DU\x97\xd0\x90%\xcd\xa5\xee\xb2'pX\xef\xa4_", b"\xa5\x14\xd4\\\x93\x98\xe6\xff\x89\x1b\xa5\xf1\xe9_\xfd\xff\x7f'X\x86\xdc\xe7\x05(m\x9b\xd47.{P\xa8", b'x2\xba\xc8\x19\xebg\x99\x06\xf9\x8f~\x1c;\xafG\x94\x84\x10x\xf3\x18\xa4\x1c\xd4\xad\xadw\xae\xa5m\\', b'\x02K\xe7\xd5\xd0D\xb9\xc7\xbe\x9a\xe9\xe1\xb0\x83\x8b#\xfc\x88\x8em\xd6vl\x84\xf8\xe3>\xdc\xd2e(\x12', b'\x9e\xd3{S#\xb7\x9fY\x0e\x08\x00H}?\x7f\x86k\xdb^\x10\xf1\xe8\xd9\xa4\xff\xd4\x0f\x87\xdd\xb7P\xe5', b'\t\xa7\x12C\xf3\xc5\x97\x93\xb0\x88#<\xaa\xd0\xa7\xe7\xf0SG\x92k\x88U\xf1$\xae:\x91imK\x8d', b'\xec\x02\x9eq\xca\xeb\xd8\xfd\xda\xf7\x96C\xa0frK\xcfcDm\x8d\x06\x1e\xe9\x1agg>\xe6yn\xcc', b"\x81\xda\x07\xff!1;\xeb\x1aHh]\t\xc8\xec'\xd4V\x1d)\x90\x04\x15\xbbGw\xcc|v\x93\xcam", b'\xfaL9\xf1t\xca\x07\xfc#\xeb\x01Aw)gQq\xbd+o\x92Al\x0f;\xe9C\xfe\x84Z\xd6\x84', b'\xe8\xa9\xf9\x89E\xe8\xd2\x8e\xd1\xef\x88\x05x\x8a\x86\xcc[C\x04u\xc1H\xaf(\xd8~t\x8br\x96U\x94', b'd\xa3\xbd\xd7\xc4\x14G_^\xf5\xad\xdb.0\xf0\x96J\x95\xda0\xb6\x05u\x96\x94\xb9O41j\xees', b"?\x80\xe1}$\xb0\xcc\xe34\xee'=5c\x02F\xcauP\x1bqJ\x9f\x85\x02G\x0f\xa9\\;\xf9}", b'\xc9\xb8+\xd9\xeam\x10@U\x0b\x86\x8e\xbfo\x8c\xc7\x87\x0c\xfe\x99r\xfd\x9dlDC\x97\x91\xcf\xff\xa2\xf4', b"\x98\xfd{\xd4\xdc\xc0\xdf\xb5\x95$5bD3\x82*p\x9c\xc1\xee\xacf\xa1\x86s\xec'JE3V\x9e", b'#\x8aa\x0e\xa6\xb9\xc4"k\xe1)>\x04}\xb1v\x8e\xe2\xea\xf9;l\x00\xcc\xdc6<t.\xa4\x88\x14', b'\xbe\x9d\xac\x9c\xf4\xd0x\xc1_\xd3w\x17&\x86\xa6\xfbB\xac\xcd\x07O\x81\x1d\xf0`|\x08\xe2-:\xe5|', b'a7\xc0\xb77+\x979\x1a\xe1\xc0\xfbY\x8b\x14\x87\x1a\x80\xbf: ;\xdfh\x85zlSLx\xd4\xd9', b'\x98\xa4\x8c?\x1a\x82\xd1)\xbb<F5_\xd2N\x87\xc4\xff\xccS\xc6\xcc\xd4\xa3"\x19c\r\rK\x95\xa9', b'\x83\x8ceLS~T\x05qEz\xf0u+q`\x92\x00h\xa6vCf\xbb\xbe\xb9-\xdfM\xab\x1e\xfa', b'\x06\xdc\xa0\xdb@\xc8z=6\xe4\xa7-"8\x02\x10)\x1a\x0e0\x8b\xcf\xbb\xddT\xf1\x9c3\x03\x10\x01-', b')2Aw?\xe6\x8f\x87\xbd\xf9pQ\xd1VY\xb8pt\xb4\xb3U\x9f\xaek\xd8\x91J\x8e\xcc\x10\xd9L', b'\xa7\x86\x1e\x94\xb4L\x00\xcb\xdc\x01\x13\xc1\x032 \xaa7\x10\x93\x9a\x1e\xf3\xf1\x9b\xcfp\xf2\xf2\x14J\xc1Q', b'\xfa9V\x02p[9\xee<\xb5\xdf\xf2\xcf\t\x8f\x7f!\xa5\x86\xa7F\x0f9?\x17L\x00\x97\x98d\xe8\x0e', b'\xe3\xf5J\xc6\xbcH\xa2\xf1\x89\xc7xj\xe3D\x85T\x11\xbe\xc0\xc3\xe4\xe0\x97\x0b\x8e\xc5\x91/\x03\xca\x92\xc3', b'\xd3K@]\x12\x03\x9f`\xe3 \xc1\xda>\x86\xb0Lo\xa5nXo\x17\x84\xbd\xedQ8-A;\xc1\x7f', b'\xb4\x82\xe8\xe3V\xbc<\xea\r+\xdd\xcc\x06I\x8b\xb9\xd6q\xe4\x8e\xaar\xf9l$\xa26<\xf4\xd7o\x82', b'o\xa8A9.\xa8\xa2\xec\xe2\xd0kE\x97\x81\xb0_\xc7\xfa\xd8\xd9\x0e\xa1q\x94\xae\xd13\xd9\xf8\xd5<\xac', b'\xc9\xbf\xdcY\xae&\x03\xb7p+\x04\xc9\xb0\xf8\xd8\xabq\xb8\x86\xa7\xb9\xee%\x94q\xbc\xcdo\xf1\x042\x83', b'\xf9\xb9J\xc1\xeb\x9a\x02\xe5\x92yR\xb5\xb7\x1b0\xa8\x11Q\xfey\xed\x08\xec@\xf4\x8e\xce\x01\x80x_8'], b'\xe7\xc5?\xc6\x1a\xf9\xb5\xd3\xfa\xb3\x16\xae \xad\xa5\xef\x0c\xa6\xc0-\xbb\xc4\xc5\xd1@-\xa6\x0b\xbf32-']]]
I = [b'=P\xa1\rg\xf2<<D\x08\xa4=\xf6\xa8A\xf6g\x19\xec\x11i\x18L0\x8f\r\x88\xeb\xa9.\xc04J\xdda\xf5\x0bHj\xee\x8dK#\xf6l\xd2\xfd\x9a\xa3\xe2"a\x86\x81\x1dO,\xd4\x97\xfd:\xa3\xc1t', b'\xeb\xcbj\xd8G\xc2\xe76\xca\xa2\xf1&o;\xa54 zz\xc7\xc8\xa8\x9dR\x08y\x9d\xf3\xfeP\xd6v\xe5\xd1\xa38\xc7\xfc\x1a1zH\x17\xfb6\x90V#zE\n;\xd3\x89v\x01l\x7f\x1bd\xee\x1b\xd3\xdc', b't!\xa6\xd8\xc1"|y\xf4\x90>!]Z\xc8[\xa3\x86\xad\x9a`\x86Q\x1f@\xbc\xc5\x90\x9cE\xfb\xfaD\xcd\x06vb\x89U\x94\xe3\x01:\x12$\xb6B0\xe4&w;Z\x06\xae\x94\x97\x85``~\xe6w&']
c = b'=\xc8\x0e`\xafj`\xcc\x10\xa9#}\xcd\x89\xef\xb61 \r\xa7\xc9\xc9\x876\xe8\x85G\xd9_0\xf4('
ss = [[b'{\xec\x97\x07b+\x00\x87\x085xD\x90\x1c\xb2\xc5\xce\xa7\xee\x0bd\x89D\x91\x87\x9c/\x06\x9a\x87\xe4\x17', b'>\xd0=n&\rV\xc5D\xbd\xc4\xef\x12L\x88\x15\xa5`\xec\x1c\xfc\xe3;\xa0w\xc6\xad\x12au\xd9(', b'X\xd0S\xe3N\xdf<_\x13\xdc\x98U\xa2G\xa1c\xf9B;I\x80 K#\x8a\x17Q\xd8p\x1b\x16\xe7'], [b'/\xe1;\xcb\xc1h\xafY\xbb\xea\xdd>\x0c\xa7\xba\xf6\xb4#\x1d\x92\x9e\x0e\xd7?\x0fhR\x89\x1a\xa3Ma', b'\x7f\x1d\xd4d8L\xfb$\xa5O?R]\x8d\xa0\x9aU\x1d|\xd5D6o;\xe5u\xe2O\x854\xe6\xa2', b'P 1\x115U,\x94\xdc\xf14\xda\x9fT\xf2\xc4Q\x93\xc9\x83\x02A\xb5|\xe0\xe0\t\xce\x97)\x12\xd1']]
matrix = [[b'\xdc`~\xf3w\xcdpV4\x80\xea\xf7\x12\n\xcfTo\xc8=\x0c\xf4R\x107QH\xab\xd9M1\xcc\xe5F\xd1\xe1\xde\xc9vH\xef\x0b\t\x0f#\xdc\x81\x86U\r\x85\xec\xa7\xa5\xe6\xbd\xd8t\xb5\\\xea\xd9p\xa3_', b"\xf6\x02\xae9a\xc9\x7f\x83\xa1g\xe7\x07\x98\xbc8\x06*\x1d\xab$|\x89\xa5b>X\xbeh>\xd1\xaf \xfb\xe2\x8a\xd3.\xbb\x0e\x98\xeeZ\xc5$J\xdb~\x87\xcc\xbf\x8f~\xa6\xd8T0\x9f\xf5'\xecK\xcc\xcaR", b'e\xc3\xdd\xd5\xcb\xc1\xb8\xbc\xe0\x16\xd8\x85I6l7\xb29\xaa0\xd5\xd6T8\xef\xf9\x92!\x8e\x1cq\xde\x9by\x97\x96\x91\x01=R\x9fp\x05\xa9\x17\xb4\xc0\xa1\xfe1\xeb\x80Z\xfc[\xe7p:>\xee\xb0\xd7\n\x98'], [b'\xf5\x0b\xc4\x9aF\x1b1\xf0\x1f;\xf9\xd6\xd9\x01\x93\xce-\x12\x0f8K\xc7f\x9b\x0b\xd2h\x8e\xec\xe8\x91\xbd\x01\x06\x11\xb4\x94\x8a\x8fq\xc3\n\n\xa7\x90:\xf7\x14rW\x93\xd1\xd7\xae\x00\x1dR\xf5,\xdf\xf6\xd3\xdf\xe0', b'\x17\xf4\x1c[~Bk\x89\xc7\xdf\xfd\xae%\x00\xd3\x12\xab\x02K\x80\x13\xab\x8e\xac\xb9\xedu\x14\x84\xd4;\xce\xcdu\xe8\x81+\x9b-\x12\xf0\xfb\xcb$\xb9\xeb\x19\xf1|\xfel\x7f4)0\xf1\x08\xfb\x93\xbb\xd3\xe2L\xcd', b'6+~\xb3\xd6\x83\xf9\xb2\\\xc8cDQ\xa9\xc9\xad\x8b\xd6L\xf6\x13\xf4L|%e\x98\xa7$\xd5)\x07\xbe\x82\xc2y\xeb\x82\x04\xb2!\xc1\xfe_\xd8k\xd6\xec\xb1\x1f\x16\xf0`6\x9cl\xe5\xbb\xe5\xd25Y?\xb9']]


# VerASNL(P1, P2, L1, s2, s);
sendTransaction(message, matrix, I, c, ss, "", rangeSig)




# send('test(uint256)', [0])

# sendVerRang(P1, L1, s2, s)
# sendASNL(P1, P2, L1, s2, s)

# # test()