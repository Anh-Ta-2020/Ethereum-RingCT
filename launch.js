// to run in geth: Secp256k1Curve


remixInterface = [{"constant":false,"inputs":[{"name":"tester","type":"string"}],"name":"test","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":false,"name":"_value","type":"string"}],"name":"PrintString","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":false,"name":"_value","type":"bool"}],"name":"PrintBool","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":false,"name":"_value","type":"address"}],"name":"PrintAddress","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"PrintUint","type":"event"}]

remixData = "60606040527f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f817986000557f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b860015560406040519081016040528060005481526020016001548152506002906002610076929190610120565b5060206040519081016040528060026002806020026040519081016040528092919082600280156100bc576020028201915b8154815260200190600101908083116100a8575b505050505081525060046000820151816000019060026100dd929190610160565b5050507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f600655600560075560066008556007600955341561011b57fe5b6101c5565b826002810192821561014f579160200282015b8281111561014e578251825591602001919060010190610133565b5b50905061015c91906101a0565b5090565b826002810192821561018f579160200282015b8281111561018e578251825591602001919060010190610173565b5b50905061019c91906101a0565b5090565b6101c291905b808211156101be5760008160009055506001016101a6565b5090565b90565b610700806101d46000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f9fbd5541461003b575bfe5b341561004357fe5b610093600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506100ad565b604051808215151515815260200191505060405180910390f35b600060006000600060006100bf61066a565b6100c7610692565b600060003373ffffffffffffffffffffffffffffffffffffffff167ffc680a6fc53e446d25af686ec231c7aa160212df2404385e8e63b4ad262609566040518080602001828103825260138152602001807f2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d0000000000000000000000000081525060200191505060405180910390a23373ffffffffffffffffffffffffffffffffffffffff167ffc680a6fc53e446d25af686ec231c7aa160212df2404385e8e63b4ad262609566040518080602001828103825260168152602001807f576520676f742061206e696365206d6573736167653a0000000000000000000081525060200191505060405180910390a23373ffffffffffffffffffffffffffffffffffffffff167ffc680a6fc53e446d25af686ec231c7aa160212df2404385e8e63b4ad262609568b6040518080602001828103825283818151815260200191508051906020019080838360008314610251575b8051825260208311156102515760208201915060208101905060208303925061022d565b505050905090810190601f16801561027d5780820380516001836020036101000a031916815260200191505b509250505060405180910390a27f70f78e12ca19e7ad5149e9e7aac89d472eba3eafda6dbd485d3c142e915b8cd797507ff24769e16ee2286f4bbe6f7f7d881a012cce9a00a914c8ec5d3fb8f645a027e696507f70f78e12ca19e7ad5149e9e7aac89d472eba3eafda6dbd485d3c142e915b8cd760010295507ff24769e16ee2286f4bbe6f7f7d881a012cce9a00a914c8ec5d3fb8f645a027e760010294506040604051908101604052808981526020018881525093506020604051908101604052808581525092506103538360000151610492565b91503373ffffffffffffffffffffffffffffffffffffffff167fa9fb0a1f0be3734901e8fbc28f614366dbf6b7c2d2a0b8175f6f6a91b1642b9183604051808215151515815260200191505060405180910390a26103b188886105ba565b90503373ffffffffffffffffffffffffffffffffffffffff167f1e8d6c75e643463d7c4cfa12fe6d1e69344ff1aa8bb66bbae281233cad12c50287600190046040518082815260200191505060405180910390a23373ffffffffffffffffffffffffffffffffffffffff167ffc680a6fc53e446d25af686ec231c7aa160212df2404385e8e63b4ad262609566040518080602001828103825260138152602001807f2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d0000000000000000000000000081525060200191505060405180910390a25b5050505050505050919050565b60006000600060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f92508460006002811015156104cc57fe5b6020020151600014806104f15750828560006002811015156104ea57fe5b6020020151145b8061050f575084600160028110151561050657fe5b60200201516000145b8061052c57508285600160028110151561052557fe5b6020020151145b1561053a57600093506105b2565b8285600160028110151561054a57fe5b602002015186600160028110151561055e57fe5b60200201510991508260078487600060028110151561057957fe5b60200201518689600060028110151561058e57fe5b60200201518a60006002811015156105a257fe5b6020020151090908905080821493505b505050919050565b60006000600060006000600060008814806105d457508688145b806105df5750600087145b156105ea5760006000fd5b868811156106015786888115156105fd57fe5b0697505b600193508692508791505b60008214151561064557818381151561062157fe5b0490508384820286038384840286038095508196508297508398505050505061060c565b600085121561065b57846000038703955061065f565b8495505b505050505092915050565b6040604051908101604052806002905b600081526020019060019003908161067a5790505090565b6040604051908101604052806106a66106ac565b81525090565b6040604051908101604052806002905b60008152602001906001900390816106bc57905050905600a165627a7a723058208c7f7d07129da37a8b141ce53e2aecc462322758e9cb32c501813a6389d9bbfd0029"


personal.unlockAccount(eth.accounts[0], "password", 50000000);
console.log("Unlocked account")

miner.start()
console.log("Started mining")

var ringct_sol_ringctContract = web3.eth.contract(remixInterface);

console.log("set contract")
var ringct_sol_ringct = ringct_sol_ringctContract.new(
   {
     from: web3.eth.accounts[0], 
     data: '0x' + remixData, 
     gas: '4700000'
   }, function (e, contract){
    console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);

		var printStringEvent = ringct_sol_ringct.PrintString({_from: web3.eth.coinbase});
		var printBoolEvent = ringct_sol_ringct.PrintBool({_from: web3.eth.coinbase});
		var printAddressEvent = ringct_sol_ringct.PrintAddress({_from: web3.eth.coinbase});
		var printUintEvent = ringct_sol_ringct.PrintUint({_from: web3.eth.coinbase});
		console.log("Listening on event")

		printStringEvent.watch(function(err, result) {
		  if (err) {
		    console.log(err)
		    return;
		  }
		  console.log(result.args._value)
		})
		printBoolEvent.watch(function(err, result) {
		  if (err) {
		    console.log(err)
		    return;
		  }
		  console.log("boolean incoming: " + result.args._value)
		})
		printAddressEvent.watch(function(err, result) {
		  if (err) {
		    console.log(err)
		    return;
		  }
		  console.log("address incoming: " +result.args._value)
		})
		printUintEvent.watch(function(err, result) {
		  if (err) {
		    console.log(err)
		    return;
		  }
		  console.log("uint incoming: " + result.args._value)
		})

		console.log("sending transaction")
		ringct_sol_ringct.test.sendTransaction('sendTransaction message', {from: web3.eth.coinbase})


    }
    setTimeout(function(){
		miner.stop()
		console.log("Stoped mining")
	}, 15000);
 })

